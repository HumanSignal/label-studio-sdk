# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .project_import_data_columns import ProjectImportDataColumns
from .project_import_file_upload_ids import ProjectImportFileUploadIds
from .project_import_found_formats import ProjectImportFoundFormats
from .project_import_preannotated_from_fields import ProjectImportPreannotatedFromFields
from .project_import_status import ProjectImportStatus
from .project_import_task_ids import ProjectImportTaskIds
from .project_import_tasks import ProjectImportTasks

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ProjectImport(pydantic.BaseModel):
    id: typing.Optional[int]
    preannotated_from_fields: typing.Optional[ProjectImportPreannotatedFromFields]
    commit_to_project: typing.Optional[bool]
    return_task_ids: typing.Optional[bool]
    status: typing.Optional[ProjectImportStatus]
    url: typing.Optional[str]
    traceback: typing.Optional[str]
    error: typing.Optional[str]
    created_at: typing.Optional[dt.datetime] = pydantic.Field(description="Creation time")
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(description="Updated time")
    finished_at: typing.Optional[dt.datetime] = pydantic.Field(description="Complete or fail time")
    task_count: typing.Optional[int]
    annotation_count: typing.Optional[int]
    prediction_count: typing.Optional[int]
    duration: typing.Optional[int]
    file_upload_ids: typing.Optional[ProjectImportFileUploadIds]
    could_be_tasks_list: typing.Optional[bool]
    found_formats: typing.Optional[ProjectImportFoundFormats]
    data_columns: typing.Optional[ProjectImportDataColumns]
    tasks: typing.Optional[ProjectImportTasks]
    task_ids: typing.Optional[ProjectImportTaskIds]
    project: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
