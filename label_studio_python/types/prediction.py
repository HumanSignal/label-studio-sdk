# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .prediction_neighbors import PredictionNeighbors
from .prediction_result import PredictionResult

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Prediction(pydantic.BaseModel):
    id: typing.Optional[int]
    model_version: typing.Optional[str]
    created_ago: typing.Optional[str] = pydantic.Field(description="Delta time from creation time")
    result: typing.Optional[PredictionResult] = pydantic.Field(description="Prediction result")
    score: typing.Optional[float] = pydantic.Field(description="Prediction score")
    cluster: typing.Optional[int] = pydantic.Field(description="Cluster for the current prediction")
    neighbors: typing.Optional[PredictionNeighbors] = pydantic.Field(
        description="Array of task IDs of the closest neighbors"
    )
    mislabeling: typing.Optional[float] = pydantic.Field(description="Related task mislabeling score")
    created_at: typing.Optional[dt.datetime]
    updated_at: typing.Optional[dt.datetime]
    model: typing.Optional[int] = pydantic.Field(description="An ML Backend instance that created the prediction.")
    model_run: typing.Optional[int] = pydantic.Field(description="A run of a ModelVersion that created the prediction.")
    task: int
    project: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
