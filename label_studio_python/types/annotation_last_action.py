# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class AnnotationLastAction(str, enum.Enum):
    """
    Action which was performed in the last annotation history item
    """

    PREDICTION = "prediction"
    PROPAGATED_ANNOTATION = "propagated_annotation"
    IMPORTED = "imported"
    SUBMITTED = "submitted"
    UPDATED = "updated"
    SKIPPED = "skipped"
    ACCEPTED = "accepted"
    REJECTED = "rejected"
    FIXED_AND_ACCEPTED = "fixed_and_accepted"
    DELETED_REVIEW = "deleted_review"

    def visit(
        self,
        prediction: typing.Callable[[], T_Result],
        propagated_annotation: typing.Callable[[], T_Result],
        imported: typing.Callable[[], T_Result],
        submitted: typing.Callable[[], T_Result],
        updated: typing.Callable[[], T_Result],
        skipped: typing.Callable[[], T_Result],
        accepted: typing.Callable[[], T_Result],
        rejected: typing.Callable[[], T_Result],
        fixed_and_accepted: typing.Callable[[], T_Result],
        deleted_review: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is AnnotationLastAction.PREDICTION:
            return prediction()
        if self is AnnotationLastAction.PROPAGATED_ANNOTATION:
            return propagated_annotation()
        if self is AnnotationLastAction.IMPORTED:
            return imported()
        if self is AnnotationLastAction.SUBMITTED:
            return submitted()
        if self is AnnotationLastAction.UPDATED:
            return updated()
        if self is AnnotationLastAction.SKIPPED:
            return skipped()
        if self is AnnotationLastAction.ACCEPTED:
            return accepted()
        if self is AnnotationLastAction.REJECTED:
            return rejected()
        if self is AnnotationLastAction.FIXED_AND_ACCEPTED:
            return fixed_and_accepted()
        if self is AnnotationLastAction.DELETED_REVIEW:
            return deleted_review()
