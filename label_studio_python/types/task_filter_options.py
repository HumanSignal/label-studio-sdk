# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .task_filter_options_annotated import TaskFilterOptionsAnnotated
from .task_filter_options_finished import TaskFilterOptionsFinished
from .task_filter_options_skipped import TaskFilterOptionsSkipped

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class TaskFilterOptions(pydantic.BaseModel):
    view: typing.Optional[int] = pydantic.Field(
        description="Apply filters from the view ID (a tab from the Data Manager)"
    )
    skipped: typing.Optional[TaskFilterOptionsSkipped] = pydantic.Field(
        description="`only` - include all tasks with skipped annotations<br>`exclude` - exclude all tasks with skipped annotations"
    )
    finished: typing.Optional[TaskFilterOptionsFinished] = pydantic.Field(
        description="`only` - include all finished tasks (is_labeled = true)<br>`exclude` - exclude all finished tasks"
    )
    annotated: typing.Optional[TaskFilterOptionsAnnotated] = pydantic.Field(
        description="`only` - include all tasks with at least one not skipped annotation<br>`exclude` - exclude all tasks with at least one not skipped annotation"
    )
    only_with_annotations: typing.Optional[bool]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
