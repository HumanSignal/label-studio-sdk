# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .project_reimport_data_columns import ProjectReimportDataColumns
from .project_reimport_file_upload_ids import ProjectReimportFileUploadIds
from .project_reimport_found_formats import ProjectReimportFoundFormats
from .project_reimport_status import ProjectReimportStatus

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class ProjectReimport(pydantic.BaseModel):
    id: typing.Optional[int]
    status: typing.Optional[ProjectReimportStatus]
    error: typing.Optional[str]
    task_count: typing.Optional[int]
    annotation_count: typing.Optional[int]
    prediction_count: typing.Optional[int]
    duration: typing.Optional[int]
    file_upload_ids: typing.Optional[ProjectReimportFileUploadIds]
    files_as_tasks_list: typing.Optional[bool]
    found_formats: typing.Optional[ProjectReimportFoundFormats]
    data_columns: typing.Optional[ProjectReimportDataColumns]
    traceback: typing.Optional[str]
    project: typing.Optional[int]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
