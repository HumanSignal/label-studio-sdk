# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .ml_backend_auth_method import MlBackendAuthMethod
from .ml_backend_extra_params import MlBackendExtraParams
from .ml_backend_state import MlBackendState

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class MlBackend(pydantic.BaseModel):
    id: typing.Optional[int]
    state: typing.Optional[MlBackendState]
    readable_state: typing.Optional[str]
    is_interactive: typing.Optional[bool] = pydantic.Field(
        description="Used to interactively annotate tasks. If true, model returns one list with results"
    )
    url: str = pydantic.Field(description="URL for the machine learning model server")
    error_message: typing.Optional[str] = pydantic.Field(description="Error message in error state")
    title: typing.Optional[str] = pydantic.Field(description="Name of the machine learning backend")
    auth_method: typing.Optional[MlBackendAuthMethod]
    basic_auth_user: typing.Optional[str] = pydantic.Field(description="HTTP Basic Auth user")
    basic_auth_pass: typing.Optional[str]
    basic_auth_pass_is_set: typing.Optional[str]
    description: typing.Optional[str] = pydantic.Field(description="Description for the machine learning backend")
    extra_params: typing.Optional[MlBackendExtraParams] = pydantic.Field(
        description="Any extra parameters passed to the ML Backend during the setup"
    )
    model_version: typing.Optional[str] = pydantic.Field(
        description="Current model version associated with this machine learning backend"
    )
    timeout: typing.Optional[float] = pydantic.Field(description="Response model timeout")
    created_at: typing.Optional[dt.datetime]
    updated_at: typing.Optional[dt.datetime]
    auto_update: typing.Optional[bool] = pydantic.Field(
        description="If false, model version is set by the user, if true - getting latest version from backend."
    )
    project: int

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
