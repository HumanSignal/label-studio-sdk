# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .annotation_last_action import AnnotationLastAction
from .annotation_result import AnnotationResult

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class Annotation(pydantic.BaseModel):
    id: typing.Optional[int]
    created_username: typing.Optional[str] = pydantic.Field(description="Username string")
    created_ago: typing.Optional[str] = pydantic.Field(description="Time delta from creation time")
    completed_by: typing.Optional[int]
    unique_id: typing.Optional[str]
    result: typing.Optional[AnnotationResult] = pydantic.Field(
        description="The main value of annotator work - labeling result in JSON format"
    )
    was_cancelled: typing.Optional[bool] = pydantic.Field(description="User skipped the task")
    ground_truth: typing.Optional[bool] = pydantic.Field(description="This annotation is a Ground Truth (ground_truth)")
    created_at: typing.Optional[dt.datetime] = pydantic.Field(description="Creation time")
    updated_at: typing.Optional[dt.datetime] = pydantic.Field(description="Last updated time")
    draft_created_at: typing.Optional[dt.datetime] = pydantic.Field(description="Draft creation time")
    lead_time: typing.Optional[float] = pydantic.Field(description="How much time it took to annotate the task")
    import_id: typing.Optional[int] = pydantic.Field(
        description="Original annotation ID that was at the import step or NULL if this annotation wasn't imported"
    )
    last_action: typing.Optional[AnnotationLastAction] = pydantic.Field(
        description="Action which was performed in the last annotation history item"
    )
    task: typing.Optional[int] = pydantic.Field(description="Corresponding task for this annotation")
    project: typing.Optional[int] = pydantic.Field(description="Project ID for this annotation")
    updated_by: typing.Optional[int] = pydantic.Field(description="Last user who updated this annotation")
    parent_prediction: typing.Optional[int] = pydantic.Field(
        description="Points to the prediction from which this annotation was created"
    )
    parent_annotation: typing.Optional[int] = pydantic.Field(
        description="Points to the parent annotation from which this annotation was created"
    )
    last_created_by: typing.Optional[int] = pydantic.Field(
        description="User who created the last annotation history item"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        json_encoders = {dt.datetime: serialize_datetime}
