# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import LabelStudioApiEnvironment
from .resources.annotations.client import AnnotationsClient, AsyncAnnotationsClient
from .resources.data.client import AsyncDataClient, DataClient
from .resources.data_manager.client import AsyncDataManagerClient, DataManagerClient
from .resources.export.client import AsyncExportClient, ExportClient
from .resources.invites.client import AsyncInvitesClient, InvitesClient
from .resources.labels.client import AsyncLabelsClient, LabelsClient
from .resources.machine_learning.client import AsyncMachineLearningClient, MachineLearningClient
from .resources.organizations.client import AsyncOrganizationsClient, OrganizationsClient
from .resources.predictions.client import AsyncPredictionsClient, PredictionsClient
from .resources.project_import.client import AsyncProjectImportClient, ProjectImportClient
from .resources.projects.client import AsyncProjectsClient, ProjectsClient
from .resources.storage.client import AsyncStorageClient, StorageClient
from .resources.storage_azure.client import AsyncStorageAzureClient, StorageAzureClient
from .resources.storage_gcs.client import AsyncStorageGcsClient, StorageGcsClient
from .resources.storage_local.client import AsyncStorageLocalClient, StorageLocalClient
from .resources.storage_redis.client import AsyncStorageRedisClient, StorageRedisClient
from .resources.storage_s_3.client import AsyncStorageS3Client, StorageS3Client
from .resources.tasks.client import AsyncTasksClient, TasksClient
from .resources.users.client import AsyncUsersClient, UsersClient
from .resources.webhooks.client import AsyncWebhooksClient, WebhooksClient


class LabelStudioApi:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: LabelStudioApiEnvironment = LabelStudioApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.Client] = None
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx.Client(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.annotations = AnnotationsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.data_manager = DataManagerClient(client_wrapper=self._client_wrapper)
        self.project_import = ProjectImportClient(client_wrapper=self._client_wrapper)
        self.invites = InvitesClient(client_wrapper=self._client_wrapper)
        self.labels = LabelsClient(client_wrapper=self._client_wrapper)
        self.machine_learning = MachineLearningClient(client_wrapper=self._client_wrapper)
        self.organizations = OrganizationsClient(client_wrapper=self._client_wrapper)
        self.predictions = PredictionsClient(client_wrapper=self._client_wrapper)
        self.projects = ProjectsClient(client_wrapper=self._client_wrapper)
        self.export = ExportClient(client_wrapper=self._client_wrapper)
        self.storage = StorageClient(client_wrapper=self._client_wrapper)
        self.storage_azure = StorageAzureClient(client_wrapper=self._client_wrapper)
        self.storage_gcs = StorageGcsClient(client_wrapper=self._client_wrapper)
        self.storage_local = StorageLocalClient(client_wrapper=self._client_wrapper)
        self.storage_redis = StorageRedisClient(client_wrapper=self._client_wrapper)
        self.storage_s_3 = StorageS3Client(client_wrapper=self._client_wrapper)
        self.tasks = TasksClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.data = DataClient(client_wrapper=self._client_wrapper)


class AsyncLabelStudioApi:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: LabelStudioApiEnvironment = LabelStudioApiEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = 60,
        httpx_client: typing.Optional[httpx.AsyncClient] = None
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx.AsyncClient(timeout=timeout) if httpx_client is None else httpx_client,
        )
        self.annotations = AsyncAnnotationsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.data_manager = AsyncDataManagerClient(client_wrapper=self._client_wrapper)
        self.project_import = AsyncProjectImportClient(client_wrapper=self._client_wrapper)
        self.invites = AsyncInvitesClient(client_wrapper=self._client_wrapper)
        self.labels = AsyncLabelsClient(client_wrapper=self._client_wrapper)
        self.machine_learning = AsyncMachineLearningClient(client_wrapper=self._client_wrapper)
        self.organizations = AsyncOrganizationsClient(client_wrapper=self._client_wrapper)
        self.predictions = AsyncPredictionsClient(client_wrapper=self._client_wrapper)
        self.projects = AsyncProjectsClient(client_wrapper=self._client_wrapper)
        self.export = AsyncExportClient(client_wrapper=self._client_wrapper)
        self.storage = AsyncStorageClient(client_wrapper=self._client_wrapper)
        self.storage_azure = AsyncStorageAzureClient(client_wrapper=self._client_wrapper)
        self.storage_gcs = AsyncStorageGcsClient(client_wrapper=self._client_wrapper)
        self.storage_local = AsyncStorageLocalClient(client_wrapper=self._client_wrapper)
        self.storage_redis = AsyncStorageRedisClient(client_wrapper=self._client_wrapper)
        self.storage_s_3 = AsyncStorageS3Client(client_wrapper=self._client_wrapper)
        self.tasks = AsyncTasksClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.data = AsyncDataClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: LabelStudioApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
