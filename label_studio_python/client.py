# This file was auto-generated by Fern from our API Definition.

import os
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from .annotations.client import AnnotationsClient, AsyncAnnotationsClient
from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .core.pydantic_utilities import pydantic_v1
from .core.query_encoder import encode_query
from .core.remove_none_from_dict import remove_none_from_dict
from .core.request_options import RequestOptions
from .data.client import AsyncDataClient, DataClient
from .data_manager.client import AsyncDataManagerClient, DataManagerClient
from .environment import LabelStudioApiEnvironment
from .export.client import AsyncExportClient, ExportClient
from .import.client import AsyncImportClient, ImportClient
from .invites.client import AsyncInvitesClient, InvitesClient
from .labels.client import AsyncLabelsClient, LabelsClient
from .machine_learning.client import (AsyncMachineLearningClient,
                                      MachineLearningClient)
from .organizations.client import AsyncOrganizationsClient, OrganizationsClient
from .predictions.client import AsyncPredictionsClient, PredictionsClient
from .projects.client import AsyncProjectsClient, ProjectsClient
from .storage.client import AsyncStorageClient, StorageClient
from .storage_azure.client import AsyncStorageAzureClient, StorageAzureClient
from .storage_gcs.client import AsyncStorageGcsClient, StorageGcsClient
from .storage_local.client import AsyncStorageLocalClient, StorageLocalClient
from .storage_redis.client import AsyncStorageRedisClient, StorageRedisClient
from .storage_s_3.client import AsyncStorageS3Client, StorageS3Client
from .tasks.client import AsyncTasksClient, TasksClient
from .types.list_response import ListResponse
from .types.project import Project
from .users.client import AsyncUsersClient, UsersClient
from .webhooks.client import AsyncWebhooksClient, WebhooksClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)
class LabelStudioApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.
    
    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.
    
    environment : LabelStudioApiEnvironment
        The environment to use for requests from the client. from .environment import LabelStudioApiEnvironment
        
        
        
        Defaults to LabelStudioApiEnvironment.DEFAULT
        
        
    
    api_key : typing.Optional[str]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests by default the timeout is 60 seconds, unless a custom httpx client is used, in which case a default is not set.
    
    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.
    
    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    
    Examples
    --------
    from label-studio.client import LabelStudioApi
    
    client = LabelStudioApi(api_key="YOUR_API_KEY", )
    """
    def __init__(self, *, base_url: typing.Optional[str] = None, environment: LabelStudioApiEnvironment = LabelStudioApiEnvironment.DEFAULT
    , api_key: typing.Optional[str] = os.getenv("LABEL_STUDIO_API_KEY"), timeout: typing.Optional[float] = None, follow_redirects: typing.Optional[bool] = True, httpx_client: typing.Optional[httpx.Client] = None):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if api_key is None:
            raise ApiError(body="The client must be instantiated be either passing in api_key or setting LABEL_STUDIO_API_KEY")
        self._client_wrapper = SyncClientWrapper(base_url=_get_base_url(base_url=base_url, environment=environment), api_key=api_key, httpx_client=httpx_client if httpx_client is not None else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects) if follow_redirects is not None else httpx.Client(timeout=_defaulted_timeout)
        , timeout=_defaulted_timeout)
        self.annotations = AnnotationsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.data_manager = DataManagerClient(client_wrapper=self._client_wrapper)
        self.import_ = ImportClient(client_wrapper=self._client_wrapper)
        self.invites = InvitesClient(client_wrapper=self._client_wrapper)
        self.labels = LabelsClient(client_wrapper=self._client_wrapper)
        self.machine_learning = MachineLearningClient(client_wrapper=self._client_wrapper)
        self.organizations = OrganizationsClient(client_wrapper=self._client_wrapper)
        self.predictions = PredictionsClient(client_wrapper=self._client_wrapper)
        self.projects = ProjectsClient(client_wrapper=self._client_wrapper)
        self.export = ExportClient(client_wrapper=self._client_wrapper)
        self.storage = StorageClient(client_wrapper=self._client_wrapper)
        self.storage_azure = StorageAzureClient(client_wrapper=self._client_wrapper)
        self.storage_gcs = StorageGcsClient(client_wrapper=self._client_wrapper)
        self.storage_local = StorageLocalClient(client_wrapper=self._client_wrapper)
        self.storage_redis = StorageRedisClient(client_wrapper=self._client_wrapper)
        self.storage_s_3 = StorageS3Client(client_wrapper=self._client_wrapper)
        self.tasks = TasksClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.data = DataClient(client_wrapper=self._client_wrapper)
    def list(self, *, ordering: typing.Optional[str] = None, ids: typing.Optional[str] = None, title: typing.Optional[str] = None, page: typing.Optional[int] = None, page_size: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None) -> ListResponse:
        """
        Return a list of the projects that you've created.
        
        To perform most tasks with the Label Studio API, you must specify the project ID, sometimes referred to as the `pk`.
        To retrieve a list of your Label Studio projects, update the following command to match your own environment.
        Replace the domain name, port, and authorization token, then run the following from the command line:
        
        ```bash
        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization: Token abc123'
        ```
        
        Parameters
        ----------
        ordering : typing.Optional[str]
            Which field to use when ordering the results.
        
        ids : typing.Optional[str]
            ids
        
        title : typing.Optional[str]
            title
        
        page : typing.Optional[int]
            A page number within the paginated result set.
        
        page_size : typing.Optional[int]
            Number of results to return per page.
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        ListResponse
            
        
        Examples
        --------
        from label-studio.client import LabelStudioApi
        
        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.list()
        """
        _response = self._client_wrapper.httpx_client.request(method="GET", url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"), 
            params=encode_query(jsonable_encoder(remove_none_from_dict({"ordering": ordering, "ids": ids, "title": title, "page": page, "page_size": page_size, **(request_options.get('additional_query_parameters', {}) if request_options is not None else {}),},
            ))),
            headers=jsonable_encoder(remove_none_from_dict({**self._client_wrapper.get_headers(),**(request_options.get('additional_headers', {}) if request_options is not None else {}),},
            )),
            timeout=request_options.get('timeout_in_seconds') if request_options is not None and request_options.get('timeout_in_seconds') is not None else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get('max_retries') if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListResponse, _response.json())# type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
    def create(self, *, request: Project, request_options: typing.Optional[RequestOptions] = None) -> Project:
        """
        Create a project and set up the labeling interface in Label Studio using the API.
        
        ```bash
        curl -H Content-Type:application/json -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects'     --data '{"label_config": "<View>[...]</View>"}'
        ```
        
        Parameters
        ----------
        request : Project
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        Project
            
        
        Examples
        --------
        from label-studio import Project
        from label-studio.client import LabelStudioApi
        
        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.create(request=Project(), )
        """
        _response = self._client_wrapper.httpx_client.request(method="POST", url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"), 
            params=encode_query(jsonable_encoder(request_options.get('additional_query_parameters') if request_options is not None else None)),
            json=jsonable_encoder(request) if request_options is None or request_options.get('additional_body_parameters') is None else {**jsonable_encoder(request), **(jsonable_encoder(remove_none_from_dict(request_options.get('additional_body_parameters', {}))))},
            headers=jsonable_encoder(remove_none_from_dict({**self._client_wrapper.get_headers(),**(request_options.get('additional_headers', {}) if request_options is not None else {}),},
            )),
            timeout=request_options.get('timeout_in_seconds') if request_options is not None and request_options.get('timeout_in_seconds') is not None else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get('max_retries') if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Project, _response.json())# type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
class AsyncLabelStudioApi:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.
    
    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.
    
    environment : LabelStudioApiEnvironment
        The environment to use for requests from the client. from .environment import LabelStudioApiEnvironment
        
        
        
        Defaults to LabelStudioApiEnvironment.DEFAULT
        
        
    
    api_key : typing.Optional[str]
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests by default the timeout is 60 seconds, unless a custom httpx client is used, in which case a default is not set.
    
    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.
    
    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    
    Examples
    --------
    from label-studio.client import AsyncLabelStudioApi
    
    client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
    """
    def __init__(self, *, base_url: typing.Optional[str] = None, environment: LabelStudioApiEnvironment = LabelStudioApiEnvironment.DEFAULT
    , api_key: typing.Optional[str] = os.getenv("LABEL_STUDIO_API_KEY"), timeout: typing.Optional[float] = None, follow_redirects: typing.Optional[bool] = True, httpx_client: typing.Optional[httpx.AsyncClient] = None):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        if api_key is None:
            raise ApiError(body="The client must be instantiated be either passing in api_key or setting LABEL_STUDIO_API_KEY")
        self._client_wrapper = AsyncClientWrapper(base_url=_get_base_url(base_url=base_url, environment=environment), api_key=api_key, httpx_client=httpx_client if httpx_client is not None else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects) if follow_redirects is not None else httpx.AsyncClient(timeout=_defaulted_timeout)
        , timeout=_defaulted_timeout)
        self.annotations = AsyncAnnotationsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.data_manager = AsyncDataManagerClient(client_wrapper=self._client_wrapper)
        self.import_ = AsyncImportClient(client_wrapper=self._client_wrapper)
        self.invites = AsyncInvitesClient(client_wrapper=self._client_wrapper)
        self.labels = AsyncLabelsClient(client_wrapper=self._client_wrapper)
        self.machine_learning = AsyncMachineLearningClient(client_wrapper=self._client_wrapper)
        self.organizations = AsyncOrganizationsClient(client_wrapper=self._client_wrapper)
        self.predictions = AsyncPredictionsClient(client_wrapper=self._client_wrapper)
        self.projects = AsyncProjectsClient(client_wrapper=self._client_wrapper)
        self.export = AsyncExportClient(client_wrapper=self._client_wrapper)
        self.storage = AsyncStorageClient(client_wrapper=self._client_wrapper)
        self.storage_azure = AsyncStorageAzureClient(client_wrapper=self._client_wrapper)
        self.storage_gcs = AsyncStorageGcsClient(client_wrapper=self._client_wrapper)
        self.storage_local = AsyncStorageLocalClient(client_wrapper=self._client_wrapper)
        self.storage_redis = AsyncStorageRedisClient(client_wrapper=self._client_wrapper)
        self.storage_s_3 = AsyncStorageS3Client(client_wrapper=self._client_wrapper)
        self.tasks = AsyncTasksClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.data = AsyncDataClient(client_wrapper=self._client_wrapper)
    async def list(self, *, ordering: typing.Optional[str] = None, ids: typing.Optional[str] = None, title: typing.Optional[str] = None, page: typing.Optional[int] = None, page_size: typing.Optional[int] = None, request_options: typing.Optional[RequestOptions] = None) -> ListResponse:
        """
        Return a list of the projects that you've created.
        
        To perform most tasks with the Label Studio API, you must specify the project ID, sometimes referred to as the `pk`.
        To retrieve a list of your Label Studio projects, update the following command to match your own environment.
        Replace the domain name, port, and authorization token, then run the following from the command line:
        
        ```bash
        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization: Token abc123'
        ```
        
        Parameters
        ----------
        ordering : typing.Optional[str]
            Which field to use when ordering the results.
        
        ids : typing.Optional[str]
            ids
        
        title : typing.Optional[str]
            title
        
        page : typing.Optional[int]
            A page number within the paginated result set.
        
        page_size : typing.Optional[int]
            Number of results to return per page.
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        ListResponse
            
        
        Examples
        --------
        from label-studio.client import AsyncLabelStudioApi
        
        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.list()
        """
        _response = await self._client_wrapper.httpx_client.request(method="GET", url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"), 
            params=encode_query(jsonable_encoder(remove_none_from_dict({"ordering": ordering, "ids": ids, "title": title, "page": page, "page_size": page_size, **(request_options.get('additional_query_parameters', {}) if request_options is not None else {}),},
            ))),
            headers=jsonable_encoder(remove_none_from_dict({**self._client_wrapper.get_headers(),**(request_options.get('additional_headers', {}) if request_options is not None else {}),},
            )),
            timeout=request_options.get('timeout_in_seconds') if request_options is not None and request_options.get('timeout_in_seconds') is not None else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get('max_retries') if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(ListResponse, _response.json())# type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
    async def create(self, *, request: Project, request_options: typing.Optional[RequestOptions] = None) -> Project:
        """
        Create a project and set up the labeling interface in Label Studio using the API.
        
        ```bash
        curl -H Content-Type:application/json -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects'     --data '{"label_config": "<View>[...]</View>"}'
        ```
        
        Parameters
        ----------
        request : Project
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        Project
            
        
        Examples
        --------
        from label-studio import Project
        from label-studio.client import AsyncLabelStudioApi
        
        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.create(request=Project(), )
        """
        _response = await self._client_wrapper.httpx_client.request(method="POST", url=urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"), 
            params=encode_query(jsonable_encoder(request_options.get('additional_query_parameters') if request_options is not None else None)),
            json=jsonable_encoder(request) if request_options is None or request_options.get('additional_body_parameters') is None else {**jsonable_encoder(request), **(jsonable_encoder(remove_none_from_dict(request_options.get('additional_body_parameters', {}))))},
            headers=jsonable_encoder(remove_none_from_dict({**self._client_wrapper.get_headers(),**(request_options.get('additional_headers', {}) if request_options is not None else {}),},
            )),
            timeout=request_options.get('timeout_in_seconds') if request_options is not None and request_options.get('timeout_in_seconds') is not None else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get('max_retries') if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(Project, _response.json())# type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
def _get_base_url(*, base_url: typing.Optional[str] = None, environment: LabelStudioApiEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
