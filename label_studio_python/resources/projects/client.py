# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.project import Project
from ...types.project_import import ProjectImport
from ...types.project_label_config import ProjectLabelConfig
from ...types.project_reimport import ProjectReimport
from .types.api_projects_list_response import ApiProjectsListResponse

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProjectsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def api_projects_list(
        self,
        *,
        ordering: typing.Optional[str] = None,
        ids: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
    ) -> ApiProjectsListResponse:
        """
        Return a list of the projects that you've created.

        To perform most tasks with the Label Studio API, you must specify the project ID, sometimes referred to as the `pk`.
        To retrieve a list of your Label Studio projects, update the following command to match your own environment.
        Replace the domain name, port, and authorization token, then run the following from the command line:

        ```bash
        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization: Token abc123'
        ```

        Parameters:
            - ordering: typing.Optional[str]. Which field to use when ordering the results.

            - ids: typing.Optional[str]. ids

            - title: typing.Optional[str]. title

            - page: typing.Optional[int]. A page number within the paginated result set.

            - page_size: typing.Optional[int]. Number of results to return per page.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"),
            params=remove_none_from_dict(
                {"ordering": ordering, "ids": ids, "title": title, "page": page, "page_size": page_size}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiProjectsListResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_create(self, *, request: Project) -> Project:
        """
        Create a project and set up the labeling interface in Label Studio using the API.

        ```bash
        curl -H Content-Type:application/json -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects'     --data '{"label_config": "<View>[...]</View>"}'
        ```

        Parameters:
            - request: Project.
        ---
        from label-studio import Project
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_create(request=Project(), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Project, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_validate_create(self, *, request: ProjectLabelConfig) -> None:
        """
        Validate an arbitrary labeling configuration.

        Parameters:
            - request: ProjectLabelConfig.
        ---
        from label-studio import ProjectLabelConfig
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_validate_create(request=ProjectLabelConfig(label_config="label_config", ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/validate/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_read(self, id: int) -> Project:
        """
        Retrieve information about a project by project ID.

        Parameters:
            - id: int. A unique integer value identifying this project.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_read(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Project, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_delete(self, id: int) -> None:
        """
        Delete a project by specified project ID.

        Parameters:
            - id: int. A unique integer value identifying this project.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_delete(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_partial_update(self, id: int, *, request: Project) -> Project:
        """
        Update the project settings for a specific project.

        Parameters:
            - id: int. A unique integer value identifying this project.

            - request: Project.
        ---
        from label-studio import Project
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_partial_update(id=1, request=Project(), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Project, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_imports_read(self, import_pk: str, id: int) -> ProjectImport:
        """
        Return data related to async project import operation

        Parameters:
            - import_pk: str.

            - id: int. A unique integer value identifying this project import.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_imports_read(import_pk="import_pk", id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/imports/{import_pk}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectImport, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_reimports_read(self, reimport_pk: str, id: int) -> ProjectReimport:
        """
        Return data related to async project reimport operation

        Parameters:
            - reimport_pk: str.

            - id: int. A unique integer value identifying this project reimport.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_reimports_read(reimport_pk="reimport_pk", id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/reimports/{reimport_pk}/"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectReimport, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_tasks_list(
        self, id: int, *, page: typing.Optional[int] = None, page_size: typing.Optional[int] = None
    ) -> None:
        """
        Retrieve a paginated list of tasks for a specific project. For example, use the following cURL command:

        ```bash
        curl -X GET https://localhost:8080/api/projects/{id}/tasks/?page=1&page_size=10 -H 'Authorization: Token abc123'
        ```

        Parameters:
            - id: int. A unique integer value identifying this project.

            - page: typing.Optional[int]. [or "start"] current page

            - page_size: typing.Optional[int]. [or "length"] tasks per page, use -1 to obtain all tasks (in this case "page" has no effect and this operation might be slow)
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_tasks_list(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/tasks/"),
            params=remove_none_from_dict({"page": page, "page_size": page_size}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_tasks_delete(self, id: int) -> None:
        """
        Delete all tasks from a specific project.

        Parameters:
            - id: int. A unique integer value identifying this project.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_tasks_delete(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/tasks/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_projects_validate_label_config(self, id: int, *, request: ProjectLabelConfig) -> ProjectLabelConfig:
        """
        Determine whether the label configuration for a specific project is valid.

        Parameters:
            - id: int. A unique integer value identifying this project.

            - request: ProjectLabelConfig.
        ---
        from label-studio import ProjectLabelConfig
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.projects.api_projects_validate_label_config(id=1, request=ProjectLabelConfig(label_config="label_config", ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/validate/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectLabelConfig, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProjectsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def api_projects_list(
        self,
        *,
        ordering: typing.Optional[str] = None,
        ids: typing.Optional[str] = None,
        title: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
    ) -> ApiProjectsListResponse:
        """
        Return a list of the projects that you've created.

        To perform most tasks with the Label Studio API, you must specify the project ID, sometimes referred to as the `pk`.
        To retrieve a list of your Label Studio projects, update the following command to match your own environment.
        Replace the domain name, port, and authorization token, then run the following from the command line:

        ```bash
        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization: Token abc123'
        ```

        Parameters:
            - ordering: typing.Optional[str]. Which field to use when ordering the results.

            - ids: typing.Optional[str]. ids

            - title: typing.Optional[str]. title

            - page: typing.Optional[int]. A page number within the paginated result set.

            - page_size: typing.Optional[int]. Number of results to return per page.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"),
            params=remove_none_from_dict(
                {"ordering": ordering, "ids": ids, "title": title, "page": page, "page_size": page_size}
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiProjectsListResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_create(self, *, request: Project) -> Project:
        """
        Create a project and set up the labeling interface in Label Studio using the API.

        ```bash
        curl -H Content-Type:application/json -H 'Authorization: Token abc123' -X POST 'https://localhost:8080/api/projects'     --data '{"label_config": "<View>[...]</View>"}'
        ```

        Parameters:
            - request: Project.
        ---
        from label-studio import Project
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_create(request=Project(), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Project, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_validate_create(self, *, request: ProjectLabelConfig) -> None:
        """
        Validate an arbitrary labeling configuration.

        Parameters:
            - request: ProjectLabelConfig.
        ---
        from label-studio import ProjectLabelConfig
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_validate_create(request=ProjectLabelConfig(label_config="label_config", ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/projects/validate/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_read(self, id: int) -> Project:
        """
        Retrieve information about a project by project ID.

        Parameters:
            - id: int. A unique integer value identifying this project.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_read(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Project, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_delete(self, id: int) -> None:
        """
        Delete a project by specified project ID.

        Parameters:
            - id: int. A unique integer value identifying this project.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_delete(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_partial_update(self, id: int, *, request: Project) -> Project:
        """
        Update the project settings for a specific project.

        Parameters:
            - id: int. A unique integer value identifying this project.

            - request: Project.
        ---
        from label-studio import Project
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_partial_update(id=1, request=Project(), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Project, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_imports_read(self, import_pk: str, id: int) -> ProjectImport:
        """
        Return data related to async project import operation

        Parameters:
            - import_pk: str.

            - id: int. A unique integer value identifying this project import.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_imports_read(import_pk="import_pk", id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/imports/{import_pk}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectImport, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_reimports_read(self, reimport_pk: str, id: int) -> ProjectReimport:
        """
        Return data related to async project reimport operation

        Parameters:
            - reimport_pk: str.

            - id: int. A unique integer value identifying this project reimport.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_reimports_read(reimport_pk="reimport_pk", id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(
                f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/reimports/{reimport_pk}/"
            ),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectReimport, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_tasks_list(
        self, id: int, *, page: typing.Optional[int] = None, page_size: typing.Optional[int] = None
    ) -> None:
        """
        Retrieve a paginated list of tasks for a specific project. For example, use the following cURL command:

        ```bash
        curl -X GET https://localhost:8080/api/projects/{id}/tasks/?page=1&page_size=10 -H 'Authorization: Token abc123'
        ```

        Parameters:
            - id: int. A unique integer value identifying this project.

            - page: typing.Optional[int]. [or "start"] current page

            - page_size: typing.Optional[int]. [or "length"] tasks per page, use -1 to obtain all tasks (in this case "page" has no effect and this operation might be slow)
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_tasks_list(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/tasks/"),
            params=remove_none_from_dict({"page": page, "page_size": page_size}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_tasks_delete(self, id: int) -> None:
        """
        Delete all tasks from a specific project.

        Parameters:
            - id: int. A unique integer value identifying this project.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_tasks_delete(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/tasks/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_projects_validate_label_config(self, id: int, *, request: ProjectLabelConfig) -> ProjectLabelConfig:
        """
        Determine whether the label configuration for a specific project is valid.

        Parameters:
            - id: int. A unique integer value identifying this project.

            - request: ProjectLabelConfig.
        ---
        from label-studio import ProjectLabelConfig
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.projects.api_projects_validate_label_config(id=1, request=ProjectLabelConfig(label_config="label_config", ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/projects/{id}/validate/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ProjectLabelConfig, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
