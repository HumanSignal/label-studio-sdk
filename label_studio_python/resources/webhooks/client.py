# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.webhook import Webhook
from ...types.webhook_serializer_for_update import WebhookSerializerForUpdate
from .types.api_webhooks_partial_update_request_actions_item import ApiWebhooksPartialUpdateRequestActionsItem
from .types.api_webhooks_update_request_actions_item import ApiWebhooksUpdateRequestActionsItem

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WebhooksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def api_webhooks_list(self, *, project: typing.Optional[str] = None) -> typing.List[Webhook]:
        """
        List all webhooks set up for your organization.

        Parameters:
            - project: typing.Optional[str]. Project ID
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks/"),
            params=remove_none_from_dict({"project": project}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Webhook], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_webhooks_create(self, *, request: Webhook) -> Webhook:
        """
        Create a webhook for your organization.

        Parameters:
            - request: Webhook.
        ---
        from label-studio import Webhook
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_create(request=Webhook(url="url", ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Webhook, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_webhooks_info_list(self, *, organization_only: typing.Optional[bool] = None) -> None:
        """
        Get descriptions of all available webhook actions to set up webhooks.

        Parameters:
            - organization_only: typing.Optional[bool]. organization-only or not
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_info_list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks/info/"),
            params=remove_none_from_dict({"organization-only": organization_only}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_webhooks_read(self, id: int) -> Webhook:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_read(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Webhook, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_webhooks_update(
        self,
        id: int,
        *,
        url: str,
        send_payload: typing.Optional[bool] = None,
        send_for_all_actions: typing.Optional[bool] = None,
        headers: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        actions: typing.Optional[
            typing.Union[ApiWebhooksUpdateRequestActionsItem, typing.List[ApiWebhooksUpdateRequestActionsItem]]
        ] = None,
        request: WebhookSerializerForUpdate,
    ) -> WebhookSerializerForUpdate:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.

            - url: str. URL of webhook

            - send_payload: typing.Optional[bool]. If value is False send only action

            - send_for_all_actions: typing.Optional[bool]. If value is False - used only for actions from WebhookAction

            - headers: typing.Optional[str]. Key Value Json of headers

            - is_active: typing.Optional[bool]. If value is False the webhook is disabled

            - actions: typing.Optional[typing.Union[ApiWebhooksUpdateRequestActionsItem, typing.List[ApiWebhooksUpdateRequestActionsItem]]].

            - request: WebhookSerializerForUpdate.
        ---
        from label-studio import WebhookSerializerForUpdate
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_update(id=1, url="url", request=WebhookSerializerForUpdate(url="url", ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            params=remove_none_from_dict(
                {
                    "url": url,
                    "send_payload": send_payload,
                    "send_for_all_actions": send_for_all_actions,
                    "headers": headers,
                    "is_active": is_active,
                    "actions": actions,
                }
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(WebhookSerializerForUpdate, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_webhooks_delete(self, id: int) -> None:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_delete(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_webhooks_partial_update(
        self,
        id: int,
        *,
        url: str,
        send_payload: typing.Optional[bool] = None,
        send_for_all_actions: typing.Optional[bool] = None,
        headers: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        actions: typing.Optional[
            typing.Union[
                ApiWebhooksPartialUpdateRequestActionsItem, typing.List[ApiWebhooksPartialUpdateRequestActionsItem]
            ]
        ] = None,
        request: WebhookSerializerForUpdate,
    ) -> WebhookSerializerForUpdate:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.

            - url: str. URL of webhook

            - send_payload: typing.Optional[bool]. If value is False send only action

            - send_for_all_actions: typing.Optional[bool]. If value is False - used only for actions from WebhookAction

            - headers: typing.Optional[str]. Key Value Json of headers

            - is_active: typing.Optional[bool]. If value is False the webhook is disabled

            - actions: typing.Optional[typing.Union[ApiWebhooksPartialUpdateRequestActionsItem, typing.List[ApiWebhooksPartialUpdateRequestActionsItem]]].

            - request: WebhookSerializerForUpdate.
        ---
        from label-studio import WebhookSerializerForUpdate
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.webhooks.api_webhooks_partial_update(id=1, url="url", request=WebhookSerializerForUpdate(url="url", ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            params=remove_none_from_dict(
                {
                    "url": url,
                    "send_payload": send_payload,
                    "send_for_all_actions": send_for_all_actions,
                    "headers": headers,
                    "is_active": is_active,
                    "actions": actions,
                }
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(WebhookSerializerForUpdate, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWebhooksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def api_webhooks_list(self, *, project: typing.Optional[str] = None) -> typing.List[Webhook]:
        """
        List all webhooks set up for your organization.

        Parameters:
            - project: typing.Optional[str]. Project ID
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks/"),
            params=remove_none_from_dict({"project": project}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[Webhook], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_webhooks_create(self, *, request: Webhook) -> Webhook:
        """
        Create a webhook for your organization.

        Parameters:
            - request: Webhook.
        ---
        from label-studio import Webhook
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_create(request=Webhook(url="url", ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Webhook, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_webhooks_info_list(self, *, organization_only: typing.Optional[bool] = None) -> None:
        """
        Get descriptions of all available webhook actions to set up webhooks.

        Parameters:
            - organization_only: typing.Optional[bool]. organization-only or not
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_info_list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/webhooks/info/"),
            params=remove_none_from_dict({"organization-only": organization_only}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_webhooks_read(self, id: int) -> Webhook:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_read(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(Webhook, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_webhooks_update(
        self,
        id: int,
        *,
        url: str,
        send_payload: typing.Optional[bool] = None,
        send_for_all_actions: typing.Optional[bool] = None,
        headers: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        actions: typing.Optional[
            typing.Union[ApiWebhooksUpdateRequestActionsItem, typing.List[ApiWebhooksUpdateRequestActionsItem]]
        ] = None,
        request: WebhookSerializerForUpdate,
    ) -> WebhookSerializerForUpdate:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.

            - url: str. URL of webhook

            - send_payload: typing.Optional[bool]. If value is False send only action

            - send_for_all_actions: typing.Optional[bool]. If value is False - used only for actions from WebhookAction

            - headers: typing.Optional[str]. Key Value Json of headers

            - is_active: typing.Optional[bool]. If value is False the webhook is disabled

            - actions: typing.Optional[typing.Union[ApiWebhooksUpdateRequestActionsItem, typing.List[ApiWebhooksUpdateRequestActionsItem]]].

            - request: WebhookSerializerForUpdate.
        ---
        from label-studio import WebhookSerializerForUpdate
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_update(id=1, url="url", request=WebhookSerializerForUpdate(url="url", ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PUT",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            params=remove_none_from_dict(
                {
                    "url": url,
                    "send_payload": send_payload,
                    "send_for_all_actions": send_for_all_actions,
                    "headers": headers,
                    "is_active": is_active,
                    "actions": actions,
                }
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(WebhookSerializerForUpdate, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_webhooks_delete(self, id: int) -> None:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_delete(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_webhooks_partial_update(
        self,
        id: int,
        *,
        url: str,
        send_payload: typing.Optional[bool] = None,
        send_for_all_actions: typing.Optional[bool] = None,
        headers: typing.Optional[str] = None,
        is_active: typing.Optional[bool] = None,
        actions: typing.Optional[
            typing.Union[
                ApiWebhooksPartialUpdateRequestActionsItem, typing.List[ApiWebhooksPartialUpdateRequestActionsItem]
            ]
        ] = None,
        request: WebhookSerializerForUpdate,
    ) -> WebhookSerializerForUpdate:
        """
        Parameters:
            - id: int. A unique integer value identifying this webhook.

            - url: str. URL of webhook

            - send_payload: typing.Optional[bool]. If value is False send only action

            - send_for_all_actions: typing.Optional[bool]. If value is False - used only for actions from WebhookAction

            - headers: typing.Optional[str]. Key Value Json of headers

            - is_active: typing.Optional[bool]. If value is False the webhook is disabled

            - actions: typing.Optional[typing.Union[ApiWebhooksPartialUpdateRequestActionsItem, typing.List[ApiWebhooksPartialUpdateRequestActionsItem]]].

            - request: WebhookSerializerForUpdate.
        ---
        from label-studio import WebhookSerializerForUpdate
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.webhooks.api_webhooks_partial_update(id=1, url="url", request=WebhookSerializerForUpdate(url="url", ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/webhooks/{id}/"),
            params=remove_none_from_dict(
                {
                    "url": url,
                    "send_payload": send_payload,
                    "send_for_all_actions": send_for_all_actions,
                    "headers": headers,
                    "is_active": is_active,
                    "actions": actions,
                }
            ),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(WebhookSerializerForUpdate, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
