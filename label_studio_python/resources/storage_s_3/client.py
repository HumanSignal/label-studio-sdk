# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_dict import remove_none_from_dict
from ...types.s_3_export_storage import S3ExportStorage
from ...types.s_3_import_storage import S3ImportStorage

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class StorageS3Client:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def api_storages_export_s_3_list(self, *, project: typing.Optional[int] = None) -> typing.List[S3ExportStorage]:
        """
        Get a list of all S3 export storage connections.

        Parameters:
            - project: typing.Optional[int]. Project ID
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/export/s3"),
            params=remove_none_from_dict({"project": project}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[S3ExportStorage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_export_s_3_create(self, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Create a new S3 export storage connection to store annotations.

        Parameters:
            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_create(request=S3ExportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/export/s3"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_export_s_3_validate_create(self, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Validate a specific S3 export storage connection.

        Parameters:
            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_validate_create(request=S3ExportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/export/s3/validate"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_export_s_3_read(self, id: int) -> S3ExportStorage:
        """
        Get a specific S3 export storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 export storage.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_read(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_export_s_3_delete(self, id: int) -> None:
        """
        Delete a specific S3 export storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 export storage.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_delete(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_export_s_3_partial_update(self, id: int, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Update a specific S3 export storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 export storage.

            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_partial_update(id=1, request=S3ExportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_export_s_3_sync_create(self, id: str, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Sync tasks from an S3 export storage connection.

        Parameters:
            - id: str.

            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_export_s_3_sync_create(id="id", request=S3ExportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}/sync"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_list(self, *, project: typing.Optional[int] = None) -> typing.List[S3ImportStorage]:
        """
        Get a list of all S3 import storage connections.

        Parameters:
            - project: typing.Optional[int]. Project ID
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/s3/"),
            params=remove_none_from_dict({"project": project}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[S3ImportStorage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_create(self, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Get new S3 import storage

        Parameters:
            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_create(request=S3ImportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/s3/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_validate_create(self, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Validate a specific S3 import storage connection.

        Parameters:
            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_validate_create(request=S3ImportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/s3/validate"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_read(self, id: int) -> S3ImportStorage:
        """
        Get a specific S3 import storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 import storage.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_read(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_delete(self, id: int) -> None:
        """
        Delete a specific S3 import storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 import storage.
        ---
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_delete(id=1, )
        """
        _response = self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_partial_update(self, id: int, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Update a specific S3 import storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 import storage.

            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_partial_update(id=1, request=S3ImportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def api_storages_s_3_sync_create(self, id: str, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Sync tasks from an S3 import storage connection.

        Parameters:
            - id: str.

            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import LabelStudioApi

        client = LabelStudioApi(api_key="YOUR_API_KEY", )
        client.storage_s_3.api_storages_s_3_sync_create(id="id", request=S3ImportStorage(project=1, ), )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}/sync"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncStorageS3Client:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def api_storages_export_s_3_list(
        self, *, project: typing.Optional[int] = None
    ) -> typing.List[S3ExportStorage]:
        """
        Get a list of all S3 export storage connections.

        Parameters:
            - project: typing.Optional[int]. Project ID
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/export/s3"),
            params=remove_none_from_dict({"project": project}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[S3ExportStorage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_export_s_3_create(self, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Create a new S3 export storage connection to store annotations.

        Parameters:
            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_create(request=S3ExportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/export/s3"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_export_s_3_validate_create(self, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Validate a specific S3 export storage connection.

        Parameters:
            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_validate_create(request=S3ExportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/export/s3/validate"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_export_s_3_read(self, id: int) -> S3ExportStorage:
        """
        Get a specific S3 export storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 export storage.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_read(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_export_s_3_delete(self, id: int) -> None:
        """
        Delete a specific S3 export storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 export storage.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_delete(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_export_s_3_partial_update(self, id: int, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Update a specific S3 export storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 export storage.

            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_partial_update(id=1, request=S3ExportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_export_s_3_sync_create(self, id: str, *, request: S3ExportStorage) -> S3ExportStorage:
        """
        Sync tasks from an S3 export storage connection.

        Parameters:
            - id: str.

            - request: S3ExportStorage.
        ---
        from label-studio import S3ExportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_export_s_3_sync_create(id="id", request=S3ExportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/export/s3/{id}/sync"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ExportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_list(self, *, project: typing.Optional[int] = None) -> typing.List[S3ImportStorage]:
        """
        Get a list of all S3 import storage connections.

        Parameters:
            - project: typing.Optional[int]. Project ID
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/s3/"),
            params=remove_none_from_dict({"project": project}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[S3ImportStorage], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_create(self, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Get new S3 import storage

        Parameters:
            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_create(request=S3ImportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/s3/"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_validate_create(self, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Validate a specific S3 import storage connection.

        Parameters:
            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_validate_create(request=S3ImportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "api/storages/s3/validate"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_read(self, id: int) -> S3ImportStorage:
        """
        Get a specific S3 import storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 import storage.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_read(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_delete(self, id: int) -> None:
        """
        Delete a specific S3 import storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 import storage.
        ---
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_delete(id=1, )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}"),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_partial_update(self, id: int, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Update a specific S3 import storage connection.

        Parameters:
            - id: int. A unique integer value identifying this s3 import storage.

            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_partial_update(id=1, request=S3ImportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "PATCH",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def api_storages_s_3_sync_create(self, id: str, *, request: S3ImportStorage) -> S3ImportStorage:
        """
        Sync tasks from an S3 import storage connection.

        Parameters:
            - id: str.

            - request: S3ImportStorage.
        ---
        from label-studio import S3ImportStorage
        from label-studio.client import AsyncLabelStudioApi

        client = AsyncLabelStudioApi(api_key="YOUR_API_KEY", )
        await client.storage_s_3.api_storages_s_3_sync_create(id="id", request=S3ImportStorage(project=1, ), )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", f"api/storages/s3/{id}/sync"),
            json=jsonable_encoder(request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(S3ImportStorage, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
