# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "cluster": 1,
            "created_ago": "created_ago",
            "created_at": "2024-01-15T09:30:00Z",
            "id": 1,
            "mislabeling": 1.1,
            "model": 1,
            "model_run": 1,
            "model_version": "model_version",
            "neighbors": {"key": "value"},
            "project": 1,
            "result": [{"key": "value"}],
            "score": 1.1,
            "task": 1,
            "updated_at": "2024-01-15T09:30:00Z",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "cluster": "integer",
                "created_ago": None,
                "created_at": "datetime",
                "id": "integer",
                "mislabeling": None,
                "model": "integer",
                "model_run": "integer",
                "model_version": None,
                "neighbors": None,
                "project": "integer",
                "result": ("list", {0: ("dict", {0: (None, None)})}),
                "score": None,
                "task": "integer",
                "updated_at": "datetime",
            }
        },
    )
    response = client.predictions.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "cluster": 1,
        "created_ago": "created_ago",
        "created_at": "2024-01-15T09:30:00Z",
        "id": 1,
        "mislabeling": 1.1,
        "model": 1,
        "model_run": 1,
        "model_version": "yolo-v8",
        "neighbors": {"key": "value"},
        "project": 1,
        "result": [
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        "score": 0.95,
        "task": 1,
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "cluster": "integer",
        "created_ago": None,
        "created_at": "datetime",
        "id": "integer",
        "mislabeling": None,
        "model": "integer",
        "model_run": "integer",
        "model_version": None,
        "neighbors": None,
        "project": "integer",
        "result": (
            "list",
            {
                0: (
                    "dict",
                    {
                        0: (None, None),
                        1: (None, None),
                        2: (None, None),
                        3: (None, None),
                        4: (None, None),
                        5: (None, None),
                        6: (None, None),
                    },
                )
            },
        ),
        "score": None,
        "task": "integer",
        "updated_at": "datetime",
    }
    response = client.predictions.create(
        model_version="yolo-v8",
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        score=0.95,
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.create(
        model_version="yolo-v8",
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        score=0.95,
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "cluster": 1,
        "created_ago": "created_ago",
        "created_at": "2024-01-15T09:30:00Z",
        "id": 1,
        "mislabeling": 1.1,
        "model": 1,
        "model_run": 1,
        "model_version": "yolo-v8",
        "neighbors": {"key": "value"},
        "project": 1,
        "result": [
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        "score": 0.95,
        "task": 1,
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "cluster": "integer",
        "created_ago": None,
        "created_at": "datetime",
        "id": "integer",
        "mislabeling": None,
        "model": "integer",
        "model_run": "integer",
        "model_version": None,
        "neighbors": None,
        "project": "integer",
        "result": (
            "list",
            {
                0: (
                    "dict",
                    {
                        0: (None, None),
                        1: (None, None),
                        2: (None, None),
                        3: (None, None),
                        4: (None, None),
                        5: (None, None),
                        6: (None, None),
                    },
                )
            },
        ),
        "score": None,
        "task": "integer",
        "updated_at": "datetime",
    }
    response = client.predictions.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.predictions.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.predictions.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "cluster": 1,
        "created_ago": "created_ago",
        "created_at": "2024-01-15T09:30:00Z",
        "id": 1,
        "mislabeling": 1.1,
        "model": 1,
        "model_run": 1,
        "model_version": "yolo-v8",
        "neighbors": {"key": "value"},
        "project": 1,
        "result": [
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        "score": 0.95,
        "task": 1,
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "cluster": "integer",
        "created_ago": None,
        "created_at": "datetime",
        "id": "integer",
        "mislabeling": None,
        "model": "integer",
        "model_run": "integer",
        "model_version": None,
        "neighbors": None,
        "project": "integer",
        "result": (
            "list",
            {
                0: (
                    "dict",
                    {
                        0: (None, None),
                        1: (None, None),
                        2: (None, None),
                        3: (None, None),
                        4: (None, None),
                        5: (None, None),
                        6: (None, None),
                    },
                )
            },
        ),
        "score": None,
        "task": "integer",
        "updated_at": "datetime",
    }
    response = client.predictions.update(
        id=1,
        model_version="yolo-v8",
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        score=0.95,
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.update(
        id=1,
        model_version="yolo-v8",
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        score=0.95,
    )
    validate_response(async_response, expected_response, expected_types)
