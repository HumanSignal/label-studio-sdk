# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import Prediction
from label_studio_sdk.client import AsyncLabelStudio, LabelStudio

from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = [
        {
            "id": 1,
            "model_version": "model_version",
            "created_ago": "created_ago",
            "result": {"result": {"key": "value"}},
            "score": 1.1,
            "cluster": 1,
            "neighbors": {"neighbors": {"key": "value"}},
            "mislabeling": 1.1,
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
            "model": 1,
            "model_run": 1,
            "task": 1,
            "project": 1,
        }
    ]
    expected_types = (
        "list",
        {
            0: {
                "id": "integer",
                "model_version": None,
                "created_ago": None,
                "result": ("dict", {0: (None, None)}),
                "score": None,
                "cluster": "integer",
                "neighbors": ("dict", {0: (None, None)}),
                "mislabeling": None,
                "created_at": "datetime",
                "updated_at": "datetime",
                "model": "integer",
                "model_run": "integer",
                "task": "integer",
                "project": "integer",
            }
        },
    )
    response = client.predictions.list_()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.list_()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "model_version": "model_version",
        "created_ago": "created_ago",
        "result": {"result": {"key": "value"}},
        "score": 1.1,
        "cluster": 1,
        "neighbors": {"neighbors": {"key": "value"}},
        "mislabeling": 1.1,
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "model": 1,
        "model_run": 1,
        "task": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "model_version": None,
        "created_ago": None,
        "result": ("dict", {0: (None, None)}),
        "score": None,
        "cluster": "integer",
        "neighbors": ("dict", {0: (None, None)}),
        "mislabeling": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "model": "integer",
        "model_run": "integer",
        "task": "integer",
        "project": "integer",
    }
    response = client.predictions.create(request=Prediction(task=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.create(request=Prediction(task=1))
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "model_version": "model_version",
        "created_ago": "created_ago",
        "result": {"result": {"key": "value"}},
        "score": 1.1,
        "cluster": 1,
        "neighbors": {"neighbors": {"key": "value"}},
        "mislabeling": 1.1,
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "model": 1,
        "model_run": 1,
        "task": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "model_version": None,
        "created_ago": None,
        "result": ("dict", {0: (None, None)}),
        "score": None,
        "cluster": "integer",
        "neighbors": ("dict", {0: (None, None)}),
        "mislabeling": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "model": "integer",
        "model_run": "integer",
        "task": "integer",
        "project": "integer",
    }
    response = client.predictions.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_api_predictions_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "model_version": "model_version",
        "created_ago": "created_ago",
        "result": {"result": {"key": "value"}},
        "score": 1.1,
        "cluster": 1,
        "neighbors": {"neighbors": {"key": "value"}},
        "mislabeling": 1.1,
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "model": 1,
        "model_run": 1,
        "task": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "model_version": None,
        "created_ago": None,
        "result": ("dict", {0: (None, None)}),
        "score": None,
        "cluster": "integer",
        "neighbors": ("dict", {0: (None, None)}),
        "mislabeling": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "model": "integer",
        "model_run": "integer",
        "task": "integer",
        "project": "integer",
    }
    response = client.predictions.api_predictions_update(id=1, request=Prediction(task=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.api_predictions_update(id=1, request=Prediction(task=1))
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.predictions.delete(id=1) is None  # type: ignore[func-returns-value]

    assert await async_client.predictions.delete(id=1) is None  # type: ignore[func-returns-value]


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "model_version": "model_version",
        "created_ago": "created_ago",
        "result": {"result": {"key": "value"}},
        "score": 1.1,
        "cluster": 1,
        "neighbors": {"neighbors": {"key": "value"}},
        "mislabeling": 1.1,
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "model": 1,
        "model_run": 1,
        "task": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "model_version": None,
        "created_ago": None,
        "result": ("dict", {0: (None, None)}),
        "score": None,
        "cluster": "integer",
        "neighbors": ("dict", {0: (None, None)}),
        "mislabeling": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "model": "integer",
        "model_run": "integer",
        "task": "integer",
        "project": "integer",
    }
    response = client.predictions.update(id=1, request=Prediction(task=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.predictions.update(id=1, request=Prediction(task=1))
    validate_response(async_response, expected_response, expected_types)
