# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "assignment_settings": {"key": "value"},
            "created_at": "2024-01-15T09:30:00Z",
            "created_by": 1,
            "custom_script": "custom_script",
            "description": "description",
            "id": 1,
            "name": "name",
            "organization": 1,
            "project_settings": {"key": "value"},
            "require_comment_on_skip": True,
            "review_settings": {"key": "value"},
            "show_unused_data_columns_to_annotators": True,
            "tags": {"key": "value"},
            "updated_at": "2024-01-15T09:30:00Z",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "assignment_settings": None,
                "created_at": "datetime",
                "created_by": "integer",
                "custom_script": None,
                "description": None,
                "id": "integer",
                "name": None,
                "organization": "integer",
                "project_settings": None,
                "require_comment_on_skip": None,
                "review_settings": None,
                "show_unused_data_columns_to_annotators": None,
                "tags": None,
                "updated_at": "datetime",
            }
        },
    )
    response = client.project_templates.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.project_templates.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "assignment_settings": {"key": "value"},
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": 1,
        "custom_script": "custom_script",
        "description": "description",
        "id": 1,
        "name": "name",
        "organization": 1,
        "project_settings": {"key": "value"},
        "require_comment_on_skip": True,
        "review_settings": {"key": "value"},
        "show_unused_data_columns_to_annotators": True,
        "tags": {"key": "value"},
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "assignment_settings": None,
        "created_at": "datetime",
        "created_by": "integer",
        "custom_script": None,
        "description": None,
        "id": "integer",
        "name": None,
        "organization": "integer",
        "project_settings": None,
        "require_comment_on_skip": None,
        "review_settings": None,
        "show_unused_data_columns_to_annotators": None,
        "tags": None,
        "updated_at": "datetime",
    }
    response = client.project_templates.create(name="name")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.project_templates.create(name="name")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "assignment_settings": {"key": "value"},
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": 1,
        "custom_script": "custom_script",
        "description": "description",
        "id": 1,
        "name": "name",
        "organization": 1,
        "project_settings": {"key": "value"},
        "require_comment_on_skip": True,
        "review_settings": {"key": "value"},
        "show_unused_data_columns_to_annotators": True,
        "tags": {"key": "value"},
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "assignment_settings": None,
        "created_at": "datetime",
        "created_by": "integer",
        "custom_script": None,
        "description": None,
        "id": "integer",
        "name": None,
        "organization": "integer",
        "project_settings": None,
        "require_comment_on_skip": None,
        "review_settings": None,
        "show_unused_data_columns_to_annotators": None,
        "tags": None,
        "updated_at": "datetime",
    }
    response = client.project_templates.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.project_templates.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.project_templates.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.project_templates.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "assignment_settings": {"key": "value"},
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": 1,
        "custom_script": "custom_script",
        "description": "description",
        "id": 1,
        "name": "name",
        "organization": 1,
        "project_settings": {"key": "value"},
        "require_comment_on_skip": True,
        "review_settings": {"key": "value"},
        "show_unused_data_columns_to_annotators": True,
        "tags": {"key": "value"},
        "updated_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "assignment_settings": None,
        "created_at": "datetime",
        "created_by": "integer",
        "custom_script": None,
        "description": None,
        "id": "integer",
        "name": None,
        "organization": "integer",
        "project_settings": None,
        "require_comment_on_skip": None,
        "review_settings": None,
        "show_unused_data_columns_to_annotators": None,
        "tags": None,
        "updated_at": "datetime",
    }
    response = client.project_templates.update(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.project_templates.update(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_create_project_from_template(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "annotation_limit_count": 1,
        "annotation_limit_percent": "annotation_limit_percent",
        "annotator_evaluation_minimum_score": "annotator_evaluation_minimum_score",
        "annotator_evaluation_minimum_tasks": 1,
        "assignment_settings": {"id": 1, "label_stream_task_distribution": "auto_distribution", "project": 1},
        "color": "color",
        "comment_classification_config": "comment_classification_config",
        "config_has_control_tags": True,
        "config_suitable_for_bulk_annotation": True,
        "control_weights": {"key": "value"},
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": {
            "avatar": "avatar",
            "email": "email",
            "first_name": "first_name",
            "id": 1,
            "last_name": "last_name",
        },
        "custom_script": "custom_script",
        "custom_task_lock_ttl": 1,
        "data_types": {"key": "value"},
        "description": "description",
        "duplication_done": True,
        "duplication_status": "duplication_status",
        "enable_empty_annotation": True,
        "evaluate_predictions_automatically": True,
        "expert_instruction": "expert_instruction",
        "finished_task_number": 1,
        "ground_truth_number": 1,
        "id": 1,
        "is_draft": True,
        "is_published": True,
        "label_config": "label_config",
        "maximum_annotations": 1,
        "members": "members",
        "members_count": 1,
        "min_annotations_to_start_training": 1,
        "model_version": "model_version",
        "num_tasks_with_annotations": 1,
        "organization": 1,
        "overlap_cohort_percentage": 1,
        "parsed_label_config": {"key": "value"},
        "pause_on_failed_annotator_evaluation": True,
        "pinned_at": "2024-01-15T09:30:00Z",
        "prompts": "prompts",
        "queue_done": "queue_done",
        "queue_left": "queue_left",
        "queue_total": "queue_total",
        "require_comment_on_skip": True,
        "reveal_preannotations_interactively": True,
        "review_settings": {
            "anonymize_annotations": True,
            "id": 1,
            "instruction": "instruction",
            "only_finished_tasks": True,
            "project": 1,
            "requeue_rejected_tasks_mode": "requeue",
            "requeue_rejected_tasks_to_annotator": True,
            "require_comment_on_reject": True,
            "review_criteria": "all",
            "review_only_manual_assignments": True,
            "show_agreement_to_reviewers": True,
            "show_data_manager_to_reviewers": True,
            "show_instruction": True,
            "show_unused_data_columns_to_reviewers": True,
        },
        "reviewer_queue_total": "reviewer_queue_total",
        "sampling": "Sequential sampling",
        "show_annotation_history": True,
        "show_collab_predictions": True,
        "show_ground_truth_first": True,
        "show_instruction": True,
        "show_overlap_first": True,
        "show_skip_button": True,
        "show_unused_data_columns_to_annotators": True,
        "skip_queue": "REQUEUE_FOR_ME",
        "skipped_annotations_number": 1,
        "start_training_on_annotation_update": True,
        "task_data_login": "task_data_login",
        "task_data_password": "task_data_password",
        "task_number": 1,
        "title": "title",
        "total_annotations_number": 1,
        "total_predictions_number": 1,
        "useful_annotation_number": 1,
        "workspace": "workspace",
        "workspace_title": "workspace_title",
    }
    expected_types: typing.Any = {
        "annotation_limit_count": "integer",
        "annotation_limit_percent": None,
        "annotator_evaluation_minimum_score": None,
        "annotator_evaluation_minimum_tasks": "integer",
        "assignment_settings": {"id": "integer", "label_stream_task_distribution": None, "project": "integer"},
        "color": None,
        "comment_classification_config": None,
        "config_has_control_tags": None,
        "config_suitable_for_bulk_annotation": None,
        "control_weights": None,
        "created_at": "datetime",
        "created_by": {"avatar": None, "email": None, "first_name": None, "id": "integer", "last_name": None},
        "custom_script": None,
        "custom_task_lock_ttl": "integer",
        "data_types": None,
        "description": None,
        "duplication_done": None,
        "duplication_status": None,
        "enable_empty_annotation": None,
        "evaluate_predictions_automatically": None,
        "expert_instruction": None,
        "finished_task_number": "integer",
        "ground_truth_number": "integer",
        "id": "integer",
        "is_draft": None,
        "is_published": None,
        "label_config": None,
        "maximum_annotations": "integer",
        "members": None,
        "members_count": "integer",
        "min_annotations_to_start_training": "integer",
        "model_version": None,
        "num_tasks_with_annotations": "integer",
        "organization": "integer",
        "overlap_cohort_percentage": "integer",
        "parsed_label_config": None,
        "pause_on_failed_annotator_evaluation": None,
        "pinned_at": "datetime",
        "prompts": None,
        "queue_done": None,
        "queue_left": None,
        "queue_total": None,
        "require_comment_on_skip": None,
        "reveal_preannotations_interactively": None,
        "review_settings": {
            "anonymize_annotations": None,
            "id": "integer",
            "instruction": None,
            "only_finished_tasks": None,
            "project": "integer",
            "requeue_rejected_tasks_mode": None,
            "requeue_rejected_tasks_to_annotator": None,
            "require_comment_on_reject": None,
            "review_criteria": None,
            "review_only_manual_assignments": None,
            "show_agreement_to_reviewers": None,
            "show_data_manager_to_reviewers": None,
            "show_instruction": None,
            "show_unused_data_columns_to_reviewers": None,
        },
        "reviewer_queue_total": None,
        "sampling": None,
        "show_annotation_history": None,
        "show_collab_predictions": None,
        "show_ground_truth_first": None,
        "show_instruction": None,
        "show_overlap_first": None,
        "show_skip_button": None,
        "show_unused_data_columns_to_annotators": None,
        "skip_queue": None,
        "skipped_annotations_number": "integer",
        "start_training_on_annotation_update": None,
        "task_data_login": None,
        "task_data_password": None,
        "task_number": "integer",
        "title": None,
        "total_annotations_number": "integer",
        "total_predictions_number": "integer",
        "useful_annotation_number": "integer",
        "workspace": None,
        "workspace_title": None,
    }
    response = client.project_templates.create_project_from_template(id=1, title="title", workspace_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.project_templates.create_project_from_template(
        id=1, title="title", workspace_id=1
    )
    validate_response(async_response, expected_response, expected_types)
