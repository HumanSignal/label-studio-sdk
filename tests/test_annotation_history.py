# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "action": "prediction",
            "annotation_id": 1,
            "comment": "comment",
            "comment_id": 1,
            "created_at": "2024-01-15T09:30:00Z",
            "created_by": 1,
            "draft_id": 1,
            "id": 1,
            "lead_time": 1.1,
            "organization_id": 1,
            "project_id": 1,
            "result": {"key": "value"},
            "review_id": 1,
            "started_at": "2024-01-15T09:30:00Z",
            "task_id": 1,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "action": None,
                "annotation_id": "integer",
                "comment": None,
                "comment_id": "integer",
                "created_at": "datetime",
                "created_by": "integer",
                "draft_id": "integer",
                "id": "integer",
                "lead_time": None,
                "organization_id": "integer",
                "project_id": "integer",
                "result": None,
                "review_id": "integer",
                "started_at": "datetime",
                "task_id": "integer",
            }
        },
    )
    response = client.annotation_history.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_history.list()
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"removed": 1}
    expected_types: typing.Any = {"removed": "integer"}
    response = client.annotation_history.delete()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_history.delete()
    validate_response(async_response, expected_response, expected_types)


async def test_list_for_project(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?page=4",
        "previous": "http://api.example.org/accounts/?page=2",
        "results": [
            {
                "action": "prediction",
                "annotation_id": 1,
                "comment": "comment",
                "comment_id": 1,
                "created_at": "2024-01-15T09:30:00Z",
                "created_by": 1,
                "draft_id": 1,
                "id": 1,
                "lead_time": 1.1,
                "organization_id": 1,
                "project_id": 1,
                "result": {"key": "value"},
                "review_id": 1,
                "started_at": "2024-01-15T09:30:00Z",
                "task_id": 1,
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "action": None,
                    "annotation_id": "integer",
                    "comment": None,
                    "comment_id": "integer",
                    "created_at": "datetime",
                    "created_by": "integer",
                    "draft_id": "integer",
                    "id": "integer",
                    "lead_time": None,
                    "organization_id": "integer",
                    "project_id": "integer",
                    "result": None,
                    "review_id": "integer",
                    "started_at": "datetime",
                    "task_id": "integer",
                }
            },
        ),
    }
    response = client.annotation_history.list_for_project(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_history.list_for_project(id=1)
    validate_response(async_response, expected_response, expected_types)
