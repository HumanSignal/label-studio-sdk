# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "color": "color",
            "config_has_control_tags": True,
            "config_suitable_for_bulk_annotation": True,
            "control_weights": {"key": "value"},
            "created_at": "2024-01-15T09:30:00Z",
            "created_by": {
                "avatar": "avatar",
                "email": "email",
                "first_name": "first_name",
                "id": 1,
                "last_name": "last_name",
            },
            "description": "description",
            "enable_empty_annotation": True,
            "evaluate_predictions_automatically": True,
            "expert_instruction": "expert_instruction",
            "finished_task_number": 1,
            "ground_truth_number": 1,
            "id": 1,
            "is_draft": True,
            "is_published": True,
            "label_config": "label_config",
            "maximum_annotations": 1,
            "min_annotations_to_start_training": 1,
            "model_version": "model_version",
            "num_tasks_with_annotations": 1,
            "organization": 1,
            "overlap_cohort_percentage": 1,
            "parsed_label_config": {"key": "value"},
            "pinned_at": "2024-01-15T09:30:00Z",
            "queue_done": 1,
            "queue_total": 1,
            "reveal_preannotations_interactively": True,
            "sampling": "Sequential sampling",
            "show_annotation_history": True,
            "show_collab_predictions": True,
            "show_ground_truth_first": True,
            "show_instruction": True,
            "show_overlap_first": True,
            "show_skip_button": True,
            "skip_queue": "REQUEUE_FOR_ME",
            "skipped_annotations_number": 1,
            "start_training_on_annotation_update": True,
            "task_data_login": "task_data_login",
            "task_data_password": "task_data_password",
            "task_number": 1,
            "title": "title",
            "total_annotations_number": 1,
            "total_predictions_number": 1,
            "useful_annotation_number": 1,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "color": None,
                "config_has_control_tags": None,
                "config_suitable_for_bulk_annotation": None,
                "control_weights": None,
                "created_at": "datetime",
                "created_by": {"avatar": None, "email": None, "first_name": None, "id": "integer", "last_name": None},
                "description": None,
                "enable_empty_annotation": None,
                "evaluate_predictions_automatically": None,
                "expert_instruction": None,
                "finished_task_number": "integer",
                "ground_truth_number": "integer",
                "id": "integer",
                "is_draft": None,
                "is_published": None,
                "label_config": None,
                "maximum_annotations": "integer",
                "min_annotations_to_start_training": "integer",
                "model_version": None,
                "num_tasks_with_annotations": "integer",
                "organization": "integer",
                "overlap_cohort_percentage": "integer",
                "parsed_label_config": None,
                "pinned_at": "datetime",
                "queue_done": "integer",
                "queue_total": "integer",
                "reveal_preannotations_interactively": None,
                "sampling": None,
                "show_annotation_history": None,
                "show_collab_predictions": None,
                "show_ground_truth_first": None,
                "show_instruction": None,
                "show_overlap_first": None,
                "show_skip_button": None,
                "skip_queue": None,
                "skipped_annotations_number": "integer",
                "start_training_on_annotation_update": None,
                "task_data_login": None,
                "task_data_password": None,
                "task_number": "integer",
                "title": None,
                "total_annotations_number": "integer",
                "total_predictions_number": "integer",
                "useful_annotation_number": "integer",
            }
        },
    )
    response = client.workspaces.projects.list(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.workspaces.projects.list(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_add(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"project": 1}
    expected_types: typing.Any = {"project": "integer"}
    response = client.workspaces.projects.add(id=1, project=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.workspaces.projects.add(id=1, project=1)
    validate_response(async_response, expected_response, expected_types)


async def test_remove(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.workspaces.projects.remove(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.workspaces.projects.remove(id=1)  # type: ignore[func-returns-value]
        is None
    )
