# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "auth_method": "NONE",
            "auto_update": True,
            "basic_auth_pass_is_set": "basic_auth_pass_is_set",
            "basic_auth_user": "basic_auth_user",
            "created_at": "2024-01-15T09:30:00Z",
            "description": "description",
            "error_message": "error_message",
            "extra_params": {"key": "value"},
            "id": 1,
            "is_interactive": True,
            "model_version": "model_version",
            "project": 1,
            "readable_state": "readable_state",
            "state": "CO",
            "timeout": 1.1,
            "title": "title",
            "updated_at": "2024-01-15T09:30:00Z",
            "url": "url",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "auth_method": None,
                "auto_update": None,
                "basic_auth_pass_is_set": None,
                "basic_auth_user": None,
                "created_at": "datetime",
                "description": None,
                "error_message": None,
                "extra_params": None,
                "id": "integer",
                "is_interactive": None,
                "model_version": None,
                "project": "integer",
                "readable_state": None,
                "state": None,
                "timeout": None,
                "title": None,
                "updated_at": "datetime",
                "url": None,
            }
        },
    )
    response = client.ml.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.ml.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "auth_method": "NONE",
        "auto_update": True,
        "basic_auth_pass_is_set": "basic_auth_pass_is_set",
        "basic_auth_user": "basic_auth_user",
        "created_at": "2024-01-15T09:30:00Z",
        "description": "description",
        "error_message": "error_message",
        "extra_params": {"key": "value"},
        "id": 1,
        "is_interactive": True,
        "model_version": "model_version",
        "project": 1,
        "readable_state": "readable_state",
        "state": "CO",
        "timeout": 1.1,
        "title": "title",
        "updated_at": "2024-01-15T09:30:00Z",
        "url": "url",
    }
    expected_types: typing.Any = {
        "auth_method": None,
        "auto_update": None,
        "basic_auth_pass_is_set": None,
        "basic_auth_user": None,
        "created_at": "datetime",
        "description": None,
        "error_message": None,
        "extra_params": None,
        "id": "integer",
        "is_interactive": None,
        "model_version": None,
        "project": "integer",
        "readable_state": None,
        "state": None,
        "timeout": None,
        "title": None,
        "updated_at": "datetime",
        "url": None,
    }
    response = client.ml.create()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.ml.create()
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "auth_method": "NONE",
        "auto_update": True,
        "basic_auth_pass_is_set": "basic_auth_pass_is_set",
        "basic_auth_user": "basic_auth_user",
        "created_at": "2024-01-15T09:30:00Z",
        "description": "description",
        "error_message": "error_message",
        "extra_params": {"key": "value"},
        "id": 1,
        "is_interactive": True,
        "model_version": "model_version",
        "project": 1,
        "readable_state": "readable_state",
        "state": "CO",
        "timeout": 1.1,
        "title": "title",
        "updated_at": "2024-01-15T09:30:00Z",
        "url": "url",
    }
    expected_types: typing.Any = {
        "auth_method": None,
        "auto_update": None,
        "basic_auth_pass_is_set": None,
        "basic_auth_user": None,
        "created_at": "datetime",
        "description": None,
        "error_message": None,
        "extra_params": None,
        "id": "integer",
        "is_interactive": None,
        "model_version": None,
        "project": "integer",
        "readable_state": None,
        "state": None,
        "timeout": None,
        "title": None,
        "updated_at": "datetime",
        "url": None,
    }
    response = client.ml.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.ml.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.ml.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.ml.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "auth_method": "NONE",
        "auto_update": True,
        "basic_auth_pass_is_set": "basic_auth_pass_is_set",
        "basic_auth_user": "basic_auth_user",
        "created_at": "2024-01-15T09:30:00Z",
        "description": "description",
        "error_message": "error_message",
        "extra_params": {"key": "value"},
        "id": 1,
        "is_interactive": True,
        "model_version": "model_version",
        "project": 1,
        "readable_state": "readable_state",
        "state": "CO",
        "timeout": 1.1,
        "title": "title",
        "updated_at": "2024-01-15T09:30:00Z",
        "url": "url",
    }
    expected_types: typing.Any = {
        "auth_method": None,
        "auto_update": None,
        "basic_auth_pass_is_set": None,
        "basic_auth_user": None,
        "created_at": "datetime",
        "description": None,
        "error_message": None,
        "extra_params": None,
        "id": "integer",
        "is_interactive": None,
        "model_version": None,
        "project": "integer",
        "readable_state": None,
        "state": None,
        "timeout": None,
        "title": None,
        "updated_at": "datetime",
        "url": None,
    }
    response = client.ml.update(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.ml.update(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_predict_interactive(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.ml.predict_interactive(id=1, task=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.ml.predict_interactive(id=1, task=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_train(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.ml.train(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.ml.train(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_list_model_versions(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"message": "message", "versions": ["versions"]}
    expected_types: typing.Any = {"message": None, "versions": ("list", {0: None})}
    response = client.ml.list_model_versions(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.ml.list_model_versions(id=1)
    validate_response(async_response, expected_response, expected_types)
