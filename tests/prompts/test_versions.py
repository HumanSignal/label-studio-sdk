# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_get_default_version_name(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.prompts.versions.get_default_version_name(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.prompts.versions.get_default_version_name(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "id": 1,
            "created_by": {
                "id": 1,
                "first_name": "first_name",
                "last_name": "last_name",
                "email": "email",
                "avatar": "avatar",
            },
            "score": "score",
            "title": "title",
            "prompt": "prompt",
            "provider": "OpenAI",
            "provider_model_id": "provider_model_id",
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
            "parent_model": 1,
            "model_provider_connection": 1,
            "organization": 1,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "id": "integer",
                "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
                "score": None,
                "title": None,
                "prompt": None,
                "provider": None,
                "provider_model_id": None,
                "created_at": "datetime",
                "updated_at": "datetime",
                "parent_model": "integer",
                "model_provider_connection": "integer",
                "organization": "integer",
            }
        },
    )
    response = client.prompts.versions.list(prompt_id_=1, prompt_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.list(prompt_id_=1, prompt_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "created_by": {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "email": "email",
            "avatar": "avatar",
        },
        "score": "score",
        "title": "title",
        "prompt": "prompt",
        "provider": "OpenAI",
        "provider_model_id": "provider_model_id",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "parent_model": 1,
        "model_provider_connection": 1,
        "organization": 1,
    }
    expected_types: typing.Any = {
        "id": "integer",
        "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
        "score": None,
        "title": None,
        "prompt": None,
        "provider": None,
        "provider_model_id": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "parent_model": "integer",
        "model_provider_connection": "integer",
        "organization": "integer",
    }
    response = client.prompts.versions.create(
        prompt_id=1, title="title", prompt="prompt", provider_model_id="provider_model_id", parent_model=1
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.create(
        prompt_id=1, title="title", prompt="prompt", provider_model_id="provider_model_id", parent_model=1
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "created_by": {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "email": "email",
            "avatar": "avatar",
        },
        "score": "score",
        "title": "title",
        "prompt": "prompt",
        "provider": "OpenAI",
        "provider_model_id": "provider_model_id",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "parent_model": 1,
        "model_provider_connection": 1,
        "organization": 1,
    }
    expected_types: typing.Any = {
        "id": "integer",
        "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
        "score": None,
        "title": None,
        "prompt": None,
        "provider": None,
        "provider_model_id": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "parent_model": "integer",
        "model_provider_connection": "integer",
        "organization": "integer",
    }
    response = client.prompts.versions.get(id=1, prompt_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.get(id=1, prompt_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.prompts.versions.delete(id=1, prompt_id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.prompts.versions.delete(id=1, prompt_id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "created_by": {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "email": "email",
            "avatar": "avatar",
        },
        "score": "score",
        "title": "title",
        "prompt": "prompt",
        "provider": "OpenAI",
        "provider_model_id": "provider_model_id",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "parent_model": 1,
        "model_provider_connection": 1,
        "organization": 1,
    }
    expected_types: typing.Any = {
        "id": "integer",
        "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
        "score": None,
        "title": None,
        "prompt": None,
        "provider": None,
        "provider_model_id": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "parent_model": "integer",
        "model_provider_connection": "integer",
        "organization": "integer",
    }
    response = client.prompts.versions.update(id=1, prompt_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.update(id=1, prompt_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_get_cost_estimate(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "prompt_cost_usd": "prompt_cost_usd",
        "completion_cost_usd": "completion_cost_usd",
        "total_cost_usd": "total_cost_usd",
        "is_error": True,
        "error_type": "error_type",
        "error_message": "error_message",
    }
    expected_types: typing.Any = {
        "prompt_cost_usd": None,
        "completion_cost_usd": None,
        "total_cost_usd": None,
        "is_error": None,
        "error_type": None,
        "error_message": None,
    }
    response = client.prompts.versions.get_cost_estimate(prompt_id=1, version_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.get_cost_estimate(prompt_id=1, version_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_get_refinement_status(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "title": "title",
        "reasoning": "reasoning",
        "prompt": "prompt",
        "refinement_job_id": "refinement_job_id",
        "refinement_status": "refinement_status",
        "total_cost": "total_cost",
        "previous_version": {
            "id": 1,
            "created_by": {
                "id": 1,
                "first_name": "first_name",
                "last_name": "last_name",
                "email": "email",
                "avatar": "avatar",
            },
            "score": "score",
            "title": "title",
            "prompt": "prompt",
            "provider": "OpenAI",
            "provider_model_id": "provider_model_id",
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
            "parent_model": 1,
            "model_provider_connection": 1,
            "organization": 1,
        },
    }
    expected_types: typing.Any = {
        "title": None,
        "reasoning": None,
        "prompt": None,
        "refinement_job_id": None,
        "refinement_status": None,
        "total_cost": None,
        "previous_version": {
            "id": "integer",
            "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
            "score": None,
            "title": None,
            "prompt": None,
            "provider": None,
            "provider_model_id": None,
            "created_at": "datetime",
            "updated_at": "datetime",
            "parent_model": "integer",
            "model_provider_connection": "integer",
            "organization": "integer",
        },
    }
    response = client.prompts.versions.get_refinement_status(prompt_id=1, version_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.get_refinement_status(prompt_id=1, version_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_refine(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "title": "title",
        "reasoning": "reasoning",
        "prompt": "prompt",
        "refinement_job_id": "refinement_job_id",
        "refinement_status": "refinement_status",
        "total_cost": "total_cost",
        "previous_version": {
            "id": 1,
            "created_by": {
                "id": 1,
                "first_name": "first_name",
                "last_name": "last_name",
                "email": "email",
                "avatar": "avatar",
            },
            "score": "score",
            "title": "title",
            "prompt": "prompt",
            "provider": "OpenAI",
            "provider_model_id": "provider_model_id",
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
            "parent_model": 1,
            "model_provider_connection": 1,
            "organization": 1,
        },
    }
    expected_types: typing.Any = {
        "title": None,
        "reasoning": None,
        "prompt": None,
        "refinement_job_id": None,
        "refinement_status": None,
        "total_cost": None,
        "previous_version": {
            "id": "integer",
            "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
            "score": None,
            "title": None,
            "prompt": None,
            "provider": None,
            "provider_model_id": None,
            "created_at": "datetime",
            "updated_at": "datetime",
            "parent_model": "integer",
            "model_provider_connection": "integer",
            "organization": "integer",
        },
    }
    response = client.prompts.versions.refine(
        prompt_id=1,
        version_id=1,
        teacher_model_provider_connection_id=1,
        teacher_model_name="teacher_model_name",
        project_id=1,
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.versions.refine(
        prompt_id=1,
        version_id=1,
        teacher_model_provider_connection_id=1,
        teacher_model_name="teacher_model_name",
        project_id=1,
    )
    validate_response(async_response, expected_response, expected_types)
