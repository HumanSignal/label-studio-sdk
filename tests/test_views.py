# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "data": {"key": "value"},
            "filter_group": {
                "conjunction": "conjunction",
                "filters": [{"column": "column", "id": 1, "operator": "operator", "type": "type"}],
                "id": 1,
            },
            "id": 1,
            "order": 1,
            "ordering": {"key": "value"},
            "project": 1,
            "selected_items": {"key": "value"},
            "user": 1,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "data": None,
                "filter_group": {
                    "conjunction": None,
                    "filters": ("list", {0: {"column": None, "id": "integer", "operator": None, "type": None}}),
                    "id": "integer",
                },
                "id": "integer",
                "order": "integer",
                "ordering": None,
                "project": "integer",
                "selected_items": None,
                "user": "integer",
            }
        },
    )
    response = client.views.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.views.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "data": {"key": "value"},
        "filter_group": {
            "conjunction": "conjunction",
            "filters": [{"column": "column", "id": 1, "operator": "operator", "type": "type"}],
            "id": 1,
        },
        "id": 1,
        "order": 1,
        "ordering": {"key": "value"},
        "project": 1,
        "selected_items": {"key": "value"},
        "user": 1,
    }
    expected_types: typing.Any = {
        "data": None,
        "filter_group": {
            "conjunction": None,
            "filters": ("list", {0: {"column": None, "id": "integer", "operator": None, "type": None}}),
            "id": "integer",
        },
        "id": "integer",
        "order": "integer",
        "ordering": None,
        "project": "integer",
        "selected_items": None,
        "user": "integer",
    }
    response = client.views.create()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.views.create()
    validate_response(async_response, expected_response, expected_types)


async def test_update_order(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.views.update_order(ids=[1], project=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.views.update_order(ids=[1], project=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_delete_all(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.views.delete_all(project=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.views.delete_all(project=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "data": {"key": "value"},
        "filter_group": {
            "conjunction": "conjunction",
            "filters": [{"column": "column", "id": 1, "operator": "operator", "type": "type"}],
            "id": 1,
        },
        "id": 1,
        "order": 1,
        "ordering": {"key": "value"},
        "project": 1,
        "selected_items": {"key": "value"},
        "user": 1,
    }
    expected_types: typing.Any = {
        "data": None,
        "filter_group": {
            "conjunction": None,
            "filters": ("list", {0: {"column": None, "id": "integer", "operator": None, "type": None}}),
            "id": "integer",
        },
        "id": "integer",
        "order": "integer",
        "ordering": None,
        "project": "integer",
        "selected_items": None,
        "user": "integer",
    }
    response = client.views.get(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.views.get(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.views.delete(id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.views.delete(id="id")  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "data": {"key": "value"},
        "filter_group": {
            "conjunction": "conjunction",
            "filters": [{"column": "column", "id": 1, "operator": "operator", "type": "type"}],
            "id": 1,
        },
        "id": 1,
        "order": 1,
        "ordering": {"key": "value"},
        "project": 1,
        "selected_items": {"key": "value"},
        "user": 1,
    }
    expected_types: typing.Any = {
        "data": None,
        "filter_group": {
            "conjunction": None,
            "filters": ("list", {0: {"column": None, "id": "integer", "operator": None, "type": None}}),
            "id": "integer",
        },
        "id": "integer",
        "order": "integer",
        "ordering": None,
        "project": "integer",
        "selected_items": None,
        "user": "integer",
    }
    response = client.views.update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.views.update(id="id")
    validate_response(async_response, expected_response, expected_types)
