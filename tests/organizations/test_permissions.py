# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "default_role": "default_role",
            "id": 1,
            "label": "label",
            "options": "options",
            "organization": 1,
            "permission": "permission",
            "roles": ["OW"],
            "tooltip": "tooltip",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "default_role": None,
                "id": "integer",
                "label": None,
                "options": None,
                "organization": "integer",
                "permission": None,
                "roles": ("list", {0: None}),
                "tooltip": None,
            }
        },
    )
    response = client.organizations.permissions.list(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.permissions.list(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "default_role": "default_role",
        "id": 1,
        "label": "label",
        "options": "options",
        "organization": 1,
        "permission": "permission",
        "roles": ["OW"],
        "tooltip": "tooltip",
    }
    expected_types: typing.Any = {
        "default_role": None,
        "id": "integer",
        "label": None,
        "options": None,
        "organization": "integer",
        "permission": None,
        "roles": ("list", {0: None}),
        "tooltip": None,
    }
    response = client.organizations.permissions.create(id=1, permission="permission")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.permissions.create(id=1, permission="permission")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "default_role": "default_role",
        "id": 1,
        "label": "label",
        "options": "options",
        "organization": 1,
        "permission": "permission",
        "roles": ["OW"],
        "tooltip": "tooltip",
    }
    expected_types: typing.Any = {
        "default_role": None,
        "id": "integer",
        "label": None,
        "options": None,
        "organization": "integer",
        "permission": None,
        "roles": ("list", {0: None}),
        "tooltip": None,
    }
    response = client.organizations.permissions.get(id=1, permission="permission")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.permissions.get(id=1, permission="permission")
    validate_response(async_response, expected_response, expected_types)


async def test_replace(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "default_role": "default_role",
        "id": 1,
        "label": "label",
        "options": "options",
        "organization": 1,
        "permission": "permission",
        "roles": ["OW"],
        "tooltip": "tooltip",
    }
    expected_types: typing.Any = {
        "default_role": None,
        "id": "integer",
        "label": None,
        "options": None,
        "organization": "integer",
        "permission": None,
        "roles": ("list", {0: None}),
        "tooltip": None,
    }
    response = client.organizations.permissions.replace(id=1, permission_="permission", permission="permission")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.permissions.replace(
        id=1, permission_="permission", permission="permission"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.organizations.permissions.delete(id=1, permission="permission")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.organizations.permissions.delete(id=1, permission="permission")  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "default_role": "default_role",
        "id": 1,
        "label": "label",
        "options": "options",
        "organization": 1,
        "permission": "permission",
        "roles": ["OW"],
        "tooltip": "tooltip",
    }
    expected_types: typing.Any = {
        "default_role": None,
        "id": "integer",
        "label": None,
        "options": None,
        "organization": "integer",
        "permission": None,
        "roles": ("list", {0: None}),
        "tooltip": None,
    }
    response = client.organizations.permissions.update(id=1, permission="permission")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.permissions.update(id=1, permission="permission")
    validate_response(async_response, expected_response, expected_types)
