# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?page=4",
        "previous": "http://api.example.org/accounts/?page=2",
        "results": [
            {
                "id": 1,
                "organization": 1,
                "role": "role",
                "user": {
                    "avatar": "avatar",
                    "contributed_to_projects": "contributed_to_projects",
                    "created_projects": "created_projects",
                    "id": 1,
                    "initials": "initials",
                    "last_activity": "2024-01-15T09:30:00Z",
                    "lse_fields": {
                        "email_notification_settings": "email_notification_settings",
                        "invite_expired": "invite_expired",
                        "invite_expired_at": "invite_expired_at",
                    },
                    "pause": "pause",
                    "username": "username",
                },
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "id": "integer",
                    "organization": "integer",
                    "role": None,
                    "user": {
                        "avatar": None,
                        "contributed_to_projects": None,
                        "created_projects": None,
                        "id": "integer",
                        "initials": None,
                        "last_activity": "datetime",
                        "lse_fields": {
                            "email_notification_settings": None,
                            "invite_expired": None,
                            "invite_expired_at": None,
                        },
                        "pause": None,
                        "username": None,
                    },
                }
            },
        ),
    }
    response = client.organizations.members.list(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.members.list(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "organization": 1,
        "role": "role",
        "user": {
            "active_organization": 1,
            "allow_newsletters": True,
            "avatar": "avatar",
            "contributed_to_projects": "contributed_to_projects",
            "created_projects": "created_projects",
            "custom_hotkeys": {"key": "value"},
            "date_joined": "2024-01-15T09:30:00Z",
            "email": "email",
            "first_name": "first_name",
            "id": 1,
            "initials": "initials",
            "last_activity": "2024-01-15T09:30:00Z",
            "last_name": "last_name",
            "lse_fields": {
                "email_notification_settings": "email_notification_settings",
                "invite_activated": True,
                "invite_expired": "invite_expired",
                "invite_expired_at": "invite_expired_at",
                "invited_at": "2024-01-15T09:30:00Z",
                "invited_by": 1,
                "onboarding_state": "not_started",
                "social_auth_finished": True,
                "trial_company": "trial_company",
                "trial_experience_labeling": "trial_experience_labeling",
                "trial_license_enterprise": True,
                "trial_models_in_production": "trial_models_in_production",
                "trial_role": "annotator",
            },
            "pause": "pause",
            "phone": "phone",
            "username": "username",
        },
    }
    expected_types: typing.Any = {
        "id": "integer",
        "organization": "integer",
        "role": None,
        "user": {
            "active_organization": "integer",
            "allow_newsletters": None,
            "avatar": None,
            "contributed_to_projects": None,
            "created_projects": None,
            "custom_hotkeys": None,
            "date_joined": "datetime",
            "email": None,
            "first_name": None,
            "id": "integer",
            "initials": None,
            "last_activity": "datetime",
            "last_name": None,
            "lse_fields": {
                "email_notification_settings": None,
                "invite_activated": None,
                "invite_expired": None,
                "invite_expired_at": None,
                "invited_at": "datetime",
                "invited_by": "integer",
                "onboarding_state": None,
                "social_auth_finished": None,
                "trial_company": None,
                "trial_experience_labeling": None,
                "trial_license_enterprise": None,
                "trial_models_in_production": None,
                "trial_role": None,
            },
            "pause": None,
            "phone": None,
            "username": None,
        },
    }
    response = client.organizations.members.update(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.members.update(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "annotations_count": "annotations_count",
        "contributed_projects_count": "contributed_projects_count",
        "created_at": "2024-01-15T09:30:00Z",
        "organization": 1,
        "user": 1,
    }
    expected_types: typing.Any = {
        "annotations_count": None,
        "contributed_projects_count": None,
        "created_at": "datetime",
        "organization": "integer",
        "user": "integer",
    }
    response = client.organizations.members.get(id=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.organizations.members.get(id=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.organizations.members.delete(id=1, user_pk=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.organizations.members.delete(id=1, user_pk=1)  # type: ignore[func-returns-value]
        is None
    )
