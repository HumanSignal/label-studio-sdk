# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_reset_token(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"token": "token"}
    expected_types: typing.Any = {"token": None}
    response = client.users.reset_token()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.reset_token()
    validate_response(async_response, expected_response, expected_types)


async def test_get_token(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"detail": "detail"}
    expected_types: typing.Any = {"detail": None}
    response = client.users.get_token()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.get_token()
    validate_response(async_response, expected_response, expected_types)


async def test_whoami(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "first_name": "first_name",
        "last_name": "last_name",
        "username": "username",
        "email": "email",
        "last_activity": "2024-01-15T09:30:00Z",
        "avatar": "avatar",
        "initials": "initials",
        "phone": "phone",
        "active_organization": 1,
        "allow_newsletters": True,
        "date_joined": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": "integer",
        "first_name": None,
        "last_name": None,
        "username": None,
        "email": None,
        "last_activity": "datetime",
        "avatar": None,
        "initials": None,
        "phone": None,
        "active_organization": "integer",
        "allow_newsletters": None,
        "date_joined": "datetime",
    }
    response = client.users.whoami()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.whoami()
    validate_response(async_response, expected_response, expected_types)


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "username": "username",
            "email": "email",
            "last_activity": "2024-01-15T09:30:00Z",
            "avatar": "avatar",
            "initials": "initials",
            "phone": "phone",
            "active_organization": 1,
            "allow_newsletters": True,
            "date_joined": "2024-01-15T09:30:00Z",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "id": "integer",
                "first_name": None,
                "last_name": None,
                "username": None,
                "email": None,
                "last_activity": "datetime",
                "avatar": None,
                "initials": None,
                "phone": None,
                "active_organization": "integer",
                "allow_newsletters": None,
                "date_joined": "datetime",
            }
        },
    )
    response = client.users.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "first_name": "first_name",
        "last_name": "last_name",
        "username": "username",
        "email": "email",
        "last_activity": "2024-01-15T09:30:00Z",
        "avatar": "avatar",
        "initials": "initials",
        "phone": "phone",
        "active_organization": 1,
        "allow_newsletters": True,
        "date_joined": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": "integer",
        "first_name": None,
        "last_name": None,
        "username": None,
        "email": None,
        "last_activity": "datetime",
        "avatar": None,
        "initials": None,
        "phone": None,
        "active_organization": "integer",
        "allow_newsletters": None,
        "date_joined": "datetime",
    }
    response = client.users.create()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.create()
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "first_name": "first_name",
        "last_name": "last_name",
        "username": "username",
        "email": "email",
        "last_activity": "2024-01-15T09:30:00Z",
        "avatar": "avatar",
        "initials": "initials",
        "phone": "phone",
        "active_organization": 1,
        "allow_newsletters": True,
        "date_joined": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": "integer",
        "first_name": None,
        "last_name": None,
        "username": None,
        "email": None,
        "last_activity": "datetime",
        "avatar": None,
        "initials": None,
        "phone": None,
        "active_organization": "integer",
        "allow_newsletters": None,
        "date_joined": "datetime",
    }
    response = client.users.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.users.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.users.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "first_name": "first_name",
        "last_name": "last_name",
        "username": "username",
        "email": "email",
        "last_activity": "2024-01-15T09:30:00Z",
        "avatar": "avatar",
        "initials": "initials",
        "phone": "phone",
        "active_organization": 1,
        "allow_newsletters": True,
        "date_joined": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "id": "integer",
        "first_name": None,
        "last_name": None,
        "username": None,
        "email": None,
        "last_activity": "datetime",
        "avatar": None,
        "initials": None,
        "phone": None,
        "active_organization": "integer",
        "allow_newsletters": None,
        "date_joined": "datetime",
    }
    response = client.users.update(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.users.update(id=1)
    validate_response(async_response, expected_response, expected_types)
