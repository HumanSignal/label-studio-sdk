# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_batch_failed_predictions(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"job_id": "job_id", "failed_predictions": [{"key": "value"}]}
    expected_types: typing.Any = {"job_id": None, "failed_predictions": ("list", {0: None})}
    response = client.prompts.batch_failed_predictions(failed_predictions=[], modelrun_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.batch_failed_predictions(failed_predictions=[], modelrun_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_batch_predictions(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"job_id": "job_id", "results": [{"key": "value"}]}
    expected_types: typing.Any = {"job_id": None, "results": ("list", {0: None})}
    response = client.prompts.batch_predictions(results=[], modelrun_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.batch_predictions(results=[], modelrun_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "id": 1,
            "created_by": {
                "id": 1,
                "first_name": "first_name",
                "last_name": "last_name",
                "email": "email",
                "avatar": "avatar",
            },
            "skill_name": "TextClassification",
            "associated_projects": [{"id": 1}],
            "title": "title",
            "description": "description",
            "created_at": "2024-01-15T09:30:00Z",
            "updated_at": "2024-01-15T09:30:00Z",
            "input_fields": {"key": "value"},
            "output_classes": {"key": "value"},
            "organization": 1,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "id": "integer",
                "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
                "skill_name": None,
                "associated_projects": ("list", {0: {"id": "integer"}}),
                "title": None,
                "description": None,
                "created_at": "datetime",
                "updated_at": "datetime",
                "input_fields": None,
                "output_classes": None,
                "organization": "integer",
            }
        },
    )
    response = client.prompts.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "created_by": {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "email": "email",
            "avatar": "avatar",
        },
        "skill_name": "TextClassification",
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "input_fields": {"key": "value"},
        "output_classes": {"key": "value"},
        "organization": 1,
        "associated_projects": [1],
    }
    expected_types: typing.Any = {
        "id": "integer",
        "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
        "skill_name": None,
        "title": None,
        "description": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "input_fields": None,
        "output_classes": None,
        "organization": "integer",
        "associated_projects": ("list", {0: "integer"}),
    }
    response = client.prompts.create(title="title")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.create(title="title")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "created_by": {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "email": "email",
            "avatar": "avatar",
        },
        "skill_name": "TextClassification",
        "associated_projects": [{"id": 1, "title": "title"}],
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "input_fields": {"key": "value"},
        "output_classes": {"key": "value"},
        "organization": 1,
    }
    expected_types: typing.Any = {
        "id": "integer",
        "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
        "skill_name": None,
        "associated_projects": ("list", {0: {"id": "integer", "title": None}}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "input_fields": None,
        "output_classes": None,
        "organization": "integer",
    }
    response = client.prompts.get(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.get(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.prompts.delete(id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.prompts.delete(id="id")  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "id": 1,
        "created_by": {
            "id": 1,
            "first_name": "first_name",
            "last_name": "last_name",
            "email": "email",
            "avatar": "avatar",
        },
        "skill_name": "TextClassification",
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "updated_at": "2024-01-15T09:30:00Z",
        "input_fields": {"key": "value"},
        "output_classes": {"key": "value"},
        "organization": 1,
        "associated_projects": [1],
    }
    expected_types: typing.Any = {
        "id": "integer",
        "created_by": {"id": "integer", "first_name": None, "last_name": None, "email": None, "avatar": None},
        "skill_name": None,
        "title": None,
        "description": None,
        "created_at": "datetime",
        "updated_at": "datetime",
        "input_fields": None,
        "output_classes": None,
        "organization": "integer",
        "associated_projects": ("list", {0: "integer"}),
    }
    response = client.prompts.update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.update(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_compatible_projects(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?page=4",
        "previous": "http://api.example.org/accounts/?page=2",
        "results": [
            {
                "annotator_evaluation_minimum_score": "annotator_evaluation_minimum_score",
                "is_published": True,
                "finished_task_number": 1,
                "duplication_status": "duplication_status",
                "data_types": {"key": "value"},
                "color": "color",
                "custom_task_lock_ttl": 1,
                "id": 1,
                "parsed_label_config": {"key": "value"},
                "reviewed_number": "reviewed_number",
                "total_predictions_number": 1,
                "workspace": "workspace",
                "review_settings": {"id": 1, "requeue_rejected_tasks_to_annotator": True},
                "annotation_limit_count": 1,
                "allow_stream": "allow_stream",
                "custom_script": "custom_script",
                "created_at": "2024-01-15T09:30:00Z",
                "members_count": "members_count",
                "annotation_limit_percent": "annotation_limit_percent",
                "show_collab_predictions": True,
                "control_weights": {"key": "value"},
                "config_suitable_for_bulk_annotation": True,
                "reviewer_queue_total": "reviewer_queue_total",
                "enable_empty_annotation": True,
                "queue_done": "queue_done",
                "queue_left": "queue_left",
                "pinned_at": "2024-01-15T09:30:00Z",
                "comment_classification_config": "comment_classification_config",
                "rejected": "rejected",
                "total_annotations_number": "total_annotations_number",
                "blueprints": [
                    {"id": 1, "share_id": "share_id", "short_url": "short_url", "created_at": "2024-01-15T09:30:00Z"}
                ],
                "duplication_done": True,
                "min_annotations_to_start_training": 1,
                "description": "description",
                "useful_annotation_number": "useful_annotation_number",
                "workspace_title": "workspace_title",
                "num_tasks_with_annotations": "num_tasks_with_annotations",
                "organization": 1,
                "assignment_settings": {"id": 1},
                "start_training_on_annotation_update": True,
                "maximum_annotations": 1,
                "overlap_cohort_percentage": 1,
                "show_skip_button": True,
                "members": "members",
                "queue_total": "queue_total",
                "label_config": "label_config",
                "sampling": "Sequential sampling",
                "evaluate_predictions_automatically": True,
                "show_annotation_history": True,
                "show_ground_truth_first": True,
                "expert_instruction": "expert_instruction",
                "created_by": {"id": 1, "avatar": "avatar"},
                "require_comment_on_skip": True,
                "prompts": "prompts",
                "has_blueprints": "has_blueprints",
                "task_number": 1,
                "model_version": "model_version",
                "skipped_annotations_number": "skipped_annotations_number",
                "config_has_control_tags": True,
                "review_total_tasks": "review_total_tasks",
                "pause_on_failed_annotator_evaluation": True,
                "ground_truth_number": 1,
                "skip_queue": "REQUEUE_FOR_ME",
                "annotator_evaluation_minimum_tasks": 1,
                "reveal_preannotations_interactively": True,
                "is_draft": True,
                "show_instruction": True,
                "ready": "ready",
                "show_overlap_first": True,
                "description_short": "description_short",
                "title": "title",
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "annotator_evaluation_minimum_score": None,
                    "is_published": None,
                    "finished_task_number": "integer",
                    "duplication_status": None,
                    "data_types": None,
                    "color": None,
                    "custom_task_lock_ttl": "integer",
                    "id": "integer",
                    "parsed_label_config": None,
                    "reviewed_number": None,
                    "total_predictions_number": "integer",
                    "workspace": None,
                    "review_settings": {"id": "integer", "requeue_rejected_tasks_to_annotator": None},
                    "annotation_limit_count": "integer",
                    "allow_stream": None,
                    "custom_script": None,
                    "created_at": "datetime",
                    "members_count": None,
                    "annotation_limit_percent": None,
                    "show_collab_predictions": None,
                    "control_weights": None,
                    "config_suitable_for_bulk_annotation": None,
                    "reviewer_queue_total": None,
                    "enable_empty_annotation": None,
                    "queue_done": None,
                    "queue_left": None,
                    "pinned_at": "datetime",
                    "comment_classification_config": None,
                    "rejected": None,
                    "total_annotations_number": None,
                    "blueprints": (
                        "list",
                        {0: {"id": "integer", "share_id": None, "short_url": None, "created_at": "datetime"}},
                    ),
                    "duplication_done": None,
                    "min_annotations_to_start_training": "integer",
                    "description": None,
                    "useful_annotation_number": None,
                    "workspace_title": None,
                    "num_tasks_with_annotations": None,
                    "organization": "integer",
                    "assignment_settings": {"id": "integer"},
                    "start_training_on_annotation_update": None,
                    "maximum_annotations": "integer",
                    "overlap_cohort_percentage": "integer",
                    "show_skip_button": None,
                    "members": None,
                    "queue_total": None,
                    "label_config": None,
                    "sampling": None,
                    "evaluate_predictions_automatically": None,
                    "show_annotation_history": None,
                    "show_ground_truth_first": None,
                    "expert_instruction": None,
                    "created_by": {"id": "integer", "avatar": None},
                    "require_comment_on_skip": None,
                    "prompts": None,
                    "has_blueprints": None,
                    "task_number": "integer",
                    "model_version": None,
                    "skipped_annotations_number": None,
                    "config_has_control_tags": None,
                    "review_total_tasks": None,
                    "pause_on_failed_annotator_evaluation": None,
                    "ground_truth_number": "integer",
                    "skip_queue": None,
                    "annotator_evaluation_minimum_tasks": "integer",
                    "reveal_preannotations_interactively": None,
                    "is_draft": None,
                    "show_instruction": None,
                    "ready": None,
                    "show_overlap_first": None,
                    "description_short": None,
                    "title": None,
                }
            },
        ),
    }
    response = client.prompts.compatible_projects()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.prompts.compatible_projects()
    validate_response(async_response, expected_response, expected_types)
