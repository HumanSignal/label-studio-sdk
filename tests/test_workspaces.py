# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "color": "color",
            "created_by": 1,
            "description": "description",
            "id": 1,
            "is_archived": True,
            "is_personal": True,
            "title": "title",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "color": None,
                "created_by": "integer",
                "description": None,
                "id": "integer",
                "is_archived": None,
                "is_personal": None,
                "title": None,
            }
        },
    )
    response = client.workspaces.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.workspaces.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "color": "color",
        "created_by": 1,
        "description": "description",
        "id": 1,
        "is_archived": True,
        "is_personal": True,
        "title": "title",
    }
    expected_types: typing.Any = {
        "color": None,
        "created_by": "integer",
        "description": None,
        "id": "integer",
        "is_archived": None,
        "is_personal": None,
        "title": None,
    }
    response = client.workspaces.create(title="title")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.workspaces.create(title="title")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "color": "color",
        "created_by": 1,
        "description": "description",
        "id": 1,
        "is_archived": True,
        "is_personal": True,
        "title": "title",
    }
    expected_types: typing.Any = {
        "color": None,
        "created_by": "integer",
        "description": None,
        "id": "integer",
        "is_archived": None,
        "is_personal": None,
        "title": None,
    }
    response = client.workspaces.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.workspaces.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.workspaces.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.workspaces.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "color": "color",
        "created_by": 1,
        "description": "description",
        "id": 1,
        "is_archived": True,
        "is_personal": True,
        "title": "title",
    }
    expected_types: typing.Any = {
        "color": None,
        "created_by": "integer",
        "description": None,
        "id": "integer",
        "is_archived": None,
        "is_personal": None,
        "title": None,
    }
    response = client.workspaces.update(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.workspaces.update(id=1)
    validate_response(async_response, expected_response, expected_types)
