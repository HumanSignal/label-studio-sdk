# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_model_version_annotator_agreement(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"agreement": 1.1}
    expected_types: typing.Any = {"agreement": None}
    response = client.projects.stats.model_version_annotator_agreement(id=1, model_version="model_version")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.model_version_annotator_agreement(
        id=1, model_version="model_version"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_model_version_ground_truth_agreement(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"agreement": 1.1}
    expected_types: typing.Any = {"agreement": None}
    response = client.projects.stats.model_version_ground_truth_agreement(id=1, model_version="model_version")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.model_version_ground_truth_agreement(
        id=1, model_version="model_version"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_model_version_prediction_agreement(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"average_prediction_agreement_per_model": 1.1}
    expected_types: typing.Any = {"average_prediction_agreement_per_model": None}
    response = client.projects.stats.model_version_prediction_agreement(id=1, model_version="model_version")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.model_version_prediction_agreement(
        id=1, model_version="model_version"
    )
    validate_response(async_response, expected_response, expected_types)


async def test_iaa(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "IAA": [[1, 0.5], [0.5, 1]],
        "common_tasks": [[0, 1], [1, 0]],
        "std": 1.1,
        "users": [{"email": "user1@example.com", "id": 1}, {"email": "user2@example.com", "id": 2}],
    }
    expected_types: typing.Any = {
        "IAA": ("list", {0: ("list", {0: None, 1: None}), 1: ("list", {0: None, 1: None})}),
        "common_tasks": ("list", {0: ("list", {0: None, 1: None}), 1: ("list", {0: None, 1: None})}),
        "std": None,
        "users": (
            "list",
            {0: ("dict", {0: (None, None), 1: (None, None)}), 1: ("dict", {0: (None, None), 1: (None, None)})},
        ),
    }
    response = client.projects.stats.iaa(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.iaa(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_agreement_annotator(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"Agreement_per_annotator": 1.1}
    expected_types: typing.Any = {"Agreement_per_annotator": None}
    response = client.projects.stats.agreement_annotator(id=1, user_id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.agreement_annotator(id=1, user_id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_data_filters(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"user_filters": {"stats": [{}], "tasks_with_annotations": {"key": "value"}}}
    expected_types: typing.Any = {
        "user_filters": {"stats": ("list", {0: {}}), "tasks_with_annotations": ("dict", {0: (None, None)})}
    }
    response = client.projects.stats.data_filters(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.data_filters(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_finished_tasks(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"finished": 1, "id": 1, "progress": 1}
    expected_types: typing.Any = {"finished": "integer", "id": "integer", "progress": "integer"}
    response = client.projects.stats.finished_tasks(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.finished_tasks(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_lead_time(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "lead_time_stats": [{"mean_time": 1.1, "median_time": 1.1, "sum_lead_time": 1.1, "user_id": 1}]
    }
    expected_types: typing.Any = {
        "lead_time_stats": (
            "list",
            {0: {"mean_time": None, "median_time": None, "sum_lead_time": None, "user_id": "integer"}},
        )
    }
    response = client.projects.stats.lead_time(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.lead_time(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_total_agreement(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"total_agreement": 1.1}
    expected_types: typing.Any = {"total_agreement": None}
    response = client.projects.stats.total_agreement(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.total_agreement(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_update_stats(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"key": "value"}
    expected_types: typing.Tuple[typing.Any, typing.Any] = ("dict", {0: (None, None)})
    response = client.projects.stats.update_stats(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.update_stats(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_user_prediction_agreement(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"average_prediction_agreement_per_user": 1.1}
    expected_types: typing.Any = {"average_prediction_agreement_per_user": None}
    response = client.projects.stats.user_prediction_agreement(id=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.user_prediction_agreement(id=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)


async def test_user_review_score(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"performance_score": 1.1, "review_score": 1.1}
    expected_types: typing.Any = {"performance_score": None, "review_score": None}
    response = client.projects.stats.user_review_score(id=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.user_review_score(id=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)


async def test_user_ground_truth_agreement(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"agreement": 1.1}
    expected_types: typing.Any = {"agreement": None}
    response = client.projects.stats.user_ground_truth_agreement(id=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.stats.user_ground_truth_agreement(id=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)
