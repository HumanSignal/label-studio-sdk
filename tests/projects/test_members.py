# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "active_organization": 1,
            "active_organization_meta": "active_organization_meta",
            "allow_newsletters": True,
            "avatar": "avatar",
            "custom_hotkeys": {"key": "value"},
            "date_joined": "2024-01-15T09:30:00Z",
            "email": "email",
            "first_name": "first_name",
            "id": 1,
            "initials": "initials",
            "last_activity": "2024-01-15T09:30:00Z",
            "last_name": "last_name",
            "lse_fields": {
                "email_notification_settings": "email_notification_settings",
                "invite_activated": True,
                "invite_expired": "invite_expired",
                "invite_expired_at": "invite_expired_at",
                "invited_at": "2024-01-15T09:30:00Z",
                "invited_by": 1,
                "onboarding_state": "not_started",
                "social_auth_finished": True,
                "trial_company": "trial_company",
                "trial_experience_labeling": "trial_experience_labeling",
                "trial_license_enterprise": True,
                "trial_models_in_production": "trial_models_in_production",
                "trial_role": "annotator",
            },
            "org_membership": [{"active": "active", "organization_id": 1, "role": "role"}],
            "organization_membership": {"active": "active", "organization_id": 1, "role": "role"},
            "pause": "pause",
            "phone": "phone",
            "username": "username",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "active_organization": "integer",
                "active_organization_meta": None,
                "allow_newsletters": None,
                "avatar": None,
                "custom_hotkeys": None,
                "date_joined": "datetime",
                "email": None,
                "first_name": None,
                "id": "integer",
                "initials": None,
                "last_activity": "datetime",
                "last_name": None,
                "lse_fields": {
                    "email_notification_settings": None,
                    "invite_activated": None,
                    "invite_expired": None,
                    "invite_expired_at": None,
                    "invited_at": "datetime",
                    "invited_by": "integer",
                    "onboarding_state": None,
                    "social_auth_finished": None,
                    "trial_company": None,
                    "trial_experience_labeling": None,
                    "trial_license_enterprise": None,
                    "trial_models_in_production": None,
                    "trial_role": None,
                },
                "org_membership": ("list", {0: {"active": None, "organization_id": "integer", "role": None}}),
                "organization_membership": {"active": None, "organization_id": "integer", "role": None},
                "pause": None,
                "phone": None,
                "username": None,
            }
        },
    )
    response = client.projects.members.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.members.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_add(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {"user": 1}
    expected_types: typing.Any = {"user": "integer"}
    response = client.projects.members.add(id=1, user=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.members.add(id=1, user=1)
    validate_response(async_response, expected_response, expected_types)


async def test_remove(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.projects.members.remove(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.projects.members.remove(id=1)  # type: ignore[func-returns-value]
        is None
    )
