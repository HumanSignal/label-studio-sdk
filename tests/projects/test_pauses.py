# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from ..utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "created_at": "2024-01-15T09:30:00Z",
            "deleted_at": "2024-01-15T09:30:00Z",
            "deleted_by": 1,
            "id": 1,
            "paused_by": {
                "avatar": "avatar",
                "email": "email",
                "first_name": "first_name",
                "id": 1,
                "last_name": "last_name",
            },
            "project": 1,
            "reason": "MANUAL",
            "updated_at": "2024-01-15T09:30:00Z",
            "user": 1,
            "verbose_reason": "verbose_reason",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "created_at": "datetime",
                "deleted_at": "datetime",
                "deleted_by": "integer",
                "id": "integer",
                "paused_by": {"avatar": None, "email": None, "first_name": None, "id": "integer", "last_name": None},
                "project": "integer",
                "reason": None,
                "updated_at": "datetime",
                "user": "integer",
                "verbose_reason": None,
            }
        },
    )
    response = client.projects.pauses.list(project_pk=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.pauses.list(project_pk=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "created_at": "2024-01-15T09:30:00Z",
        "deleted_at": "2024-01-15T09:30:00Z",
        "deleted_by": 1,
        "id": 1,
        "paused_by": {
            "avatar": "avatar",
            "email": "email",
            "first_name": "first_name",
            "id": 1,
            "last_name": "last_name",
        },
        "project": 1,
        "reason": "MANUAL",
        "updated_at": "2024-01-15T09:30:00Z",
        "user": 1,
        "verbose_reason": "verbose_reason",
    }
    expected_types: typing.Any = {
        "created_at": "datetime",
        "deleted_at": "datetime",
        "deleted_by": "integer",
        "id": "integer",
        "paused_by": {"avatar": None, "email": None, "first_name": None, "id": "integer", "last_name": None},
        "project": "integer",
        "reason": None,
        "updated_at": "datetime",
        "user": "integer",
        "verbose_reason": None,
    }
    response = client.projects.pauses.create(project_pk=1, user_pk=1, reason="MANUAL")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.pauses.create(project_pk=1, user_pk=1, reason="MANUAL")
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "created_at": "2024-01-15T09:30:00Z",
        "deleted_at": "2024-01-15T09:30:00Z",
        "deleted_by": 1,
        "id": 1,
        "paused_by": {
            "avatar": "avatar",
            "email": "email",
            "first_name": "first_name",
            "id": 1,
            "last_name": "last_name",
        },
        "project": 1,
        "reason": "MANUAL",
        "updated_at": "2024-01-15T09:30:00Z",
        "user": 1,
        "verbose_reason": "verbose_reason",
    }
    expected_types: typing.Any = {
        "created_at": "datetime",
        "deleted_at": "datetime",
        "deleted_by": "integer",
        "id": "integer",
        "paused_by": {"avatar": None, "email": None, "first_name": None, "id": "integer", "last_name": None},
        "project": "integer",
        "reason": None,
        "updated_at": "datetime",
        "user": "integer",
        "verbose_reason": None,
    }
    response = client.projects.pauses.get(id="id", project_pk=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.pauses.get(id="id", project_pk=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.projects.pauses.delete(id="id", project_pk=1, user_pk=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.projects.pauses.delete(id="id", project_pk=1, user_pk=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "created_at": "2024-01-15T09:30:00Z",
        "deleted_at": "2024-01-15T09:30:00Z",
        "deleted_by": 1,
        "id": 1,
        "paused_by": {
            "avatar": "avatar",
            "email": "email",
            "first_name": "first_name",
            "id": 1,
            "last_name": "last_name",
        },
        "project": 1,
        "reason": "MANUAL",
        "updated_at": "2024-01-15T09:30:00Z",
        "user": 1,
        "verbose_reason": "verbose_reason",
    }
    expected_types: typing.Any = {
        "created_at": "datetime",
        "deleted_at": "datetime",
        "deleted_by": "integer",
        "id": "integer",
        "paused_by": {"avatar": None, "email": None, "first_name": None, "id": "integer", "last_name": None},
        "project": "integer",
        "reason": None,
        "updated_at": "datetime",
        "user": "integer",
        "verbose_reason": None,
    }
    response = client.projects.pauses.update(id="id", project_pk=1, user_pk=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.pauses.update(id="id", project_pk=1, user_pk=1)
    validate_response(async_response, expected_response, expected_types)
