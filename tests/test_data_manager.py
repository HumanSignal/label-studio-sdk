# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import View
from label_studio_sdk.client import AsyncLabelStudio, LabelStudio

from .utilities import validate_response


async def test_api_dm_actions_list(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.data_manager.api_dm_actions_list() is None  # type: ignore[func-returns-value]

    assert await async_client.data_manager.api_dm_actions_list() is None  # type: ignore[func-returns-value]


async def test_api_dm_actions_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.data_manager.api_dm_actions_create() is None  # type: ignore[func-returns-value]

    assert await async_client.data_manager.api_dm_actions_create() is None  # type: ignore[func-returns-value]


async def test_api_dm_columns_list(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.data_manager.api_dm_columns_list() is None  # type: ignore[func-returns-value]

    assert await async_client.data_manager.api_dm_columns_list() is None  # type: ignore[func-returns-value]


async def test_api_dm_project_list(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.data_manager.api_dm_project_list() is None  # type: ignore[func-returns-value]

    assert await async_client.data_manager.api_dm_project_list() is None  # type: ignore[func-returns-value]


async def test_api_dm_views_list(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = [
        {
            "id": 1,
            "filter_group": {
                "id": 1,
                "filters": [{"column": "column", "type": "type", "operator": "operator"}],
                "conjunction": "conjunction",
            },
            "data": {"data": {"key": "value"}},
            "ordering": {"ordering": {"key": "value"}},
            "selected_items": {"selected_items": {"key": "value"}},
            "user": 1,
            "project": 1,
        }
    ]
    expected_types = (
        "list",
        {
            0: {
                "id": "integer",
                "filter_group": {
                    "id": "integer",
                    "filters": ("list", {0: {"column": None, "type": None, "operator": None}}),
                    "conjunction": None,
                },
                "data": ("dict", {0: (None, None)}),
                "ordering": ("dict", {0: (None, None)}),
                "selected_items": ("dict", {0: (None, None)}),
                "user": "integer",
                "project": "integer",
            }
        },
    )
    response = client.data_manager.api_dm_views_list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.data_manager.api_dm_views_list()
    validate_response(async_response, expected_response, expected_types)


async def test_api_dm_views_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "filter_group": {
            "id": 1,
            "filters": [{"column": "column", "type": "type", "operator": "operator"}],
            "conjunction": "conjunction",
        },
        "data": {"data": {"key": "value"}},
        "ordering": {"ordering": {"key": "value"}},
        "selected_items": {"selected_items": {"key": "value"}},
        "user": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "filter_group": {
            "id": "integer",
            "filters": ("list", {0: {"column": None, "type": None, "operator": None}}),
            "conjunction": None,
        },
        "data": ("dict", {0: (None, None)}),
        "ordering": ("dict", {0: (None, None)}),
        "selected_items": ("dict", {0: (None, None)}),
        "user": "integer",
        "project": "integer",
    }
    response = client.data_manager.api_dm_views_create(request=View(project=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.data_manager.api_dm_views_create(request=View(project=1))
    validate_response(async_response, expected_response, expected_types)


async def test_api_dm_views_reset(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.data_manager.api_dm_views_reset(project=1) is None  # type: ignore[func-returns-value]

    assert await async_client.data_manager.api_dm_views_reset(project=1) is None  # type: ignore[func-returns-value]


async def test_api_dm_views_read(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "filter_group": {
            "id": 1,
            "filters": [{"column": "column", "type": "type", "operator": "operator"}],
            "conjunction": "conjunction",
        },
        "data": {"data": {"key": "value"}},
        "ordering": {"ordering": {"key": "value"}},
        "selected_items": {"selected_items": {"key": "value"}},
        "user": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "filter_group": {
            "id": "integer",
            "filters": ("list", {0: {"column": None, "type": None, "operator": None}}),
            "conjunction": None,
        },
        "data": ("dict", {0: (None, None)}),
        "ordering": ("dict", {0: (None, None)}),
        "selected_items": ("dict", {0: (None, None)}),
        "user": "integer",
        "project": "integer",
    }
    response = client.data_manager.api_dm_views_read(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.data_manager.api_dm_views_read(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_api_dm_views_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "filter_group": {
            "id": 1,
            "filters": [{"column": "column", "type": "type", "operator": "operator"}],
            "conjunction": "conjunction",
        },
        "data": {"data": {"key": "value"}},
        "ordering": {"ordering": {"key": "value"}},
        "selected_items": {"selected_items": {"key": "value"}},
        "user": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "filter_group": {
            "id": "integer",
            "filters": ("list", {0: {"column": None, "type": None, "operator": None}}),
            "conjunction": None,
        },
        "data": ("dict", {0: (None, None)}),
        "ordering": ("dict", {0: (None, None)}),
        "selected_items": ("dict", {0: (None, None)}),
        "user": "integer",
        "project": "integer",
    }
    response = client.data_manager.api_dm_views_update(id="id", request=View(project=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.data_manager.api_dm_views_update(id="id", request=View(project=1))
    validate_response(async_response, expected_response, expected_types)


async def test_api_dm_views_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.data_manager.api_dm_views_delete(id="id") is None  # type: ignore[func-returns-value]

    assert await async_client.data_manager.api_dm_views_delete(id="id") is None  # type: ignore[func-returns-value]


async def test_api_dm_views_partial_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "filter_group": {
            "id": 1,
            "filters": [{"column": "column", "type": "type", "operator": "operator"}],
            "conjunction": "conjunction",
        },
        "data": {"data": {"key": "value"}},
        "ordering": {"ordering": {"key": "value"}},
        "selected_items": {"selected_items": {"key": "value"}},
        "user": 1,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "filter_group": {
            "id": "integer",
            "filters": ("list", {0: {"column": None, "type": None, "operator": None}}),
            "conjunction": None,
        },
        "data": ("dict", {0: (None, None)}),
        "ordering": ("dict", {0: (None, None)}),
        "selected_items": ("dict", {0: (None, None)}),
        "user": "integer",
        "project": "integer",
    }
    response = client.data_manager.api_dm_views_partial_update(id="id", request=View(project=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.data_manager.api_dm_views_partial_update(id="id", request=View(project=1))
    validate_response(async_response, expected_response, expected_types)
