# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "accepted": True,
            "annotation": 1,
            "created_at": "2024-01-15T09:30:00Z",
            "created_by": 1,
            "fixed_annotation_history": 1,
            "id": 1,
            "last_annotation_history": 1,
            "previous_annotation_history": 1,
            "remove_from_queue": True,
            "result": {"key": "value"},
            "started_at": "2024-01-15T09:30:00Z",
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "accepted": None,
                "annotation": "integer",
                "created_at": "datetime",
                "created_by": "integer",
                "fixed_annotation_history": "integer",
                "id": "integer",
                "last_annotation_history": "integer",
                "previous_annotation_history": "integer",
                "remove_from_queue": None,
                "result": None,
                "started_at": "datetime",
            }
        },
    )
    response = client.annotation_reviews.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_reviews.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "accepted": True,
        "annotation": 1,
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": 1,
        "fixed_annotation_history": 1,
        "id": 1,
        "last_annotation_history": 1,
        "previous_annotation_history": 1,
        "remove_from_queue": True,
        "result": {"key": "value"},
        "started_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "accepted": None,
        "annotation": "integer",
        "created_at": "datetime",
        "created_by": "integer",
        "fixed_annotation_history": "integer",
        "id": "integer",
        "last_annotation_history": "integer",
        "previous_annotation_history": "integer",
        "remove_from_queue": None,
        "result": None,
        "started_at": "datetime",
    }
    response = client.annotation_reviews.create(annotation=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_reviews.create(annotation=1)
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "accepted": True,
        "annotation": 1,
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": 1,
        "fixed_annotation_history": 1,
        "id": 1,
        "last_annotation_history": 1,
        "previous_annotation_history": 1,
        "remove_from_queue": True,
        "result": {"key": "value"},
        "started_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "accepted": None,
        "annotation": "integer",
        "created_at": "datetime",
        "created_by": "integer",
        "fixed_annotation_history": "integer",
        "id": "integer",
        "last_annotation_history": "integer",
        "previous_annotation_history": "integer",
        "remove_from_queue": None,
        "result": None,
        "started_at": "datetime",
    }
    response = client.annotation_reviews.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_reviews.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.annotation_reviews.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.annotation_reviews.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "accepted": True,
        "annotation": 1,
        "created_at": "2024-01-15T09:30:00Z",
        "created_by": 1,
        "fixed_annotation_history": 1,
        "id": 1,
        "last_annotation_history": 1,
        "previous_annotation_history": 1,
        "remove_from_queue": True,
        "result": {"key": "value"},
        "started_at": "2024-01-15T09:30:00Z",
    }
    expected_types: typing.Any = {
        "accepted": None,
        "annotation": "integer",
        "created_at": "datetime",
        "created_by": "integer",
        "fixed_annotation_history": "integer",
        "id": "integer",
        "last_annotation_history": "integer",
        "previous_annotation_history": "integer",
        "remove_from_queue": None,
        "result": None,
        "started_at": "datetime",
    }
    response = client.annotation_reviews.update(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotation_reviews.update(id=1)
    validate_response(async_response, expected_response, expected_types)
