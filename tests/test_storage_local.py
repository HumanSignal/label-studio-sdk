# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LocalFilesExportStorage, LocalFilesImportStorage
from label_studio_sdk.client import AsyncLabelStudio, LabelStudio

from .utilities import validate_response


async def test_api_storages_export_localfiles_list(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = [
        {
            "id": 1,
            "type": "type",
            "synchronizable": True,
            "path": "path",
            "regex_filter": "regex_filter",
            "use_blob_urls": True,
            "last_sync": "2024-01-15T09:30:00Z",
            "last_sync_count": 1,
            "last_sync_job": "last_sync_job",
            "status": "initialized",
            "traceback": "traceback",
            "meta": {"meta": {"key": "value"}},
            "title": "title",
            "description": "description",
            "created_at": "2024-01-15T09:30:00Z",
            "can_delete_objects": True,
            "project": 1,
        }
    ]
    expected_types = (
        "list",
        {
            0: {
                "id": "integer",
                "type": None,
                "synchronizable": None,
                "path": None,
                "regex_filter": None,
                "use_blob_urls": None,
                "last_sync": "datetime",
                "last_sync_count": "integer",
                "last_sync_job": None,
                "status": None,
                "traceback": None,
                "meta": ("dict", {0: (None, None)}),
                "title": None,
                "description": None,
                "created_at": "datetime",
                "can_delete_objects": None,
                "project": "integer",
            }
        },
    )
    response = client.storage_local.api_storages_export_localfiles_list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_export_localfiles_list()
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_export_localfiles_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "can_delete_objects": True,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "can_delete_objects": None,
        "project": "integer",
    }
    response = client.storage_local.api_storages_export_localfiles_create(request=LocalFilesExportStorage(project=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_export_localfiles_create(
        request=LocalFilesExportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_export_localfiles_validate_create(
    client: LabelStudio, async_client: AsyncLabelStudio
) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "can_delete_objects": True,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "can_delete_objects": None,
        "project": "integer",
    }
    response = client.storage_local.api_storages_export_localfiles_validate_create(
        request=LocalFilesExportStorage(project=1)
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_export_localfiles_validate_create(
        request=LocalFilesExportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_export_localfiles_read(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "can_delete_objects": True,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "can_delete_objects": None,
        "project": "integer",
    }
    response = client.storage_local.api_storages_export_localfiles_read(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_export_localfiles_read(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_export_localfiles_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.storage_local.api_storages_export_localfiles_delete(id=1) is None  # type: ignore[func-returns-value]

    assert await async_client.storage_local.api_storages_export_localfiles_delete(id=1) is None  # type: ignore[func-returns-value]


async def test_api_storages_export_localfiles_partial_update(
    client: LabelStudio, async_client: AsyncLabelStudio
) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "can_delete_objects": True,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "can_delete_objects": None,
        "project": "integer",
    }
    response = client.storage_local.api_storages_export_localfiles_partial_update(
        id=1, request=LocalFilesExportStorage(project=1)
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_export_localfiles_partial_update(
        id=1, request=LocalFilesExportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_export_localfiles_sync_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "can_delete_objects": True,
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "can_delete_objects": None,
        "project": "integer",
    }
    response = client.storage_local.api_storages_export_localfiles_sync_create(
        id="id", request=LocalFilesExportStorage(project=1)
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_export_localfiles_sync_create(
        id="id", request=LocalFilesExportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_localfiles_list(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = [
        {
            "id": 1,
            "type": "type",
            "synchronizable": True,
            "path": "path",
            "regex_filter": "regex_filter",
            "use_blob_urls": True,
            "last_sync": "2024-01-15T09:30:00Z",
            "last_sync_count": 1,
            "last_sync_job": "last_sync_job",
            "status": "initialized",
            "traceback": "traceback",
            "meta": {"meta": {"key": "value"}},
            "title": "title",
            "description": "description",
            "created_at": "2024-01-15T09:30:00Z",
            "project": 1,
        }
    ]
    expected_types = (
        "list",
        {
            0: {
                "id": "integer",
                "type": None,
                "synchronizable": None,
                "path": None,
                "regex_filter": None,
                "use_blob_urls": None,
                "last_sync": "datetime",
                "last_sync_count": "integer",
                "last_sync_job": None,
                "status": None,
                "traceback": None,
                "meta": ("dict", {0: (None, None)}),
                "title": None,
                "description": None,
                "created_at": "datetime",
                "project": "integer",
            }
        },
    )
    response = client.storage_local.api_storages_localfiles_list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_localfiles_list()
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_localfiles_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "project": "integer",
    }
    response = client.storage_local.api_storages_localfiles_create(request=LocalFilesImportStorage(project=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_localfiles_create(
        request=LocalFilesImportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_localfiles_validate_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "project": "integer",
    }
    response = client.storage_local.api_storages_localfiles_validate_create(request=LocalFilesImportStorage(project=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_localfiles_validate_create(
        request=LocalFilesImportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_localfiles_read(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "project": "integer",
    }
    response = client.storage_local.api_storages_localfiles_read(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_localfiles_read(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_localfiles_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.storage_local.api_storages_localfiles_delete(id=1) is None  # type: ignore[func-returns-value]

    assert await async_client.storage_local.api_storages_localfiles_delete(id=1) is None  # type: ignore[func-returns-value]


async def test_api_storages_localfiles_partial_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "project": "integer",
    }
    response = client.storage_local.api_storages_localfiles_partial_update(
        id=1, request=LocalFilesImportStorage(project=1)
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_localfiles_partial_update(
        id=1, request=LocalFilesImportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_api_storages_localfiles_sync_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "id": 1,
        "type": "type",
        "synchronizable": True,
        "path": "path",
        "regex_filter": "regex_filter",
        "use_blob_urls": True,
        "last_sync": "2024-01-15T09:30:00Z",
        "last_sync_count": 1,
        "last_sync_job": "last_sync_job",
        "status": "initialized",
        "traceback": "traceback",
        "meta": {"meta": {"key": "value"}},
        "title": "title",
        "description": "description",
        "created_at": "2024-01-15T09:30:00Z",
        "project": 1,
    }
    expected_types = {
        "id": "integer",
        "type": None,
        "synchronizable": None,
        "path": None,
        "regex_filter": None,
        "use_blob_urls": None,
        "last_sync": "datetime",
        "last_sync_count": "integer",
        "last_sync_job": None,
        "status": None,
        "traceback": None,
        "meta": ("dict", {0: (None, None)}),
        "title": None,
        "description": None,
        "created_at": "datetime",
        "project": "integer",
    }
    response = client.storage_local.api_storages_localfiles_sync_create(
        id="id", request=LocalFilesImportStorage(project=1)
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.storage_local.api_storages_localfiles_sync_create(
        id="id", request=LocalFilesImportStorage(project=1)
    )
    validate_response(async_response, expected_response, expected_types)
