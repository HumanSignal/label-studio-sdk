# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelStudio
from label_studio_sdk import AsyncLabelStudio
import typing
from .utilities import validate_response


async def test_create_bulk(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [{"id": 1}]
    expected_types: typing.Tuple[typing.Any, typing.Any] = ("list", {0: {"id": "integer"}})
    response = client.annotations.create_bulk()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotations.create_bulk()
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "bulk_created": True,
        "completed_by": 1,
        "created_ago": "created_ago",
        "created_at": "2024-01-15T09:30:00Z",
        "created_username": "created_username",
        "draft_created_at": "2024-01-15T09:30:00Z",
        "ground_truth": False,
        "id": 1,
        "import_id": 1000000,
        "last_action": "prediction",
        "last_created_by": 1,
        "lead_time": 10,
        "parent_annotation": 1,
        "parent_prediction": 1,
        "project": 1,
        "result": [
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        "task": 1,
        "updated_at": "2024-01-15T09:30:00Z",
        "updated_by": 1,
        "was_cancelled": False,
    }
    expected_types: typing.Any = {
        "bulk_created": None,
        "completed_by": "integer",
        "created_ago": None,
        "created_at": "datetime",
        "created_username": None,
        "draft_created_at": "datetime",
        "ground_truth": None,
        "id": "integer",
        "import_id": None,
        "last_action": None,
        "last_created_by": "integer",
        "lead_time": None,
        "parent_annotation": "integer",
        "parent_prediction": "integer",
        "project": "integer",
        "result": (
            "list",
            {
                0: (
                    "dict",
                    {
                        0: (None, None),
                        1: (None, None),
                        2: (None, None),
                        3: (None, None),
                        4: (None, None),
                        5: (None, None),
                        6: (None, None),
                    },
                )
            },
        ),
        "task": "integer",
        "updated_at": "datetime",
        "updated_by": "integer",
        "was_cancelled": None,
    }
    response = client.annotations.get(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotations.get(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.annotations.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.annotations.delete(id=1)  # type: ignore[func-returns-value]
        is None
    )


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "bulk_created": True,
        "completed_by": 1,
        "created_ago": "created_ago",
        "created_at": "2024-01-15T09:30:00Z",
        "created_username": "created_username",
        "draft_created_at": "2024-01-15T09:30:00Z",
        "ground_truth": False,
        "id": 1,
        "import_id": 1000000,
        "last_action": "prediction",
        "last_created_by": 1,
        "lead_time": 10,
        "parent_annotation": 1,
        "parent_prediction": 1,
        "project": 1,
        "result": [
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        "task": 1,
        "updated_at": "2024-01-15T09:30:00Z",
        "updated_by": 1,
        "was_cancelled": False,
    }
    expected_types: typing.Any = {
        "bulk_created": None,
        "completed_by": "integer",
        "created_ago": None,
        "created_at": "datetime",
        "created_username": None,
        "draft_created_at": "datetime",
        "ground_truth": None,
        "id": "integer",
        "import_id": None,
        "last_action": None,
        "last_created_by": "integer",
        "lead_time": None,
        "parent_annotation": "integer",
        "parent_prediction": "integer",
        "project": "integer",
        "result": (
            "list",
            {
                0: (
                    "dict",
                    {
                        0: (None, None),
                        1: (None, None),
                        2: (None, None),
                        3: (None, None),
                        4: (None, None),
                        5: (None, None),
                        6: (None, None),
                    },
                )
            },
        ),
        "task": "integer",
        "updated_at": "datetime",
        "updated_by": "integer",
        "was_cancelled": None,
    }
    response = client.annotations.update(
        id=1,
        ground_truth=True,
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        was_cancelled=False,
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotations.update(
        id=1,
        ground_truth=True,
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        was_cancelled=False,
    )
    validate_response(async_response, expected_response, expected_types)


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = [
        {
            "bulk_created": True,
            "completed_by": 1,
            "created_ago": "created_ago",
            "created_at": "2024-01-15T09:30:00Z",
            "created_username": "created_username",
            "draft_created_at": "2024-01-15T09:30:00Z",
            "ground_truth": True,
            "id": 1,
            "import_id": 1000000,
            "last_action": "prediction",
            "last_created_by": 1,
            "lead_time": 1.1,
            "parent_annotation": 1,
            "parent_prediction": 1,
            "project": 1,
            "result": [{"key": "value"}],
            "task": 1,
            "updated_at": "2024-01-15T09:30:00Z",
            "updated_by": 1,
            "was_cancelled": True,
        }
    ]
    expected_types: typing.Tuple[typing.Any, typing.Any] = (
        "list",
        {
            0: {
                "bulk_created": None,
                "completed_by": "integer",
                "created_ago": None,
                "created_at": "datetime",
                "created_username": None,
                "draft_created_at": "datetime",
                "ground_truth": None,
                "id": "integer",
                "import_id": None,
                "last_action": None,
                "last_created_by": "integer",
                "lead_time": None,
                "parent_annotation": "integer",
                "parent_prediction": "integer",
                "project": "integer",
                "result": ("list", {0: ("dict", {0: (None, None)})}),
                "task": "integer",
                "updated_at": "datetime",
                "updated_by": "integer",
                "was_cancelled": None,
            }
        },
    )
    response = client.annotations.list(id=1)
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotations.list(id=1)
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response: typing.Any = {
        "bulk_created": True,
        "completed_by": 1,
        "created_ago": "created_ago",
        "created_at": "2024-01-15T09:30:00Z",
        "created_username": "created_username",
        "draft_created_at": "2024-01-15T09:30:00Z",
        "ground_truth": False,
        "id": 1,
        "import_id": 1000000,
        "last_action": "prediction",
        "last_created_by": 1,
        "lead_time": 10,
        "parent_annotation": 1,
        "parent_prediction": 1,
        "project": 1,
        "result": [
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        "task": 1,
        "updated_at": "2024-01-15T09:30:00Z",
        "updated_by": 1,
        "was_cancelled": False,
    }
    expected_types: typing.Any = {
        "bulk_created": None,
        "completed_by": "integer",
        "created_ago": None,
        "created_at": "datetime",
        "created_username": None,
        "draft_created_at": "datetime",
        "ground_truth": None,
        "id": "integer",
        "import_id": None,
        "last_action": None,
        "last_created_by": "integer",
        "lead_time": None,
        "parent_annotation": "integer",
        "parent_prediction": "integer",
        "project": "integer",
        "result": (
            "list",
            {
                0: (
                    "dict",
                    {
                        0: (None, None),
                        1: (None, None),
                        2: (None, None),
                        3: (None, None),
                        4: (None, None),
                        5: (None, None),
                        6: (None, None),
                    },
                )
            },
        ),
        "task": "integer",
        "updated_at": "datetime",
        "updated_by": "integer",
        "was_cancelled": None,
    }
    response = client.annotations.create(
        id=1,
        ground_truth=True,
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        was_cancelled=False,
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.annotations.create(
        id=1,
        ground_truth=True,
        result=[
            {
                "from_name": "bboxes",
                "image_rotation": 0,
                "original_height": 1080,
                "original_width": 1920,
                "to_name": "image",
                "type": "rectanglelabels",
                "value": {
                    "height": 60,
                    "rotation": 0,
                    "values": {"rectanglelabels": ["Person"]},
                    "width": 50,
                    "x": 20,
                    "y": 30,
                },
            }
        ],
        was_cancelled=False,
    )
    validate_response(async_response, expected_response, expected_types)
