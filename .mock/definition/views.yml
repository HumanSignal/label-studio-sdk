imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /api/dm/views/
      method: GET
      auth: true
      docs: >

        List all views for a specific project. A view is a tab in the Data
        Manager where you can set filters and customize which tasks and
        information appears. 


        You will need to provide the project ID. You can find this in the URL
        when viewing the project in Label Studio, or you can use [List all
        projects](../projects/list). 
      display-name: List views
      request:
        name: ViewsListRequest
        query-parameters:
          project:
            type: optional<integer>
            docs: Project ID
      response:
        docs: ''
        type: list<root.View>
      examples:
        - response:
            body:
              - id: 1
                filter_group:
                  id: 1
                  filters:
                    - column: column
                      type: type
                      operator: operator
                  conjunction: conjunction
                data:
                  data:
                    key: value
                ordering:
                  ordering:
                    key: value
                selected_items:
                  selected_items:
                    key: value
                user: 1
                project: 1
      audiences:
        - public
    create:
      path: /api/dm/views/
      method: POST
      auth: true
      docs: >

        Create a new Data Manager view for a specific project. A view is a tab
        in the Data Manager where you can set filters and customize what tasks
        and information appears. 


        You will need to provide the project ID. You can find this in the URL
        when viewing the project in Label Studio, or you can use [List all
        projects](../projects/list). 
      display-name: Create view
      request:
        name: ViewsCreateRequest
        body:
          properties:
            data:
              type: optional<ViewsCreateRequestData>
              docs: Custom view data
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: ''
        type: root.View
      examples:
        - request: {}
          response:
            body:
              id: 1
              filter_group:
                id: 1
                filters:
                  - column: column
                    type: type
                    operator: operator
                conjunction: conjunction
              data:
                data:
                  key: value
              ordering:
                ordering:
                  key: value
              selected_items:
                selected_items:
                  key: value
              user: 1
              project: 1
      audiences:
        - public
    delete_all:
      path: /api/dm/views/reset/
      method: DELETE
      auth: true
      docs: >

        Delete all views for a specific project. A view is a tab in the Data
        Manager where you can set filters and customize what tasks appear. 


        You will need to provide the project ID. You can find this in the URL
        when viewing the project in Label Studio, or you can use [List all
        projects](../projects/list).
      display-name: Delete all project views
      request:
        name: ViewReset
        body:
          properties:
            project: integer
      examples:
        - request:
            project: 1
      audiences:
        - public
    get:
      path: /api/dm/views/{id}/
      method: GET
      auth: true
      docs: >

        Get the details about a specific Data Manager view (tab). You will need
        to supply the view ID. You can find this using [List views](list).  
      path-parameters:
        id:
          type: string
          docs: View ID
      display-name: Get view details
      response:
        docs: ''
        type: root.View
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: 1
              filter_group:
                id: 1
                filters:
                  - column: column
                    type: type
                    operator: operator
                conjunction: conjunction
              data:
                data:
                  key: value
              ordering:
                ordering:
                  key: value
              selected_items:
                selected_items:
                  key: value
              user: 1
              project: 1
      audiences:
        - public
    delete:
      path: /api/dm/views/{id}/
      method: DELETE
      auth: true
      docs: >-
        Delete a specific Data Manager view (tab) by ID. You can find the view
        using [List views](list).
      path-parameters:
        id:
          type: string
          docs: View ID
      display-name: Delete view
      examples:
        - path-parameters:
            id: id
      audiences:
        - public
    update:
      path: /api/dm/views/{id}/
      method: PATCH
      auth: true
      docs: >

        You can update a specific Data Manager view (tab) with additional
        filters and other customizations. You will need to supply the view ID.
        You can find this using [List views](list).  
      path-parameters:
        id:
          type: string
          docs: View ID
      display-name: Update view
      request:
        name: ViewsUpdateRequest
        body:
          properties:
            data:
              type: optional<ViewsUpdateRequestData>
              docs: Custom view data
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: ''
        type: root.View
      examples:
        - path-parameters:
            id: id
          request: {}
          response:
            body:
              id: 1
              filter_group:
                id: 1
                filters:
                  - column: column
                    type: type
                    operator: operator
                conjunction: conjunction
              data:
                data:
                  key: value
              ordering:
                ordering:
                  key: value
              selected_items:
                selected_items:
                  key: value
              user: 1
              project: 1
      audiences:
        - public
types:
  ViewsCreateRequestDataFiltersConjunction:
    enum:
      - or
      - and
    docs: >-
      Logical conjunction for the filters. This conjunction (either "or" or
      "and") will be applied to all items in the filters list. It is not
      possible to combine "or" and "and" within one list of filters. All filters
      will be either combined with "or" or with "and", but not a mix of both.
  ViewsCreateRequestDataFiltersItemsItemFilter:
    enum:
      - value: filter:tasks:agreement
        name: FilterTasksAgreement
      - value: filter:tasks:annotations_results
        name: FilterTasksAnnotationsResults
      - value: filter:tasks:annotators
        name: FilterTasksAnnotators
      - value: filter:tasks:cancelled_annotations
        name: FilterTasksCancelledAnnotations
      - value: filter:tasks:comments
        name: FilterTasksComments
      - value: filter:tasks:completed_at
        name: FilterTasksCompletedAt
      - value: filter:tasks:created_at
        name: FilterTasksCreatedAt
      - value: filter:tasks:file_upload
        name: FilterTasksFileUpload
      - value: filter:tasks:ground_truth
        name: FilterTasksGroundTruth
      - value: filter:tasks:id
        name: FilterTasksId
      - value: filter:tasks:inner_id
        name: FilterTasksInnerId
      - value: filter:tasks:predictions_model_versions
        name: FilterTasksPredictionsModelVersions
      - value: filter:tasks:predictions_results
        name: FilterTasksPredictionsResults
      - value: filter:tasks:predictions_score
        name: FilterTasksPredictionsScore
      - value: filter:tasks:reviewed
        name: FilterTasksReviewed
      - value: filter:tasks:reviewers
        name: FilterTasksReviewers
      - value: filter:tasks:reviews_accepted
        name: FilterTasksReviewsAccepted
      - value: filter:tasks:reviews_rejected
        name: FilterTasksReviewsRejected
      - value: filter:tasks:total_annotations
        name: FilterTasksTotalAnnotations
      - value: filter:tasks:total_predictions
        name: FilterTasksTotalPredictions
      - value: filter:tasks:unresolved_comment_count
        name: FilterTasksUnresolvedCommentCount
      - value: filter:tasks:updated_at
        name: FilterTasksUpdatedAt
    docs: >-
      Filter identifier, it should start with `filter:tasks:` prefix, e.g.
      `filter:tasks:agreement`. For `task.data` fields it may look like
      `filter:tasks:data.field_name`. If you need more info about columns, check
      the [Get data manager
      columns](#tag/Data-Manager/operation/api_dm_columns_list) API endpoint.
      Possible values:<br><li>`filter:tasks:agreement`<br> (Number) Agreement
      for annotation results for a specific task (Enterprise
      only)</li><br><li>`filter:tasks:annotations_results`<br> (String)
      Annotation results for the tasks</li><br><li>`filter:tasks:annotators`<br>
      (List) Annotators that completed the task (Community). Can include
      assigned annotators (Enterprise only). Important note: the filter `type`
      should be List, but the filter `value` is
      integer</li><br><li>`filter:tasks:cancelled_annotations`<br> (Number)
      Number of cancelled or skipped annotations for the
      task</li><br><li>`filter:tasks:comments`<br> (Number) Number of comments
      in a task</li><br><li>`filter:tasks:completed_at`<br> (Datetime) Time when
      a task was fully annotated</li><br><li>`filter:tasks:created_at`<br>
      (Datetime) Time the task was created
      at</li><br><li>`filter:tasks:file_upload`<br> (String) Name of the file
      uploaded to create the tasks</li><br><li>`filter:tasks:ground_truth`<br>
      (Boolean) Ground truth status of the
      tasks</li><br><li>`filter:tasks:id`<br> (Number) Task
      ID</li><br><li>`filter:tasks:inner_id`<br> (Number) Task Inner ID, it
      starts from 1 for all
      projects</li><br><li>`filter:tasks:predictions_model_versions`<br>
      (String) Model version used for the
      predictions</li><br><li>`filter:tasks:predictions_results`<br> (String)
      Prediction results for the
      tasks</li><br><li>`filter:tasks:predictions_score`<br> (Number) Prediction
      score for the task</li><br><li>`filter:tasks:reviewed`<br> (Boolean)
      Whether the tasks have been reviewed (Enterprise
      only)</li><br><li>`filter:tasks:reviewers`<br> (String) Reviewers that
      reviewed the task, or assigned reviewers (Enterprise only). Important
      note: the filter `type` should be List, but the filter `value` is
      integer</li><br><li>`filter:tasks:reviews_accepted`<br> (Number) Number of
      annotations accepted for a task in review (Enterprise
      only)</li><br><li>`filter:tasks:reviews_rejected`<br> (Number) Number of
      annotations rejected for a task in review (Enterprise
      only)</li><br><li>`filter:tasks:total_annotations`<br> (Number) Total
      number of annotations on a
      task</li><br><li>`filter:tasks:total_predictions`<br> (Number) Total
      number of predictions for the
      task</li><br><li>`filter:tasks:unresolved_comment_count`<br> (Number)
      Number of unresolved comments in a
      task</li><br><li>`filter:tasks:updated_at`<br> (Datetime) Time the task
      was updated at (e.g. new annotation was created, review added, etc)</li>
  ViewsCreateRequestDataFiltersItemsItemOperator:
    enum:
      - contains
      - ends_with
      - equal
      - exists
      - greater
      - greater_or_equal
      - in
      - less
      - less_or_equal
      - not_contains
      - not_equal
      - not_exists
      - not_in
      - starts_with
    docs: >-
      Filter operator. Possible values:<br><li>`contains`<br>
      Contains</li><br><li>`ends_with`<br> Ends with</li><br><li>`equal`<br>
      Equal to</li><br><li>`exists`<br> Exists</li><br><li>`greater`<br> Greater
      than</li><br><li>`greater_or_equal`<br> Greater than or equal
      to</li><br><li>`in`<br> Is between min and max values, so the filter
      `value` should be e.g. `{"min": 1, "max": 7}`</li><br><li>`less`<br> Less
      than</li><br><li>`less_or_equal`<br> Less than or equal
      to</li><br><li>`not_contains`<br> Does not
      contain</li><br><li>`not_equal`<br> Not equal
      to</li><br><li>`not_exists`<br> Does not exist</li><br><li>`not_in`<br> Is
      not between min and max values, so the filter `value` should be e.g.
      `{"min": 1, "max": 7}`</li><br><li>`starts_with`<br> Starts with</li>
  ViewsCreateRequestDataFiltersItemsItemValue:
    discriminated: false
    docs: Value to filter by
    union:
      - type: string
        docs: String
      - type: integer
        docs: Integer
      - type: double
        docs: Float
      - type: boolean
        docs: Boolean
      - docs: List of strings or integers
        type: map<string, unknown>
  ViewsCreateRequestDataFiltersItemsItem:
    properties:
      filter:
        type: ViewsCreateRequestDataFiltersItemsItemFilter
        docs: >-
          Filter identifier, it should start with `filter:tasks:` prefix, e.g.
          `filter:tasks:agreement`. For `task.data` fields it may look like
          `filter:tasks:data.field_name`. If you need more info about columns,
          check the [Get data manager
          columns](#tag/Data-Manager/operation/api_dm_columns_list) API
          endpoint. Possible values:<br><li>`filter:tasks:agreement`<br>
          (Number) Agreement for annotation results for a specific task
          (Enterprise only)</li><br><li>`filter:tasks:annotations_results`<br>
          (String) Annotation results for the
          tasks</li><br><li>`filter:tasks:annotators`<br> (List) Annotators that
          completed the task (Community). Can include assigned annotators
          (Enterprise only). Important note: the filter `type` should be List,
          but the filter `value` is
          integer</li><br><li>`filter:tasks:cancelled_annotations`<br> (Number)
          Number of cancelled or skipped annotations for the
          task</li><br><li>`filter:tasks:comments`<br> (Number) Number of
          comments in a task</li><br><li>`filter:tasks:completed_at`<br>
          (Datetime) Time when a task was fully
          annotated</li><br><li>`filter:tasks:created_at`<br> (Datetime) Time
          the task was created at</li><br><li>`filter:tasks:file_upload`<br>
          (String) Name of the file uploaded to create the
          tasks</li><br><li>`filter:tasks:ground_truth`<br> (Boolean) Ground
          truth status of the tasks</li><br><li>`filter:tasks:id`<br> (Number)
          Task ID</li><br><li>`filter:tasks:inner_id`<br> (Number) Task Inner
          ID, it starts from 1 for all
          projects</li><br><li>`filter:tasks:predictions_model_versions`<br>
          (String) Model version used for the
          predictions</li><br><li>`filter:tasks:predictions_results`<br>
          (String) Prediction results for the
          tasks</li><br><li>`filter:tasks:predictions_score`<br> (Number)
          Prediction score for the task</li><br><li>`filter:tasks:reviewed`<br>
          (Boolean) Whether the tasks have been reviewed (Enterprise
          only)</li><br><li>`filter:tasks:reviewers`<br> (String) Reviewers that
          reviewed the task, or assigned reviewers (Enterprise only). Important
          note: the filter `type` should be List, but the filter `value` is
          integer</li><br><li>`filter:tasks:reviews_accepted`<br> (Number)
          Number of annotations accepted for a task in review (Enterprise
          only)</li><br><li>`filter:tasks:reviews_rejected`<br> (Number) Number
          of annotations rejected for a task in review (Enterprise
          only)</li><br><li>`filter:tasks:total_annotations`<br> (Number) Total
          number of annotations on a
          task</li><br><li>`filter:tasks:total_predictions`<br> (Number) Total
          number of predictions for the
          task</li><br><li>`filter:tasks:unresolved_comment_count`<br> (Number)
          Number of unresolved comments in a
          task</li><br><li>`filter:tasks:updated_at`<br> (Datetime) Time the
          task was updated at (e.g. new annotation was created, review added,
          etc)</li>
      operator:
        type: ViewsCreateRequestDataFiltersItemsItemOperator
        docs: >-
          Filter operator. Possible values:<br><li>`contains`<br>
          Contains</li><br><li>`ends_with`<br> Ends with</li><br><li>`equal`<br>
          Equal to</li><br><li>`exists`<br> Exists</li><br><li>`greater`<br>
          Greater than</li><br><li>`greater_or_equal`<br> Greater than or equal
          to</li><br><li>`in`<br> Is between min and max values, so the filter
          `value` should be e.g. `{"min": 1, "max": 7}`</li><br><li>`less`<br>
          Less than</li><br><li>`less_or_equal`<br> Less than or equal
          to</li><br><li>`not_contains`<br> Does not
          contain</li><br><li>`not_equal`<br> Not equal
          to</li><br><li>`not_exists`<br> Does not
          exist</li><br><li>`not_in`<br> Is not between min and max values, so
          the filter `value` should be e.g. `{"min": 1, "max":
          7}`</li><br><li>`starts_with`<br> Starts with</li>
      type:
        type: string
        docs: >-
          Type of the filter value. Possible values:<br><li>`Boolean`<br>
          Boolean</li><br><li>`Datetime`<br> Datetime string in
          `strftime('%Y-%m-%dT%H:%M:%S.%fZ')` format</li><br><li>`List`<br> List
          of items</li><br><li>`Number`<br> Float or
          Integer</li><br><li>`String`<br> String</li><br><li>`Unknown`<br>
          Unknown is explicitly converted to string format</li>
      value:
        type: ViewsCreateRequestDataFiltersItemsItemValue
        docs: Value to filter by
  ViewsCreateRequestDataFilters:
    docs: >-
      Filters to apply on tasks. You can use [the helper class `Filters` from
      this page](https://labelstud.io/sdk/data_manager.html) to create Data
      Manager Filters.<br>Example: `{"conjunction": "or", "items": [{"filter":
      "filter:tasks:completed_at", "operator": "greater", "type": "Datetime",
      "value": "2021-01-01T00:00:00.000Z"}]}`
    properties:
      conjunction:
        type: ViewsCreateRequestDataFiltersConjunction
        docs: >-
          Logical conjunction for the filters. This conjunction (either "or" or
          "and") will be applied to all items in the filters list. It is not
          possible to combine "or" and "and" within one list of filters. All
          filters will be either combined with "or" or with "and", but not a mix
          of both.
      items:
        docs: List of filter items
        type: list<ViewsCreateRequestDataFiltersItemsItem>
  ViewsCreateRequestDataOrderingItem:
    enum:
      - value: tasks:agreement
        name: TasksAgreement
      - value: tasks:annotations_results
        name: TasksAnnotationsResults
      - value: tasks:annotators
        name: TasksAnnotators
      - value: tasks:cancelled_annotations
        name: TasksCancelledAnnotations
      - value: tasks:comments
        name: TasksComments
      - value: tasks:completed_at
        name: TasksCompletedAt
      - value: tasks:created_at
        name: TasksCreatedAt
      - value: tasks:file_upload
        name: TasksFileUpload
      - value: tasks:ground_truth
        name: TasksGroundTruth
      - value: tasks:id
        name: TasksId
      - value: tasks:inner_id
        name: TasksInnerId
      - value: tasks:predictions_model_versions
        name: TasksPredictionsModelVersions
      - value: tasks:predictions_results
        name: TasksPredictionsResults
      - value: tasks:predictions_score
        name: TasksPredictionsScore
      - value: tasks:reviewed
        name: TasksReviewed
      - value: tasks:reviewers
        name: TasksReviewers
      - value: tasks:reviews_accepted
        name: TasksReviewsAccepted
      - value: tasks:reviews_rejected
        name: TasksReviewsRejected
      - value: tasks:total_annotations
        name: TasksTotalAnnotations
      - value: tasks:total_predictions
        name: TasksTotalPredictions
      - value: tasks:unresolved_comment_count
        name: TasksUnresolvedCommentCount
      - value: tasks:updated_at
        name: TasksUpdatedAt
  ViewsCreateRequestData:
    docs: Custom view data
    properties:
      filters:
        type: optional<ViewsCreateRequestDataFilters>
        docs: >-
          Filters to apply on tasks. You can use [the helper class `Filters`
          from this page](https://labelstud.io/sdk/data_manager.html) to create
          Data Manager Filters.<br>Example: `{"conjunction": "or", "items":
          [{"filter": "filter:tasks:completed_at", "operator": "greater",
          "type": "Datetime", "value": "2021-01-01T00:00:00.000Z"}]}`
      ordering:
        type: optional<list<ViewsCreateRequestDataOrderingItem>>
        docs: >-
          List of fields to order by. Fields are similar to filters but without
          the `filter:` prefix. To reverse the order, add a minus sign before
          the field name, e.g. `-tasks:created_at`.
  ViewsUpdateRequestDataFiltersConjunction:
    enum:
      - or
      - and
    docs: >-
      Logical conjunction for the filters. This conjunction (either "or" or
      "and") will be applied to all items in the filters list. It is not
      possible to combine "or" and "and" within one list of filters. All filters
      will be either combined with "or" or with "and", but not a mix of both.
  ViewsUpdateRequestDataFiltersItemsItemFilter:
    enum:
      - value: filter:tasks:agreement
        name: FilterTasksAgreement
      - value: filter:tasks:annotations_results
        name: FilterTasksAnnotationsResults
      - value: filter:tasks:annotators
        name: FilterTasksAnnotators
      - value: filter:tasks:cancelled_annotations
        name: FilterTasksCancelledAnnotations
      - value: filter:tasks:comments
        name: FilterTasksComments
      - value: filter:tasks:completed_at
        name: FilterTasksCompletedAt
      - value: filter:tasks:created_at
        name: FilterTasksCreatedAt
      - value: filter:tasks:file_upload
        name: FilterTasksFileUpload
      - value: filter:tasks:ground_truth
        name: FilterTasksGroundTruth
      - value: filter:tasks:id
        name: FilterTasksId
      - value: filter:tasks:inner_id
        name: FilterTasksInnerId
      - value: filter:tasks:predictions_model_versions
        name: FilterTasksPredictionsModelVersions
      - value: filter:tasks:predictions_results
        name: FilterTasksPredictionsResults
      - value: filter:tasks:predictions_score
        name: FilterTasksPredictionsScore
      - value: filter:tasks:reviewed
        name: FilterTasksReviewed
      - value: filter:tasks:reviewers
        name: FilterTasksReviewers
      - value: filter:tasks:reviews_accepted
        name: FilterTasksReviewsAccepted
      - value: filter:tasks:reviews_rejected
        name: FilterTasksReviewsRejected
      - value: filter:tasks:total_annotations
        name: FilterTasksTotalAnnotations
      - value: filter:tasks:total_predictions
        name: FilterTasksTotalPredictions
      - value: filter:tasks:unresolved_comment_count
        name: FilterTasksUnresolvedCommentCount
      - value: filter:tasks:updated_at
        name: FilterTasksUpdatedAt
    docs: >-
      Filter identifier, it should start with `filter:tasks:` prefix, e.g.
      `filter:tasks:agreement`. For `task.data` fields it may look like
      `filter:tasks:data.field_name`. If you need more info about columns, check
      the [Get data manager
      columns](#tag/Data-Manager/operation/api_dm_columns_list) API endpoint.
      Possible values:<br><li>`filter:tasks:agreement`<br> (Number) Agreement
      for annotation results for a specific task (Enterprise
      only)</li><br><li>`filter:tasks:annotations_results`<br> (String)
      Annotation results for the tasks</li><br><li>`filter:tasks:annotators`<br>
      (List) Annotators that completed the task (Community). Can include
      assigned annotators (Enterprise only). Important note: the filter `type`
      should be List, but the filter `value` is
      integer</li><br><li>`filter:tasks:cancelled_annotations`<br> (Number)
      Number of cancelled or skipped annotations for the
      task</li><br><li>`filter:tasks:comments`<br> (Number) Number of comments
      in a task</li><br><li>`filter:tasks:completed_at`<br> (Datetime) Time when
      a task was fully annotated</li><br><li>`filter:tasks:created_at`<br>
      (Datetime) Time the task was created
      at</li><br><li>`filter:tasks:file_upload`<br> (String) Name of the file
      uploaded to create the tasks</li><br><li>`filter:tasks:ground_truth`<br>
      (Boolean) Ground truth status of the
      tasks</li><br><li>`filter:tasks:id`<br> (Number) Task
      ID</li><br><li>`filter:tasks:inner_id`<br> (Number) Task Inner ID, it
      starts from 1 for all
      projects</li><br><li>`filter:tasks:predictions_model_versions`<br>
      (String) Model version used for the
      predictions</li><br><li>`filter:tasks:predictions_results`<br> (String)
      Prediction results for the
      tasks</li><br><li>`filter:tasks:predictions_score`<br> (Number) Prediction
      score for the task</li><br><li>`filter:tasks:reviewed`<br> (Boolean)
      Whether the tasks have been reviewed (Enterprise
      only)</li><br><li>`filter:tasks:reviewers`<br> (String) Reviewers that
      reviewed the task, or assigned reviewers (Enterprise only). Important
      note: the filter `type` should be List, but the filter `value` is
      integer</li><br><li>`filter:tasks:reviews_accepted`<br> (Number) Number of
      annotations accepted for a task in review (Enterprise
      only)</li><br><li>`filter:tasks:reviews_rejected`<br> (Number) Number of
      annotations rejected for a task in review (Enterprise
      only)</li><br><li>`filter:tasks:total_annotations`<br> (Number) Total
      number of annotations on a
      task</li><br><li>`filter:tasks:total_predictions`<br> (Number) Total
      number of predictions for the
      task</li><br><li>`filter:tasks:unresolved_comment_count`<br> (Number)
      Number of unresolved comments in a
      task</li><br><li>`filter:tasks:updated_at`<br> (Datetime) Time the task
      was updated at (e.g. new annotation was created, review added, etc)</li>
  ViewsUpdateRequestDataFiltersItemsItemOperator:
    enum:
      - contains
      - ends_with
      - equal
      - exists
      - greater
      - greater_or_equal
      - in
      - less
      - less_or_equal
      - not_contains
      - not_equal
      - not_exists
      - not_in
      - starts_with
    docs: >-
      Filter operator. Possible values:<br><li>`contains`<br>
      Contains</li><br><li>`ends_with`<br> Ends with</li><br><li>`equal`<br>
      Equal to</li><br><li>`exists`<br> Exists</li><br><li>`greater`<br> Greater
      than</li><br><li>`greater_or_equal`<br> Greater than or equal
      to</li><br><li>`in`<br> Is between min and max values, so the filter
      `value` should be e.g. `{"min": 1, "max": 7}`</li><br><li>`less`<br> Less
      than</li><br><li>`less_or_equal`<br> Less than or equal
      to</li><br><li>`not_contains`<br> Does not
      contain</li><br><li>`not_equal`<br> Not equal
      to</li><br><li>`not_exists`<br> Does not exist</li><br><li>`not_in`<br> Is
      not between min and max values, so the filter `value` should be e.g.
      `{"min": 1, "max": 7}`</li><br><li>`starts_with`<br> Starts with</li>
  ViewsUpdateRequestDataFiltersItemsItemValue:
    discriminated: false
    docs: Value to filter by
    union:
      - type: string
        docs: String
      - type: integer
        docs: Integer
      - type: double
        docs: Float
      - type: boolean
        docs: Boolean
      - docs: List of strings or integers
        type: map<string, unknown>
  ViewsUpdateRequestDataFiltersItemsItem:
    properties:
      filter:
        type: ViewsUpdateRequestDataFiltersItemsItemFilter
        docs: >-
          Filter identifier, it should start with `filter:tasks:` prefix, e.g.
          `filter:tasks:agreement`. For `task.data` fields it may look like
          `filter:tasks:data.field_name`. If you need more info about columns,
          check the [Get data manager
          columns](#tag/Data-Manager/operation/api_dm_columns_list) API
          endpoint. Possible values:<br><li>`filter:tasks:agreement`<br>
          (Number) Agreement for annotation results for a specific task
          (Enterprise only)</li><br><li>`filter:tasks:annotations_results`<br>
          (String) Annotation results for the
          tasks</li><br><li>`filter:tasks:annotators`<br> (List) Annotators that
          completed the task (Community). Can include assigned annotators
          (Enterprise only). Important note: the filter `type` should be List,
          but the filter `value` is
          integer</li><br><li>`filter:tasks:cancelled_annotations`<br> (Number)
          Number of cancelled or skipped annotations for the
          task</li><br><li>`filter:tasks:comments`<br> (Number) Number of
          comments in a task</li><br><li>`filter:tasks:completed_at`<br>
          (Datetime) Time when a task was fully
          annotated</li><br><li>`filter:tasks:created_at`<br> (Datetime) Time
          the task was created at</li><br><li>`filter:tasks:file_upload`<br>
          (String) Name of the file uploaded to create the
          tasks</li><br><li>`filter:tasks:ground_truth`<br> (Boolean) Ground
          truth status of the tasks</li><br><li>`filter:tasks:id`<br> (Number)
          Task ID</li><br><li>`filter:tasks:inner_id`<br> (Number) Task Inner
          ID, it starts from 1 for all
          projects</li><br><li>`filter:tasks:predictions_model_versions`<br>
          (String) Model version used for the
          predictions</li><br><li>`filter:tasks:predictions_results`<br>
          (String) Prediction results for the
          tasks</li><br><li>`filter:tasks:predictions_score`<br> (Number)
          Prediction score for the task</li><br><li>`filter:tasks:reviewed`<br>
          (Boolean) Whether the tasks have been reviewed (Enterprise
          only)</li><br><li>`filter:tasks:reviewers`<br> (String) Reviewers that
          reviewed the task, or assigned reviewers (Enterprise only). Important
          note: the filter `type` should be List, but the filter `value` is
          integer</li><br><li>`filter:tasks:reviews_accepted`<br> (Number)
          Number of annotations accepted for a task in review (Enterprise
          only)</li><br><li>`filter:tasks:reviews_rejected`<br> (Number) Number
          of annotations rejected for a task in review (Enterprise
          only)</li><br><li>`filter:tasks:total_annotations`<br> (Number) Total
          number of annotations on a
          task</li><br><li>`filter:tasks:total_predictions`<br> (Number) Total
          number of predictions for the
          task</li><br><li>`filter:tasks:unresolved_comment_count`<br> (Number)
          Number of unresolved comments in a
          task</li><br><li>`filter:tasks:updated_at`<br> (Datetime) Time the
          task was updated at (e.g. new annotation was created, review added,
          etc)</li>
      operator:
        type: ViewsUpdateRequestDataFiltersItemsItemOperator
        docs: >-
          Filter operator. Possible values:<br><li>`contains`<br>
          Contains</li><br><li>`ends_with`<br> Ends with</li><br><li>`equal`<br>
          Equal to</li><br><li>`exists`<br> Exists</li><br><li>`greater`<br>
          Greater than</li><br><li>`greater_or_equal`<br> Greater than or equal
          to</li><br><li>`in`<br> Is between min and max values, so the filter
          `value` should be e.g. `{"min": 1, "max": 7}`</li><br><li>`less`<br>
          Less than</li><br><li>`less_or_equal`<br> Less than or equal
          to</li><br><li>`not_contains`<br> Does not
          contain</li><br><li>`not_equal`<br> Not equal
          to</li><br><li>`not_exists`<br> Does not
          exist</li><br><li>`not_in`<br> Is not between min and max values, so
          the filter `value` should be e.g. `{"min": 1, "max":
          7}`</li><br><li>`starts_with`<br> Starts with</li>
      type:
        type: string
        docs: >-
          Type of the filter value. Possible values:<br><li>`Boolean`<br>
          Boolean</li><br><li>`Datetime`<br> Datetime string in
          `strftime('%Y-%m-%dT%H:%M:%S.%fZ')` format</li><br><li>`List`<br> List
          of items</li><br><li>`Number`<br> Float or
          Integer</li><br><li>`String`<br> String</li><br><li>`Unknown`<br>
          Unknown is explicitly converted to string format</li>
      value:
        type: ViewsUpdateRequestDataFiltersItemsItemValue
        docs: Value to filter by
  ViewsUpdateRequestDataFilters:
    docs: >-
      Filters to apply on tasks. You can use [the helper class `Filters` from
      this page](https://labelstud.io/sdk/data_manager.html) to create Data
      Manager Filters.<br>Example: `{"conjunction": "or", "items": [{"filter":
      "filter:tasks:completed_at", "operator": "greater", "type": "Datetime",
      "value": "2021-01-01T00:00:00.000Z"}]}`
    properties:
      conjunction:
        type: ViewsUpdateRequestDataFiltersConjunction
        docs: >-
          Logical conjunction for the filters. This conjunction (either "or" or
          "and") will be applied to all items in the filters list. It is not
          possible to combine "or" and "and" within one list of filters. All
          filters will be either combined with "or" or with "and", but not a mix
          of both.
      items:
        docs: List of filter items
        type: list<ViewsUpdateRequestDataFiltersItemsItem>
  ViewsUpdateRequestDataOrderingItem:
    enum:
      - value: tasks:agreement
        name: TasksAgreement
      - value: tasks:annotations_results
        name: TasksAnnotationsResults
      - value: tasks:annotators
        name: TasksAnnotators
      - value: tasks:cancelled_annotations
        name: TasksCancelledAnnotations
      - value: tasks:comments
        name: TasksComments
      - value: tasks:completed_at
        name: TasksCompletedAt
      - value: tasks:created_at
        name: TasksCreatedAt
      - value: tasks:file_upload
        name: TasksFileUpload
      - value: tasks:ground_truth
        name: TasksGroundTruth
      - value: tasks:id
        name: TasksId
      - value: tasks:inner_id
        name: TasksInnerId
      - value: tasks:predictions_model_versions
        name: TasksPredictionsModelVersions
      - value: tasks:predictions_results
        name: TasksPredictionsResults
      - value: tasks:predictions_score
        name: TasksPredictionsScore
      - value: tasks:reviewed
        name: TasksReviewed
      - value: tasks:reviewers
        name: TasksReviewers
      - value: tasks:reviews_accepted
        name: TasksReviewsAccepted
      - value: tasks:reviews_rejected
        name: TasksReviewsRejected
      - value: tasks:total_annotations
        name: TasksTotalAnnotations
      - value: tasks:total_predictions
        name: TasksTotalPredictions
      - value: tasks:unresolved_comment_count
        name: TasksUnresolvedCommentCount
      - value: tasks:updated_at
        name: TasksUpdatedAt
  ViewsUpdateRequestData:
    docs: Custom view data
    properties:
      filters:
        type: optional<ViewsUpdateRequestDataFilters>
        docs: >-
          Filters to apply on tasks. You can use [the helper class `Filters`
          from this page](https://labelstud.io/sdk/data_manager.html) to create
          Data Manager Filters.<br>Example: `{"conjunction": "or", "items":
          [{"filter": "filter:tasks:completed_at", "operator": "greater",
          "type": "Datetime", "value": "2021-01-01T00:00:00.000Z"}]}`
      ordering:
        type: optional<list<ViewsUpdateRequestDataOrderingItem>>
        docs: >-
          List of fields to order by. Fields are similar to filters but without
          the `filter:` prefix. To reverse the order, add a minus sign before
          the field name, e.g. `-tasks:created_at`.
