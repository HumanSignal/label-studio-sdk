imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /api/storages/redis/
      method: GET
      auth: true
      docs: Get a list of all Redis import storage connections.
      source:
        openapi: openapi/openapi.yaml
      display-name: Get all import storage
      request:
        name: RedisListRequest
        query-parameters:
          ordering:
            type: optional<string>
            docs: Which field to use when ordering the results.
          project:
            type: optional<integer>
            docs: Project ID
      response:
        docs: ''
        type: list<root.RedisImportStorage>
      examples:
        - response:
            body:
              - id: 1
                type: type
                synchronizable: true
                path: path
                host: host
                port: port
                password: password
                regex_filter: regex_filter
                use_blob_urls: true
                last_sync: '2024-01-15T09:30:00Z'
                last_sync_count: 1
                last_sync_job: last_sync_job
                status: initialized
                traceback: traceback
                meta:
                  key: value
                title: title
                description: description
                created_at: '2024-01-15T09:30:00Z'
                db: 1
                project: 1
      audiences:
        - public
    create:
      path: /api/storages/redis/
      method: POST
      auth: true
      docs: Create a new Redis import storage connection.
      source:
        openapi: openapi/openapi.yaml
      display-name: Create import storage
      request:
        name: RedisCreateRequest
        body:
          properties:
            regex_filter:
              type: optional<string>
              docs: >-
                Cloud storage regex for filtering objects. You must specify it
                otherwise no objects will be imported.
            use_blob_urls:
              type: optional<boolean>
              docs: >-
                Interpret objects as BLOBs and generate URLs. For example, if
                your bucket contains images, you can use this option to generate
                URLs for these images. If set to False, it will read the content
                of the file and load it into Label Studio.
              default: false
            title:
              type: optional<string>
              docs: Storage title
              validation:
                maxLength: 2048
            description:
              type: optional<string>
              docs: Storage description
            project:
              type: optional<integer>
              docs: Project ID
            path:
              type: optional<string>
              docs: Storage prefix (optional)
            host:
              type: optional<string>
              docs: Server Host IP (optional)
            port:
              type: optional<string>
              docs: Server Port (optional)
            password:
              type: optional<string>
              docs: Server Password (optional)
        content-type: application/json
      response:
        docs: ''
        type: root.RedisImportStorage
      examples:
        - request: {}
          response:
            body:
              id: 1
              type: type
              synchronizable: true
              path: path
              host: host
              port: port
              password: password
              regex_filter: regex_filter
              use_blob_urls: true
              last_sync: '2024-01-15T09:30:00Z'
              last_sync_count: 1
              last_sync_job: last_sync_job
              status: initialized
              traceback: traceback
              meta:
                key: value
              title: title
              description: description
              created_at: '2024-01-15T09:30:00Z'
              db: 1
              project: 1
      audiences:
        - public
    get:
      path: /api/storages/redis/{id}
      method: GET
      auth: true
      docs: Get a specific Redis import storage connection.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id: integer
      display-name: Get import storage
      response:
        docs: ''
        type: root.RedisImportStorage
      examples:
        - path-parameters:
            id: 1
          response:
            body:
              id: 1
              type: type
              synchronizable: true
              path: path
              host: host
              port: port
              password: password
              regex_filter: regex_filter
              use_blob_urls: true
              last_sync: '2024-01-15T09:30:00Z'
              last_sync_count: 1
              last_sync_job: last_sync_job
              status: initialized
              traceback: traceback
              meta:
                key: value
              title: title
              description: description
              created_at: '2024-01-15T09:30:00Z'
              db: 1
              project: 1
      audiences:
        - public
    delete:
      path: /api/storages/redis/{id}
      method: DELETE
      auth: true
      docs: Delete a specific Redis import storage connection.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id: integer
      display-name: Delete import storage
      examples:
        - path-parameters:
            id: 1
      audiences:
        - public
    update:
      path: /api/storages/redis/{id}
      method: PATCH
      auth: true
      docs: Update a specific Redis import storage connection.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id: integer
      display-name: Update import storage
      request:
        name: RedisUpdateRequest
        body:
          properties:
            regex_filter:
              type: optional<string>
              docs: >-
                Cloud storage regex for filtering objects. You must specify it
                otherwise no objects will be imported.
            use_blob_urls:
              type: optional<boolean>
              docs: >-
                Interpret objects as BLOBs and generate URLs. For example, if
                your bucket contains images, you can use this option to generate
                URLs for these images. If set to False, it will read the content
                of the file and load it into Label Studio.
              default: false
            title:
              type: optional<string>
              docs: Storage title
              validation:
                maxLength: 2048
            description:
              type: optional<string>
              docs: Storage description
            project:
              type: optional<integer>
              docs: Project ID
            path:
              type: optional<string>
              docs: Storage prefix (optional)
            host:
              type: optional<string>
              docs: Server Host IP (optional)
            port:
              type: optional<string>
              docs: Server Port (optional)
            password:
              type: optional<string>
              docs: Server Password (optional)
        content-type: application/json
      response:
        docs: ''
        type: root.RedisImportStorage
      examples:
        - path-parameters:
            id: 1
          request: {}
          response:
            body:
              id: 1
              type: type
              synchronizable: true
              path: path
              host: host
              port: port
              password: password
              regex_filter: regex_filter
              use_blob_urls: true
              last_sync: '2024-01-15T09:30:00Z'
              last_sync_count: 1
              last_sync_job: last_sync_job
              status: initialized
              traceback: traceback
              meta:
                key: value
              title: title
              description: description
              created_at: '2024-01-15T09:30:00Z'
              db: 1
              project: 1
      audiences:
        - public
    sync:
      path: /api/storages/redis/{id}/sync
      method: POST
      auth: true
      docs: Sync tasks from a Redis import storage connection.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: integer
          docs: Storage ID
      display-name: Sync import storage
      response:
        docs: ''
        type: root.RedisImportStorage
      examples:
        - path-parameters:
            id: 1
          response:
            body:
              id: 1
              type: type
              synchronizable: true
              path: path
              host: host
              port: port
              password: password
              regex_filter: regex_filter
              use_blob_urls: true
              last_sync: '2024-01-15T09:30:00Z'
              last_sync_count: 1
              last_sync_job: last_sync_job
              status: initialized
              traceback: traceback
              meta:
                key: value
              title: title
              description: description
              created_at: '2024-01-15T09:30:00Z'
              db: 1
              project: 1
      audiences:
        - public
    validate:
      path: /api/storages/redis/validate
      method: POST
      auth: true
      docs: Validate a specific Redis import storage connection.
      source:
        openapi: openapi/openapi.yaml
      display-name: Validate import storage
      request:
        name: RedisValidateRequest
        body:
          properties:
            id:
              type: optional<integer>
              docs: Storage ID. If set, storage with specified ID will be updated
            regex_filter:
              type: optional<string>
              docs: >-
                Cloud storage regex for filtering objects. You must specify it
                otherwise no objects will be imported.
            use_blob_urls:
              type: optional<boolean>
              docs: >-
                Interpret objects as BLOBs and generate URLs. For example, if
                your bucket contains images, you can use this option to generate
                URLs for these images. If set to False, it will read the content
                of the file and load it into Label Studio.
              default: false
            title:
              type: optional<string>
              docs: Storage title
              validation:
                maxLength: 2048
            description:
              type: optional<string>
              docs: Storage description
            project:
              type: optional<integer>
              docs: Project ID
            path:
              type: optional<string>
              docs: Storage prefix (optional)
            host:
              type: optional<string>
              docs: Server Host IP (optional)
            port:
              type: optional<string>
              docs: Server Port (optional)
            password:
              type: optional<string>
              docs: Server Password (optional)
        content-type: application/json
      examples:
        - request: {}
      audiences:
        - public
  source:
    openapi: openapi/openapi.yaml
