imports:
  root: __package__.yml
types:
  ProjectsListResponse:
    properties:
      count: integer
      next:
        type: optional<string>
        validation:
          format: uri
      previous:
        type: optional<string>
        validation:
          format: uri
      results: list<root.Project>
  ProjectsCreateResponse:
    docs: Project
    properties:
      title:
        type: optional<string>
        docs: Project title
      description:
        type: optional<string>
        docs: Project description
      label_config:
        type: optional<string>
        docs: Label config in XML format
      expert_instruction:
        type: optional<string>
        docs: Labeling instructions to show to the user
      show_instruction:
        type: optional<boolean>
        docs: Show labeling instructions
      show_skip_button:
        type: optional<boolean>
        docs: Show skip button
      enable_empty_annotation:
        type: optional<boolean>
        docs: Allow empty annotations
      show_annotation_history:
        type: optional<boolean>
        docs: Show annotation history
      reveal_preannotations_interactively:
        type: optional<boolean>
        docs: >-
          Reveal preannotations interactively. If set to True, predictions will
          be shown to the user only after selecting the area of interest
      show_collab_predictions:
        type: optional<boolean>
        docs: Show predictions to annotators
      maximum_annotations:
        type: optional<integer>
        docs: Maximum annotations per task
      color:
        type: optional<string>
        docs: Project color in HEX format
        default: '#FFFFFF'
      control_weights:
        type: optional<map<string, unknown>>
        docs: >-
          Dict of weights for each control tag in metric calculation. Each
          control tag (e.g. label or choice) will have its own key in control
          weight dict with weight for each label and overall weight. For
          example, if a bounding box annotation with a control tag named my_bbox
          should be included with 0.33 weight in agreement calculation, and the
          first label Car should be twice as important as Airplane, then you
          need to specify: {'my_bbox': {'type': 'RectangleLabels', 'labels':
          {'Car': 1.0, 'Airplane': 0.5}, 'overall': 0.33}
  ProjectsUpdateResponse:
    docs: Project
    properties:
      title:
        type: optional<string>
        docs: Project title
      description:
        type: optional<string>
        docs: Project description
      label_config:
        type: optional<string>
        docs: Label config in XML format
      expert_instruction:
        type: optional<string>
        docs: Labeling instructions to show to the user
      show_instruction:
        type: optional<boolean>
        docs: Show labeling instructions
      show_skip_button:
        type: optional<boolean>
        docs: Show skip button
      enable_empty_annotation:
        type: optional<boolean>
        docs: Allow empty annotations
      show_annotation_history:
        type: optional<boolean>
        docs: Show annotation history
      reveal_preannotations_interactively:
        type: optional<boolean>
        docs: >-
          Reveal preannotations interactively. If set to True, predictions will
          be shown to the user only after selecting the area of interest
      show_collab_predictions:
        type: optional<boolean>
        docs: Show predictions to annotators
      maximum_annotations:
        type: optional<integer>
        docs: Maximum annotations per task
      color:
        type: optional<string>
        docs: Project color in HEX format
        default: '#FFFFFF'
      control_weights:
        type: optional<map<string, unknown>>
        docs: >-
          Dict of weights for each control tag in metric calculation. Each
          control tag (e.g. label or choice) will have its own key in control
          weight dict with weight for each label and overall weight. For
          example, if a bounding box annotation with a control tag named my_bbox
          should be included with 0.33 weight in agreement calculation, and the
          first label Car should be twice as important as Airplane, then you
          need to specify: {'my_bbox': {'type': 'RectangleLabels', 'labels':
          {'Car': 1.0, 'Airplane': 0.5}, 'overall': 0.33}
  ProjectsImportTasksResponse:
    docs: Task creation response
    properties:
      task_count:
        type: optional<integer>
        docs: Number of tasks added
      annotation_count:
        type: optional<integer>
        docs: Number of annotations added
      predictions_count:
        type: optional<integer>
        docs: Number of predictions added
      duration:
        type: optional<double>
        docs: Time in seconds to create
      file_upload_ids:
        type: optional<list<integer>>
        docs: Database IDs of uploaded files
      could_be_tasks_list:
        type: optional<boolean>
        docs: Whether uploaded files can contain lists of tasks, like CSV/TSV files
      found_formats:
        type: optional<list<string>>
        docs: The list of found file formats
      data_columns:
        type: optional<list<string>>
        docs: The list of found data columns
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /api/projects/
      method: GET
      auth: true
      docs: >

        Return a list of the projects within your organization.


        To perform most tasks with the Label Studio API, you must specify the
        project ID, sometimes referred to as the `pk`. The project ID can be
        found in the URL when viewing the project in Label Studio, or you can
        retrieve all project IDs using this API call. 


        To retrieve a list of your Label Studio projects, update the following
        command to match your own environment.

        Replace the domain name, port, and authorization token, then run the
        following from the command line:

        ```bash

        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization:
        Token abc123'

        ```
      pagination:
        offset: $request.page
        results: $response.results
      display-name: List all projects
      request:
        name: ProjectsListRequest
        query-parameters:
          ordering:
            type: optional<string>
            docs: Which field to use when ordering the results.
          ids:
            type: optional<string>
            docs: ids
          title:
            type: optional<string>
            docs: title
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
      response:
        docs: ''
        type: ProjectsListResponse
      examples:
        - response:
            body:
              count: 1
              next: next
              previous: previous
              results:
                - id: 1
                  title: title
                  description: description
                  label_config: label_config
                  expert_instruction: expert_instruction
                  show_instruction: true
                  show_skip_button: true
                  enable_empty_annotation: true
                  show_annotation_history: true
                  organization: 1
                  color: color
                  maximum_annotations: 1
                  is_published: true
                  model_version: model_version
                  is_draft: true
                  created_at: '2024-01-15T09:30:00Z'
                  min_annotations_to_start_training: 1
                  start_training_on_annotation_update: start_training_on_annotation_update
                  show_collab_predictions: true
                  num_tasks_with_annotations: 1
                  task_number: 1
                  useful_annotation_number: 1
                  ground_truth_number: 1
                  skipped_annotations_number: 1
                  total_annotations_number: 1
                  total_predictions_number: 1
                  sampling: Sequential sampling
                  show_ground_truth_first: true
                  show_overlap_first: true
                  overlap_cohort_percentage: 1
                  task_data_login: task_data_login
                  task_data_password: task_data_password
                  control_weights:
                    key: value
                  parsed_label_config:
                    key: value
                  evaluate_predictions_automatically: true
                  config_has_control_tags: config_has_control_tags
                  skip_queue: REQUEUE_FOR_ME
                  reveal_preannotations_interactively: true
                  pinned_at: '2024-01-15T09:30:00Z'
                  finished_task_number: 1
                  queue_total: queue_total
                  queue_done: queue_done
      audiences:
        - public
    create:
      path: /api/projects/
      method: POST
      auth: true
      docs: >

        Create a project and set up the labeling interface. For more information
        about setting up projects, see the following:

        * [Create and configure
        projects](https://labelstud.io/guide/setup_project)

        * [Configure labeling interface](https://labelstud.io/guide/setup)

        * [Project settings](https://labelstud.io/guide/project_settings)


        ```bash

        curl -H Content-Type:application/json -H 'Authorization: Token abc123'
        -X POST 'https://localhost:8080/api/projects'     --data
        '{"label_config": "<View>[...]</View>"}'

        ```
      display-name: Create new project
      request:
        name: ProjectsCreateRequest
        body:
          properties:
            title:
              type: optional<string>
              docs: Project title
            description:
              type: optional<string>
              docs: Project description
            label_config:
              type: optional<string>
              docs: Label config in XML format
            expert_instruction:
              type: optional<string>
              docs: Labeling instructions to show to the user
            show_instruction:
              type: optional<boolean>
              docs: Show labeling instructions
            show_skip_button:
              type: optional<boolean>
              docs: Show skip button
            enable_empty_annotation:
              type: optional<boolean>
              docs: Allow empty annotations
            show_annotation_history:
              type: optional<boolean>
              docs: Show annotation history
            reveal_preannotations_interactively:
              type: optional<boolean>
              docs: >-
                Reveal preannotations interactively. If set to True, predictions
                will be shown to the user only after selecting the area of
                interest
            show_collab_predictions:
              type: optional<boolean>
              docs: Show predictions to annotators
            maximum_annotations:
              type: optional<integer>
              docs: Maximum annotations per task
            color:
              type: optional<string>
              docs: Project color in HEX format
              default: '#FFFFFF'
            control_weights:
              type: optional<map<string, unknown>>
              docs: >-
                Dict of weights for each control tag in metric calculation. Each
                control tag (e.g. label or choice) will have its own key in
                control weight dict with weight for each label and overall
                weight. For example, if a bounding box annotation with a control
                tag named my_bbox should be included with 0.33 weight in
                agreement calculation, and the first label Car should be twice
                as important as Airplane, then you need to specify: {'my_bbox':
                {'type': 'RectangleLabels', 'labels': {'Car': 1.0, 'Airplane':
                0.5}, 'overall': 0.33}
            workspace:
              type: optional<integer>
              docs: Workspace ID
            model_version:
              type: optional<string>
              docs: Model version
      response:
        docs: ''
        type: ProjectsCreateResponse
      examples:
        - request: {}
          response:
            body:
              title: My project
              description: My first project
              label_config: <View>[...]</View>
              expert_instruction: Label all cats
              show_instruction: true
              show_skip_button: true
              enable_empty_annotation: true
              show_annotation_history: true
              reveal_preannotations_interactively: true
              show_collab_predictions: true
              maximum_annotations: 1
              color: color
              control_weights:
                my_bbox:
                  type: RectangleLabels
                  labels:
                    Car: 1
                    Airplaine: 0.5
                  overall: 0.33
      audiences:
        - public
    api_projects_validate_create:
      path: /api/projects/validate/
      method: POST
      auth: true
      docs: Validate an arbitrary labeling configuration.
      display-name: Validate label config
      request:
        body: root.ProjectLabelConfig
      examples:
        - request:
            label_config: label_config
      audiences:
        - internal
    get:
      path: /api/projects/{id}/
      method: GET
      auth: true
      docs: >-
        Retrieve information about a specific project by project ID. The project
        ID can be found in the URL when viewing the project in Label Studio, or
        you can retrieve all project IDs using [List all projects](list).
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Get project by ID
      response:
        docs: Project information
        type: root.Project
      examples:
        - name: response
          path-parameters:
            id: 1
          response:
            body:
              id: 1
              title: My project
              description: My first project
              label_config: <View>[...]</View>
              expert_instruction: Label all cats
              show_instruction: true
              show_skip_button: true
              enable_empty_annotation: true
              show_annotation_history: true
              organization: 1
              color: '#FF0000'
              maximum_annotations: 1
              is_published: true
              model_version: 1.0.0
              is_draft: false
              created_by:
                id: 1
                first_name: Jo
                last_name: Doe
                email: manager@humansignal.com
                avatar: avatar
              created_at: '2023-08-24T14:15:22Z'
              min_annotations_to_start_training: 0
              start_training_on_annotation_update: start_training_on_annotation_update
              show_collab_predictions: true
              num_tasks_with_annotations: 10
              task_number: 100
              useful_annotation_number: 10
              ground_truth_number: 5
              skipped_annotations_number: 0
              total_annotations_number: 10
              total_predictions_number: 0
              sampling: Sequential sampling
              show_ground_truth_first: true
              show_overlap_first: true
              overlap_cohort_percentage: 100
              task_data_login: user
              task_data_password: secret
              control_weights:
                key: value
              parsed_label_config:
                key: value
              evaluate_predictions_automatically: false
              config_has_control_tags: config_has_control_tags
              skip_queue: REQUEUE_FOR_ME
              reveal_preannotations_interactively: true
              pinned_at: '2023-08-24T14:15:22Z'
              finished_task_number: 10
              queue_total: queue_total
              queue_done: queue_done
      audiences:
        - public
    delete:
      path: /api/projects/{id}/
      method: DELETE
      auth: true
      docs: >

        Delete a project by specified project ID. Deleting a project permanently
        removes all tasks, annotations, and project data from Label Studio.


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](list). 
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Delete project
      examples:
        - path-parameters:
            id: 1
      audiences:
        - public
    update:
      path: /api/projects/{id}/
      method: PATCH
      auth: true
      docs: >

        Update the project settings for a specific project. For more
        information, see the following:

        * [Create and configure
        projects](https://labelstud.io/guide/setup_project)

        * [Configure labeling interface](https://labelstud.io/guide/setup)

        * [Project settings](https://labelstud.io/guide/project_settings)


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](list). 


        <Warning>

        If you are modifying the labeling config for project that has
        in-progress work, note the following:

        * You cannot remove labels or change the type of labeling being
        performed unless you delete any existing annotations that are using
        those labels. 

        * If you make changes to the labeling configuration, any tabs that you
        might have created in the Data Manager are removed.

        </Warning>
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Update a project
      request:
        name: ProjectsUpdateRequest
        body:
          properties:
            title:
              type: optional<string>
              docs: Project title
            description:
              type: optional<string>
              docs: Project description
            label_config:
              type: optional<string>
              docs: Label config in XML format
            expert_instruction:
              type: optional<string>
              docs: Labeling instructions to show to the user
            show_instruction:
              type: optional<boolean>
              docs: Show labeling instructions
            show_skip_button:
              type: optional<boolean>
              docs: Show skip button
            enable_empty_annotation:
              type: optional<boolean>
              docs: Allow empty annotations
            show_annotation_history:
              type: optional<boolean>
              docs: Show annotation history
            reveal_preannotations_interactively:
              type: optional<boolean>
              docs: >-
                Reveal preannotations interactively. If set to True, predictions
                will be shown to the user only after selecting the area of
                interest
            show_collab_predictions:
              type: optional<boolean>
              docs: Show predictions to annotators
            maximum_annotations:
              type: optional<integer>
              docs: Maximum annotations per task
            color:
              type: optional<string>
              docs: Project color in HEX format
              default: '#FFFFFF'
            control_weights:
              type: optional<map<string, unknown>>
              docs: >-
                Dict of weights for each control tag in metric calculation. Each
                control tag (e.g. label or choice) will have its own key in
                control weight dict with weight for each label and overall
                weight. For example, if a bounding box annotation with a control
                tag named my_bbox should be included with 0.33 weight in
                agreement calculation, and the first label Car should be twice
                as important as Airplane, then you need to specify: {'my_bbox':
                {'type': 'RectangleLabels', 'labels': {'Car': 1.0, 'Airplane':
                0.5}, 'overall': 0.33}
            workspace:
              type: optional<integer>
              docs: Workspace ID
            model_version:
              type: optional<string>
              docs: Model version
      response:
        docs: ''
        type: ProjectsUpdateResponse
      examples:
        - path-parameters:
            id: 1
          request: {}
          response:
            body:
              title: My project
              description: My first project
              label_config: <View>[...]</View>
              expert_instruction: Label all cats
              show_instruction: true
              show_skip_button: true
              enable_empty_annotation: true
              show_annotation_history: true
              reveal_preannotations_interactively: true
              show_collab_predictions: true
              maximum_annotations: 1
              color: color
              control_weights:
                my_bbox:
                  type: RectangleLabels
                  labels:
                    Car: 1
                    Airplaine: 0.5
                  overall: 0.33
      audiences:
        - public
    import_tasks:
      path: /api/projects/{id}/import
      method: POST
      auth: true
      docs: >

        Use this API endpoint to import labeling tasks in bulk. Note that each
        POST request is limited at 250K tasks and 200 MB.

        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). 


        <Note>

        Imported data is verified against a project *label_config* and must
        include all variables that were used in the *label_config*. 


        For example, if the label configuration has a *$text* variable, then
        each item in a data object must include a `text` field.

        </Note>


        There are three possible ways to import tasks with this endpoint:


        #### 1\. **POST with data**

        Send JSON tasks as POST data. Only JSON is supported for POSTing files
        directly.


        Update this example to specify your authorization token and Label Studio
        instance host, then run the following from

        the command line:


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' --data '[{"text":
        "Some text 1"}, {"text": "Some text 2"}]'

        ```


        #### 2\. **POST with files**

        Send tasks as files. You can attach multiple files with different names.


        - **JSON**: text files in JavaScript object notation format

        - **CSV**: text files with tables in Comma Separated Values format

        - **TSV**: text files with tables in Tab Separated Value format

        - **TXT**: simple text files are similar to CSV with one column and no
        header, supported for projects with one source only


        Update this example to specify your authorization token, Label Studio
        instance host, and file name and path,

        then run the following from the command line:


        ```bash

        curl -H 'Authorization: Token abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' -F
        ‘file=@path/to/my_file.csv’

        ```


        #### 3\. **POST with URL**

        You can also provide a URL to a file with labeling tasks. Supported file
        formats are the same as in option 2.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' \

        --data '[{"url": "http://example.com/test1.csv"}, {"url":
        "http://example.com/test2.csv"}]'

        ```


        <br>
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Import tasks
      request:
        body:
          docs: List of tasks to import
          type: list<map<string, unknown>>
        query-parameters:
          commit_to_project:
            type: optional<boolean>
            docs: Set to "true" to immediately commit tasks to the project.
          return_task_ids:
            type: optional<boolean>
            docs: Set to "true" to return task IDs in the response.
          preannotated_from_fields:
            type: optional<string>
            allow-multiple: true
            docs: >-
              List of fields to preannotate from the task data. For example, if
              you provide a list of `{"text": "text", "prediction": "label"}`
              items in the request, the system will create a task with the
              `text` field and a prediction with the `label` field when
              `preannoted_from_fields=["prediction"]`.
        name: ProjectsImportTasksRequest
      response:
        docs: Tasks successfully imported
        type: ProjectsImportTasksResponse
      errors:
        - root.BadRequestError
      examples:
        - path-parameters:
            id: 1
          request:
            - key: value
          response:
            body:
              task_count: 1
              annotation_count: 1
              predictions_count: 1
              duration: 1.1
              file_upload_ids:
                - 1
              could_be_tasks_list: true
              found_formats:
                - found_formats
              data_columns:
                - data_columns
      audiences:
        - public
    api_projects_reimports_read:
      path: /api/projects/{id}/reimports/{reimport_pk}/
      method: GET
      auth: true
      docs: Return data related to async project reimport operation
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project reimport.
        reimport_pk: string
      display-name: Get project reimport info
      response:
        docs: ''
        type: root.ProjectReimport
      examples:
        - path-parameters:
            id: 1
            reimport_pk: reimport_pk
          response:
            body:
              id: 1
              status: created
              error: error
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                key: value
              files_as_tasks_list: true
              found_formats:
                key: value
              data_columns:
                key: value
              traceback: traceback
              project: 1
      audiences:
        - internal
    api_projects_tasks_list:
      path: /api/projects/{id}/tasks/
      method: GET
      auth: true
      docs: >

        Retrieve a paginated list of tasks for a specific project. For example,
        use the following cURL command:

        ```bash

        curl -X GET
        https://localhost:8080/api/projects/{id}/tasks/?page=1&page_size=10 -H
        'Authorization: Token abc123'

        ```
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: List project tasks
      request:
        name: ApiProjectsTasksListRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: '[or "start"] current page'
          page_size:
            type: optional<integer>
            docs: >-
              [or "length"] tasks per page, use -1 to obtain all tasks (in this
              case "page" has no effect and this operation might be slow)
      examples:
        - path-parameters:
            id: 1
      audiences:
        - internal
    validate_config:
      path: /api/projects/{id}/validate/
      method: POST
      auth: true
      docs: >

        Determine whether the label configuration for a specific project is
        valid. For more information about setting up labeling configs, see
        [Configure labeling interface](https://labelstud.io/guide/setup) and our
        [Tags reference](https://labelstud.io/tags/).


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](list). 
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Validate project labeling config
      request:
        body: root.ProjectLabelConfig
      response:
        docs: ''
        type: root.ProjectLabelConfig
      examples:
        - path-parameters:
            id: 1
          request:
            label_config: label_config
          response:
            body:
              label_config: label_config
      audiences:
        - public
