imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create_many_status:
      path: /api/projects/{id}/imports/{import_pk}/
      method: GET
      auth: true
      docs: >

        Get information about an async project import operation. This can be
        especially useful to monitor status, as large import jobs can take
        time. 


        You will need the project ID and the unique ID of the import operation. 


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). 


        The import ID is returned as part of the response when you call [Import
        tasks](import-tasks). 
      path-parameters:
        id:
          type: integer
          docs: The project ID.
        import_pk: string
      display-name: Get project import info
      response:
        docs: ''
        type: root.ProjectImport
      examples:
        - path-parameters:
            id: 1
            import_pk: import_pk
          response:
            body:
              id: 1
              preannotated_from_fields:
                preannotated_from_fields:
                  key: value
              commit_to_project: true
              return_task_ids: true
              status: created
              url: url
              traceback: traceback
              error: error
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              finished_at: '2024-01-15T09:30:00Z'
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                file_upload_ids:
                  key: value
              could_be_tasks_list: true
              found_formats:
                found_formats:
                  key: value
              data_columns:
                data_columns:
                  key: value
              tasks:
                tasks:
                  key: value
              task_ids:
                task_ids:
                  key: value
              project: 1
      audiences:
        - public
    delete_all_tasks:
      path: /api/projects/{id}/tasks/
      method: DELETE
      auth: true
      docs: >

        Delete all tasks from a specific project.


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). 
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Delete all tasks
      examples:
        - path-parameters:
            id: 1
      audiences:
        - public
    list:
      path: /api/tasks/
      method: GET
      auth: true
      docs: >

        Retrieve a list of tasks. 


        You can use the query parameters to filter the list by project and/or
        view (a tab within the Data Manager). You can also optionally add
        pagination to make the response easier to parse. 


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). The view ID can be found using [List
        views](../views/list).
      pagination:
        offset: $request.page
        results: $response.tasks
      display-name: Get task list
      request:
        name: TasksListRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
          view:
            type: optional<integer>
            docs: View ID
          project:
            type: optional<integer>
            docs: Project ID
          resolve_uri:
            type: optional<boolean>
            docs: Resolve task data URIs using Cloud Storage
          fields:
            type: optional<TasksListRequestFields>
            docs: >-
              Set to "all" if you want to include annotations and predictions in
              the response
          review:
            type: optional<boolean>
            docs: Get tasks for review
          include:
            type: optional<string>
            docs: Specify which fields to include in the response
          query:
            type: optional<string>
            docs: >-
              Additional query to filter tasks. It must be JSON encoded string
              of dict containing one of the following parameters: `{"filters":
              ..., "selectedItems": ..., "ordering": ...}`. Check [Data Manager
              > Create View > see `data`
              field](#tag/Data-Manager/operation/api_dm_views_create) for more
              details about filters, selectedItems and ordering.


              * **filters**: dict with `"conjunction"` string (`"or"` or
              `"and"`) and list of filters in `"items"` array. Each filter is a
              dictionary with keys: `"filter"`, `"operator"`, `"type"`,
              `"value"`. [Read more about available
              filters](https://labelstud.io/sdk/data_manager.html)<br/>                  
              Example: `{"conjunction": "or", "items": [{"filter":
              "filter:tasks:completed_at", "operator": "greater", "type":
              "Datetime", "value": "2021-01-01T00:00:00.000Z"}]}`

              * **selectedItems**: dictionary with keys: `"all"`, `"included"`,
              `"excluded"`. If "all" is `false`, `"included"` must be used. If
              "all" is `true`, `"excluded"` must be used.<br/>                  
              Examples: `{"all": false, "included": [1, 2, 3]}` or `{"all":
              true, "excluded": [4, 5]}`

              * **ordering**: list of fields to order by. Currently, ordering is
              supported by only one parameter. <br/>
                                 Example: `["completed_at"]`
      response:
        docs: List of Tasks
        type: TasksListResponse
      examples:
        - name: response
          response:
            body:
              tasks:
                - id: 1
                  predictions:
                    - result:
                        '0':
                          from_name: sentiment
                          to_name: text
                          type: choices
                          value:
                            value:
                              choices:
                                '0': POSITIVE
                      score: 0.9
                      model_version: '1.0'
                      task: 1
                      created_at: '2021-01-01T00:00:00Z'
                      updated_at: '2021-01-01T00:00:00Z'
                  annotations:
                    - result:
                        '0':
                          from_name: sentiment
                          to_name: text
                          type: choices
                          value:
                            value:
                              choices:
                                '0': POSITIVE
                      created_at: '2021-01-01T00:00:00Z'
                      updated_at: '2021-01-01T00:00:00Z'
                      completed_by: 1
                      updated_by: 1
                      was_cancelled: false
                      ground_truth: false
                      lead_time: 12.34
                  drafts:
                    - {}
                  annotators:
                    - 1
                  inner_id: 1
                  cancelled_annotations: 1
                  total_annotations: 1
                  total_predictions: 1
                  completed_at: '2024-01-15T09:30:00Z'
                  file_upload: file_upload
                  storage_filename: storage_filename
                  avg_lead_time: 1.1
                  draft_exists: true
                  updated_by:
                    - {}
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
                  is_labeled: true
                  overlap: 1.1
                  comment_count: 1
                  unresolved_comment_count: 1
                  last_comment_updated_at: '2024-01-15T09:30:00Z'
                  project: 1
                  comment_authors:
                    - 1
              total: 1
              total_annotations: 1
              total_predictions: 1
      audiences:
        - public
    create:
      path: /api/tasks/
      method: POST
      auth: true
      docs: >

        Create a new labeling task in Label Studio.


        The data you provide depends on your labeling config and data type. 


        You will also need to provide a project ID. The project ID can be found
        in the URL when viewing the project in Label Studio, or you can retrieve
        all project IDs using [List all projects](../projects/list). 
      display-name: Create task
      request:
        name: TasksCreateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: Created task
        type: root.BaseTask
      examples:
        - name: response
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
    get:
      path: /api/tasks/{id}/
      method: GET
      auth: true
      docs: >

        Get task data, metadata, annotations and other attributes for a specific
        labeling task by task ID.

        The task ID is available from the Label Studio URL when viewing the
        task, or you can retrieve it programmatically with [Get task
        list](list). 
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Get task
      response:
        docs: Task
        type: root.DataManagerTaskSerializer
      examples:
        - name: response
          path-parameters:
            id: id
          response:
            body:
              id: 1
              predictions:
                - result:
                    - {}
                  score: 1.1
                  model_version: model_version
                  task: 1
                  project: 1.1
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
              annotations:
                - id: 1
                  result:
                    - {}
                  created_username: created_username
                  created_ago: created_ago
                  unique_id: unique_id
                  was_cancelled: true
                  ground_truth: true
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
                  draft_created_at: '2024-01-15T09:30:00Z'
                  lead_time: 1.1
                  import_id: 1
                  last_action: prediction
                  task: 1
                  project: 1
                  updated_by: 1
                  parent_prediction: 1
                  parent_annotation: 1
                  last_created_by: 1
              drafts:
                - result:
                    - {}
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
              annotators:
                - 1
              inner_id: 1
              cancelled_annotations: 0
              total_annotations: 0
              total_predictions: 0
              completed_at: '2024-01-15T09:30:00Z'
              annotations_results: annotations_results
              predictions_results: predictions_results
              predictions_score: 1.1
              file_upload: 42d46c4c-my-pic.jpeg
              storage_filename: storage_filename
              annotations_ids: annotations_ids
              predictions_model_versions: predictions_model_versions
              avg_lead_time: 1.1
              draft_exists: true
              updated_by:
                - user_id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              comment_authors:
                - 1
      audiences:
        - public
    delete:
      path: /api/tasks/{id}/
      method: DELETE
      auth: true
      docs: >

        Delete a task in Label Studio. 


        You will need the task ID. This is available from the Label Studio URL
        when viewing the task, or you can retrieve it programmatically with [Get
        task list](list). 


        <Warning>This action cannot be undone.</Warning>
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Delete task
      examples:
        - path-parameters:
            id: id
      audiences:
        - public
    update:
      path: /api/tasks/{id}/
      method: PATCH
      auth: true
      docs: >

        Update the attributes of an existing labeling task.


        You will need the task ID. This is available from the Label Studio URL
        when viewing the task, or you can retrieve it programmatically with [Get
        task list](list). 
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Update task
      request:
        name: TasksUpdateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: Updated task
        type: root.BaseTask
      examples:
        - name: response
          path-parameters:
            id: id
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
types:
  TasksListRequestFields:
    enum:
      - all
      - task_only
  TasksListResponse:
    properties:
      tasks:
        type: optional<list<root.Task>>
        docs: >-
          List of tasks, each task contains predictions and annotations if
          `fields` query parameter is set to `all`
      total:
        type: optional<integer>
        docs: Total number of tasks
      total_annotations:
        type: optional<integer>
        docs: Total number of annotations
      total_predictions:
        type: optional<integer>
        docs: Total number of predictions
