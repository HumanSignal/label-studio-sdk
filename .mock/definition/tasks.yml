imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create_many_status:
      path: /api/projects/{id}/imports/{import_pk}/
      method: GET
      auth: true
      docs: Return data related to async project import operation
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project import.
        import_pk: integer
      display-name: Get project import info
      response:
        docs: ''
        type: root.ProjectImport
      examples:
        - path-parameters:
            id: 1
            import_pk: 1
          response:
            body:
              annotation_count: 1
              commit_to_project: true
              could_be_tasks_list: true
              created_at: '2024-01-15T09:30:00Z'
              data_columns:
                key: value
              duration: 1
              error: error
              file_upload_ids:
                key: value
              finished_at: '2024-01-15T09:30:00Z'
              found_formats:
                key: value
              id: 1
              preannotated_from_fields:
                key: value
              prediction_count: 1
              project: 1
              return_task_ids: true
              status: created
              task_count: 1
              task_ids:
                key: value
              tasks:
                key: value
              updated_at: '2024-01-15T09:30:00Z'
              url: url
      audiences:
        - public
    delete_all_tasks:
      path: /api/projects/{id}/tasks/
      method: DELETE
      auth: true
      docs: Delete all tasks from a specific project.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Delete all tasks
      examples:
        - path-parameters:
            id: 1
      audiences:
        - public
    list:
      path: /api/tasks/
      method: GET
      auth: true
      docs: >-
        Retrieve a paginated list of tasks. The response format varies based on
        the user's role in the organization:

        - **Admin/Owner**: Full task details with all annotations, reviews, and
        metadata

        - **Reviewer**: Task details optimized for review workflow

        - **Annotator**: Task details filtered to show only user's own
        annotations and assignments
      pagination:
        offset: $request.page
        results: $response.tasks
      source:
        openapi: openapi/openapi.yaml
      display-name: List tasks
      request:
        name: TasksListRequest
        query-parameters:
          fields:
            type: optional<TasksListRequestFields>
            docs: >-
              Set to "all" if you want to include annotations and predictions in
              the response. Defaults to task_only
          include:
            type: optional<string>
            docs: Specify which fields to include in the response
          only_annotated:
            type: optional<boolean>
            docs: Filter to show only tasks that have annotations
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
          project:
            type: optional<integer>
            docs: Project ID
          query:
            type: optional<string>
            docs: >-
              Additional query to filter tasks. It must be JSON encoded string
              of dict containing one of the following parameters: {"filters":
              ..., "selectedItems": ..., "ordering": ...}. Check Data Manager >
              Create View > see data field for more details about filters,
              selectedItems and ordering.


              filters: dict with "conjunction" string ("or" or "and") and list
              of filters in "items" array. Each filter is a dictionary with
              keys: "filter", "operator", "type", "value". Read more about
              available filters

              Example: {"conjunction": "or", "items": [{"filter":
              "filter:tasks:completed_at", "operator": "greater", "type":
              "Datetime", "value": "2021-01-01T00:00:00.000Z"}]}

              selectedItems: dictionary with keys: "all", "included",
              "excluded". If "all" is false, "included" must be used. If "all"
              is true, "excluded" must be used.

              Examples: {"all": false, "included": [1, 2, 3]} or {"all": true,
              "excluded": [4, 5]}

              ordering: list of fields to order by. Currently, ordering is
              supported by only one parameter.

              Example: ["completed_at"]
          resolve_uri:
            type: optional<boolean>
            docs: Resolve task data URIs using Cloud Storage
          review:
            type: optional<boolean>
            docs: Get tasks for review
          selectedItems:
            type: optional<string>
            docs: JSON string of selected task IDs for review workflow
          view:
            type: optional<integer>
            docs: View ID
      response:
        docs: ''
        type: root.PaginatedRoleBasedTaskList
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
      examples:
        - response:
            body:
              tasks:
                - agreement: agreement
                  agreement_selected: agreement_selected
                  annotations: annotations
                  annotations_ids: annotations_ids
                  annotations_results: annotations_results
                  annotators:
                    - 1
                  annotators_count: 1
                  avg_lead_time: 1.1
                  cancelled_annotations: 1
                  comment_authors:
                    - key: value
                  comment_authors_count: 1
                  comment_count: 1
                  comments: comments
                  completed_at: '2024-01-15T09:30:00Z'
                  created_at: '2024-01-15T09:30:00Z'
                  data:
                    key: value
                  draft_exists: true
                  drafts:
                    - {}
                  file_upload: file_upload
                  ground_truth: true
                  id: 1
                  inner_id: 1
                  is_labeled: true
                  last_comment_updated_at: '2024-01-15T09:30:00Z'
                  meta:
                    key: value
                  overlap: 1
                  predictions:
                    - {}
                  predictions_model_versions: predictions_model_versions
                  predictions_results: predictions_results
                  predictions_score: 1.1
                  project: 1
                  reviewed: true
                  reviewers:
                    - key: value
                  reviewers_count: 1
                  reviews_accepted: 1
                  reviews_rejected: 1
                  storage_filename: storage_filename
                  total_annotations: 1
                  total_predictions: 1
                  unresolved_comment_count: 1
                  updated_at: '2024-01-15T09:30:00Z'
                  updated_by:
                    - key: value
              total: 123
              total_annotations: 456
              total_predictions: 78
      audiences:
        - public
    create:
      path: /api/tasks/
      method: POST
      auth: true
      docs: Create a new task
      source:
        openapi: openapi/openapi.yaml
      display-name: Create a new task
      request:
        name: LseTaskRequest
        body:
          properties:
            cancelled_annotations:
              type: optional<integer>
              docs: Number of total cancelled annotations for the current task
              validation:
                min: -2147483648
                max: 2147483647
            comment_authors:
              type: optional<list<integer>>
              docs: Users who wrote comments
            comment_count:
              type: optional<integer>
              docs: Number of comments in the task including all annotations
              validation:
                min: -2147483648
                max: 2147483647
            data: unknown
            file_upload:
              type: optional<integer>
              docs: Uploaded file used as data source for this task
            inner_id:
              type: optional<long>
              docs: Internal task ID in the project, starts with 1
            is_labeled:
              type: optional<boolean>
              docs: >-
                True if the number of annotations for this task is greater than
                or equal to the number of maximum_completions for the project
            last_comment_updated_at:
              type: optional<datetime>
              docs: When the last comment was updated
            meta: optional<unknown>
            overlap:
              type: optional<integer>
              docs: Number of distinct annotators that processed the current task
              validation:
                min: -2147483648
                max: 2147483647
            project:
              type: optional<integer>
              docs: Project ID for this task
            total_annotations:
              type: optional<integer>
              docs: >-
                Number of total annotations for the current task except
                cancelled annotations
              validation:
                min: -2147483648
                max: 2147483647
            total_predictions:
              type: optional<integer>
              docs: Number of total predictions for the current task
              validation:
                min: -2147483648
                max: 2147483647
            unresolved_comment_count:
              type: optional<integer>
              docs: >-
                Number of unresolved comments in the task including all
                annotations
              validation:
                min: -2147483648
                max: 2147483647
            updated_by:
              type: optional<integer>
              docs: Last annotator or reviewer who updated this task
        content-type: application/json
      response:
        docs: ''
        type: root.LseTask
      examples:
        - name: Create Task
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              agreement: agreement
              agreement_selected: agreement_selected
              annotations: annotations
              annotations_ids: annotations_ids
              annotations_results: annotations_results
              annotators:
                - 1
              annotators_count: 1
              avg_lead_time: 1.1
              cancelled_annotations: 1
              comment_authors:
                - key: value
              comment_authors_count: 1
              comment_count: 1
              comments: comments
              completed_at: '2024-01-15T09:30:00Z'
              created_at: '2024-01-15T09:30:00Z'
              data:
                image: https://example.com/image.jpg
                text: Hello, world!
              draft_exists: true
              drafts:
                - created_at: '2024-01-15T09:30:00Z'
                  result:
                    - key: value
                  updated_at: '2024-01-15T09:30:00Z'
              file_upload: file_upload
              ground_truth: true
              id: 1
              inner_id: 1
              is_labeled: true
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              meta:
                key: value
              overlap: 1
              predictions:
                - created_at: '2024-01-15T09:30:00Z'
                  model:
                    key: value
                  model_run:
                    key: value
                  model_version: model_version
                  project: 1
                  result:
                    - key: value
                  score: 1.1
                  task: 1
                  updated_at: '2024-01-15T09:30:00Z'
              predictions_model_versions: predictions_model_versions
              predictions_results: predictions_results
              predictions_score: 1.1
              project: 1
              reviewed: true
              reviewers:
                - key: value
              reviewers_count: 1
              reviews_accepted: 1
              reviews_rejected: 1
              storage_filename: storage_filename
              total_annotations: 1
              total_predictions: 1
              unresolved_comment_count: 1
              updated_at: '2024-01-15T09:30:00Z'
              updated_by:
                - key: value
      audiences:
        - public
    get:
      path: /api/tasks/{id}/
      method: GET
      auth: true
      docs: >-
        Get task data, metadata, annotations and other attributes for a specific
        labeling task by task ID.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Get task
      response:
        docs: ''
        type: root.RoleBasedTask
      examples:
        - path-parameters:
            id: id
          response:
            body:
              agreement: agreement
              agreement_selected: agreement_selected
              annotations: annotations
              annotations_ids: annotations_ids
              annotations_results: annotations_results
              annotators:
                - 1
              annotators_count: 1
              avg_lead_time: 1.1
              cancelled_annotations: 1
              comment_authors:
                - key: value
              comment_authors_count: 1
              comment_count: 1
              comments: comments
              completed_at: '2024-01-15T09:30:00Z'
              created_at: '2024-01-15T09:30:00Z'
              data:
                key: value
              draft_exists: true
              drafts:
                - created_at: '2024-01-15T09:30:00Z'
                  result:
                    - key: value
                  updated_at: '2024-01-15T09:30:00Z'
              file_upload: file_upload
              ground_truth: true
              id: 1
              inner_id: 1
              is_labeled: true
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              meta:
                key: value
              overlap: 1
              predictions:
                - created_at: '2024-01-15T09:30:00Z'
                  model:
                    key: value
                  model_run:
                    key: value
                  model_version: model_version
                  project: 1
                  result:
                    - key: value
                  score: 1.1
                  task: 1
                  updated_at: '2024-01-15T09:30:00Z'
              predictions_model_versions: predictions_model_versions
              predictions_results: predictions_results
              predictions_score: 1.1
              project: 1
              reviewed: true
              reviewers:
                - key: value
              reviewers_count: 1
              reviews_accepted: 1
              reviews_rejected: 1
              storage_filename: storage_filename
              total_annotations: 1
              total_predictions: 1
              unresolved_comment_count: 1
              updated_at: '2024-01-15T09:30:00Z'
              updated_by:
                - key: value
      audiences:
        - public
    delete:
      path: /api/tasks/{id}/
      method: DELETE
      auth: true
      docs: Delete a task in Label Studio. This action cannot be undone!
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Delete task
      examples:
        - path-parameters:
            id: id
      audiences:
        - public
    update:
      path: /api/tasks/{id}/
      method: PATCH
      auth: true
      docs: Update the attributes of an existing labeling task.
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Update task
      request:
        name: PatchedLseTaskRequest
        body:
          properties:
            avg_lead_time: optional<double>
            cancelled_annotations: optional<integer>
            comment_count:
              type: optional<integer>
              docs: Number of comments in the task including all annotations
              validation:
                min: -2147483648
                max: 2147483647
            completed_at: optional<datetime>
            data: optional<unknown>
            draft_exists: optional<boolean>
            ground_truth: optional<boolean>
            inner_id: optional<integer>
            is_labeled:
              type: optional<boolean>
              docs: >-
                True if the number of annotations for this task is greater than
                or equal to the number of maximum_completions for the project
            last_comment_updated_at:
              type: optional<datetime>
              docs: When the last comment was updated
            meta: optional<unknown>
            overlap:
              type: optional<integer>
              docs: Number of distinct annotators that processed the current task
              validation:
                min: -2147483648
                max: 2147483647
            predictions_score: optional<double>
            project:
              type: optional<integer>
              docs: Project ID for this task
            reviewed: optional<boolean>
            reviews_accepted: optional<integer>
            reviews_rejected: optional<integer>
            total_annotations: optional<integer>
            total_predictions: optional<integer>
            unresolved_comment_count:
              type: optional<integer>
              docs: >-
                Number of unresolved comments in the task including all
                annotations
              validation:
                min: -2147483648
                max: 2147483647
        content-type: application/json
      response:
        docs: ''
        type: root.RoleBasedTask
      examples:
        - path-parameters:
            id: id
          request: {}
          response:
            body:
              agreement: agreement
              agreement_selected: agreement_selected
              annotations: annotations
              annotations_ids: annotations_ids
              annotations_results: annotations_results
              annotators:
                - 1
              annotators_count: 1
              avg_lead_time: 1.1
              cancelled_annotations: 1
              comment_authors:
                - key: value
              comment_authors_count: 1
              comment_count: 1
              comments: comments
              completed_at: '2024-01-15T09:30:00Z'
              created_at: '2024-01-15T09:30:00Z'
              data:
                key: value
              draft_exists: true
              drafts:
                - created_at: '2024-01-15T09:30:00Z'
                  result:
                    - key: value
                  updated_at: '2024-01-15T09:30:00Z'
              file_upload: file_upload
              ground_truth: true
              id: 1
              inner_id: 1
              is_labeled: true
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              meta:
                key: value
              overlap: 1
              predictions:
                - created_at: '2024-01-15T09:30:00Z'
                  model:
                    key: value
                  model_run:
                    key: value
                  model_version: model_version
                  project: 1
                  result:
                    - key: value
                  score: 1.1
                  task: 1
                  updated_at: '2024-01-15T09:30:00Z'
              predictions_model_versions: predictions_model_versions
              predictions_results: predictions_results
              predictions_score: 1.1
              project: 1
              reviewed: true
              reviewers:
                - key: value
              reviewers_count: 1
              reviews_accepted: 1
              reviews_rejected: 1
              storage_filename: storage_filename
              total_annotations: 1
              total_predictions: 1
              unresolved_comment_count: 1
              updated_at: '2024-01-15T09:30:00Z'
              updated_by:
                - key: value
      audiences:
        - public
    create_event:
      path: /api/tasks/{id}/events/
      method: POST
      auth: true
      docs: |2-

            Create a new task event to track user interactions and system events during annotation.

            This endpoint is designed to receive events from the frontend labeling interface to enable
            accurate lead time calculation and detailed annotation analytics.

            ## Event Types

            **Core Annotation Events:**
            - `annotation_loaded` - When annotation interface is loaded
            - `annotation_submitted` - When annotation is submitted
            - `annotation_updated` - When annotation is modified
            - `annotation_reviewed` - When annotation is reviewed

            **User Activity Events:**
            - `visibility_change` - When page visibility changes (tab switch, minimize)
            - `idle_detected` - When user goes idle
            - `idle_resumed` - When user returns from idle

            **Interaction Events:**
            - `region_finished_drawing` - When annotation region is completed
            - `region_deleted` - When annotation regions are removed
            - `hotkey_pressed` - When keyboard shortcuts are used

            **Media Events:**
            - `video_playback_start/end` - Video playback control
            - `audio_playback_start/end` - Audio playback control
            - `video_scrub` - Video timeline scrubbing

            ## Usage

            Events are automatically associated with the task specified in the URL path.
            The current user is automatically set as the actor. Project and organization
            are derived from the task context.

            ## Example Request

            ```json
            {
                "event_key": "annotation_loaded",
                "event_time": "2024-01-15T10:30:00Z",
                "annotation": 123,
                "meta": {
                    "annotation_count": 5,
                    "estimated_time": 300
                }
            }
            ```
            
      source:
        openapi: openapi/openapi.yaml
      path-parameters:
        id:
          type: integer
          docs: Task ID to associate the event with
      display-name: Create task event
      request:
        name: TaskEventRequest
        body:
          properties:
            annotation:
              type: optional<integer>
              docs: Annotation ID associated with this event
            annotation_draft:
              type: optional<integer>
              docs: Draft annotation ID associated with this event
            event_key:
              type: string
              docs: >-
                Event type identifier (e.g., "annotation_loaded",
                "region_finished_drawing")
              validation:
                minLength: 1
                maxLength: 255
            event_time:
              type: datetime
              docs: Timestamp when the event occurred (frontend time)
            meta: optional<unknown>
            review:
              type: optional<integer>
              docs: Review ID associated with this event
        content-type: application/json
      response:
        docs: ''
        type: root.TaskEvent
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
      examples:
        - path-parameters:
            id: 1
          request:
            event_key: event_key
            event_time: '2024-01-15T09:30:00Z'
          response:
            body:
              actor: 1
              annotation: 1
              annotation_draft: 1
              created_at: '2024-01-15T09:30:00Z'
              event_key: event_key
              event_time: '2024-01-15T09:30:00Z'
              id: 1
              meta:
                key: value
              organization: 1
              project: 1
              review: 1
              task: 1
      audiences:
        - public
  source:
    openapi: openapi/openapi.yaml
types:
  TasksListRequestFields:
    enum:
      - all
      - task_only
    source:
      openapi: openapi/openapi.yaml
