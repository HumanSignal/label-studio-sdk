imports:
  root: __package__.yml
types:
  ProjectsListResponse:
    properties:
      count: integer
      next:
        type: optional<string>
        validation:
          format: uri
      previous:
        type: optional<string>
        validation:
          format: uri
      results: list<root.Project>
  ProjectsImportTasksResponse:
    docs: Task creation response
    properties:
      task_count:
        type: optional<integer>
        docs: Number of tasks added
      annotation_count:
        type: optional<integer>
        docs: Number of annotations added
      predictions_count:
        type: optional<integer>
        docs: Number of predictions added
      duration:
        type: optional<double>
        docs: Time in seconds to create
      file_upload_ids:
        type: optional<list<integer>>
        docs: Database IDs of uploaded files
      could_be_tasks_list:
        type: optional<boolean>
        docs: Whether uploaded files can contain lists of tasks, like CSV/TSV files
      found_formats:
        type: optional<list<string>>
        docs: The list of found file formats
      data_columns:
        type: optional<list<string>>
        docs: The list of found data columns
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /api/projects/
      method: GET
      auth: true
      docs: >

        Return a list of the projects that you've created.


        To perform most tasks with the Label Studio API, you must specify the
        project ID, sometimes referred to as the `pk`.

        To retrieve a list of your Label Studio projects, update the following
        command to match your own environment.

        Replace the domain name, port, and authorization token, then run the
        following from the command line:

        ```bash

        curl -X GET https://localhost:8080/api/projects/ -H 'Authorization:
        Token abc123'

        ```
      display-name: List your projects
      request:
        name: ProjectsListRequest
        query-parameters:
          ordering:
            type: optional<string>
            docs: Which field to use when ordering the results.
          ids:
            type: optional<string>
            docs: ids
          title:
            type: optional<string>
            docs: title
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
      response:
        docs: ''
        type: ProjectsListResponse
      examples:
        - response:
            body:
              count: 1
              next: next
              previous: previous
              results:
                - id: 1
                  title: title
                  description: description
                  label_config: label_config
                  expert_instruction: expert_instruction
                  show_instruction: true
                  show_skip_button: true
                  enable_empty_annotation: true
                  show_annotation_history: true
                  organization: 1
                  color: color
                  maximum_annotations: 1
                  is_published: true
                  model_version: model_version
                  is_draft: true
                  created_at: '2024-01-15T09:30:00Z'
                  min_annotations_to_start_training: 1
                  start_training_on_annotation_update: start_training_on_annotation_update
                  show_collab_predictions: true
                  num_tasks_with_annotations: 1
                  task_number: 1
                  useful_annotation_number: 1
                  ground_truth_number: 1
                  skipped_annotations_number: 1
                  total_annotations_number: 1
                  total_predictions_number: 1
                  sampling: Sequential sampling
                  show_ground_truth_first: true
                  show_overlap_first: true
                  overlap_cohort_percentage: 1
                  task_data_login: task_data_login
                  task_data_password: task_data_password
                  parsed_label_config: parsed_label_config
                  evaluate_predictions_automatically: true
                  config_has_control_tags: config_has_control_tags
                  skip_queue: REQUEUE_FOR_ME
                  reveal_preannotations_interactively: true
                  pinned_at: '2024-01-15T09:30:00Z'
                  finished_task_number: 1
                  queue_total: queue_total
                  queue_done: queue_done
    create:
      path: /api/projects/
      method: POST
      auth: true
      docs: >

        Create a project and set up the labeling interface in Label Studio using
        the API.


        ```bash

        curl -H Content-Type:application/json -H 'Authorization: Token abc123'
        -X POST 'https://localhost:8080/api/projects'     --data
        '{"label_config": "<View>[...]</View>"}'

        ```
      display-name: Create new project
      request:
        body: root.Project
      response:
        docs: ''
        type: root.Project
      examples:
        - request: {}
          response:
            body:
              id: 1
              title: title
              description: description
              label_config: label_config
              expert_instruction: expert_instruction
              show_instruction: true
              show_skip_button: true
              enable_empty_annotation: true
              show_annotation_history: true
              organization: 1
              color: color
              maximum_annotations: 1
              is_published: true
              model_version: model_version
              is_draft: true
              created_by:
                id: 1
                first_name: first_name
                last_name: last_name
                email: email
                avatar: avatar
              created_at: '2024-01-15T09:30:00Z'
              min_annotations_to_start_training: 1
              start_training_on_annotation_update: start_training_on_annotation_update
              show_collab_predictions: true
              num_tasks_with_annotations: 1
              task_number: 1
              useful_annotation_number: 1
              ground_truth_number: 1
              skipped_annotations_number: 1
              total_annotations_number: 1
              total_predictions_number: 1
              sampling: Sequential sampling
              show_ground_truth_first: true
              show_overlap_first: true
              overlap_cohort_percentage: 1
              task_data_login: task_data_login
              task_data_password: task_data_password
              control_weights:
                control_weights:
                  key: value
              parsed_label_config: parsed_label_config
              evaluate_predictions_automatically: true
              config_has_control_tags: config_has_control_tags
              skip_queue: REQUEUE_FOR_ME
              reveal_preannotations_interactively: true
              pinned_at: '2024-01-15T09:30:00Z'
              finished_task_number: 1
              queue_total: queue_total
              queue_done: queue_done
    api_projects_validate_create:
      path: /api/projects/validate/
      method: POST
      auth: true
      docs: Validate an arbitrary labeling configuration.
      display-name: Validate label config
      request:
        body: root.ProjectLabelConfig
      examples:
        - request:
            label_config: label_config
    get:
      path: /api/projects/{id}/
      method: GET
      auth: true
      docs: Retrieve information about a project by project ID.
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Get project by ID
      response:
        docs: Project information
        type: root.Project
      examples:
        - name: response
          path-parameters:
            id: 1
          response:
            body:
              id: 1
              title: My project
              description: My first project
              label_config: <View>[...]</View>
              expert_instruction: Label all cats
              show_instruction: true
              show_skip_button: true
              enable_empty_annotation: true
              show_annotation_history: true
              organization: 1
              color: '#FF0000'
              maximum_annotations: 1
              is_published: true
              model_version: 1.0.0
              is_draft: false
              created_by:
                id: 1
                first_name: Jo
                last_name: Doe
                email: manager@humansignal.com
                avatar: avatar
              created_at: '2023-08-24T14:15:22Z'
              min_annotations_to_start_training: 0
              start_training_on_annotation_update: start_training_on_annotation_update
              show_collab_predictions: true
              num_tasks_with_annotations: 10
              task_number: 100
              useful_annotation_number: 10
              ground_truth_number: 5
              skipped_annotations_number: 0
              total_annotations_number: 10
              total_predictions_number: 0
              sampling: Sequential sampling
              show_ground_truth_first: true
              show_overlap_first: true
              overlap_cohort_percentage: 100
              task_data_login: user
              task_data_password: secret
              control_weights:
                control_weights:
                  key: value
              parsed_label_config: '{"tag": {...}}'
              evaluate_predictions_automatically: false
              config_has_control_tags: config_has_control_tags
              skip_queue: REQUEUE_FOR_ME
              reveal_preannotations_interactively: true
              pinned_at: '2023-08-24T14:15:22Z'
              finished_task_number: 10
              queue_total: queue_total
              queue_done: queue_done
    delete:
      path: /api/projects/{id}/
      method: DELETE
      auth: true
      docs: Delete a project by specified project ID.
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Delete project
      examples:
        - path-parameters:
            id: 1
    update:
      path: /api/projects/{id}/
      method: PATCH
      auth: true
      docs: Update the project settings for a specific project.
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Update project
      request:
        body: root.Project
      response:
        docs: ''
        type: root.Project
      examples:
        - path-parameters:
            id: 1
          request: {}
          response:
            body:
              id: 1
              title: title
              description: description
              label_config: label_config
              expert_instruction: expert_instruction
              show_instruction: true
              show_skip_button: true
              enable_empty_annotation: true
              show_annotation_history: true
              organization: 1
              color: color
              maximum_annotations: 1
              is_published: true
              model_version: model_version
              is_draft: true
              created_by:
                id: 1
                first_name: first_name
                last_name: last_name
                email: email
                avatar: avatar
              created_at: '2024-01-15T09:30:00Z'
              min_annotations_to_start_training: 1
              start_training_on_annotation_update: start_training_on_annotation_update
              show_collab_predictions: true
              num_tasks_with_annotations: 1
              task_number: 1
              useful_annotation_number: 1
              ground_truth_number: 1
              skipped_annotations_number: 1
              total_annotations_number: 1
              total_predictions_number: 1
              sampling: Sequential sampling
              show_ground_truth_first: true
              show_overlap_first: true
              overlap_cohort_percentage: 1
              task_data_login: task_data_login
              task_data_password: task_data_password
              control_weights:
                control_weights:
                  key: value
              parsed_label_config: parsed_label_config
              evaluate_predictions_automatically: true
              config_has_control_tags: config_has_control_tags
              skip_queue: REQUEUE_FOR_ME
              reveal_preannotations_interactively: true
              pinned_at: '2024-01-15T09:30:00Z'
              finished_task_number: 1
              queue_total: queue_total
              queue_done: queue_done
    import_tasks:
      path: /api/projects/{id}/import
      method: POST
      auth: true
      docs: >

        Import data as labeling tasks in bulk using this API endpoint. You can
        use this API endpoint to import multiple tasks.

        One POST request is limited at 250K tasks and 200 MB.


        **Note:** Imported data is verified against a project *label_config* and
        must

        include all variables that were used in the *label_config*. For example,

        if the label configuration has a *$text* variable, then each item in a
        data object

        must include a "text" field.

        <br>


        ## POST requests

        <hr style="opacity:0.3">


        There are three possible ways to import tasks with this endpoint:


        ### 1\. **POST with data**

        Send JSON tasks as POST data. Only JSON is supported for POSTing files
        directly.

        Update this example to specify your authorization token and Label Studio
        instance host, then run the following from

        the command line.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' --data '[{"text":
        "Some text 1"}, {"text": "Some text 2"}]'

        ```


        ### 2\. **POST with files**

        Send tasks as files. You can attach multiple files with different names.


        - **JSON**: text files in JavaScript object notation format

        - **CSV**: text files with tables in Comma Separated Values format

        - **TSV**: text files with tables in Tab Separated Value format

        - **TXT**: simple text files are similar to CSV with one column and no
        header, supported for projects with one source only


        Update this example to specify your authorization token, Label Studio
        instance host, and file name and path,

        then run the following from the command line:


        ```bash

        curl -H 'Authorization: Token abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' -F
        ‘file=@path/to/my_file.csv’

        ```


        ### 3\. **POST with URL**

        You can also provide a URL to a file with labeling tasks. Supported file
        formats are the same as in option 2.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' \

        --data '[{"url": "http://example.com/test1.csv"}, {"url":
        "http://example.com/test2.csv"}]'

        ```


        <br>
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Import tasks
      request:
        name: ImportApi
        body:
          properties:
            id:
              type: optional<integer>
              name: importApiId
            annotations: optional<list<root.Annotation>>
            predictions: optional<list<root.Prediction>>
            data:
              docs: >-
                User imported or uploaded data for a task. Data is formatted
                according to the project label config. You can find examples of
                data for your project on the Import page in the Label Studio
                Data Manager UI.
              type: map<string, unknown>
            meta:
              type: optional<map<string, unknown>>
              docs: >-
                Meta is user imported (uploaded) data and can be useful as input
                for an ML Backend for embeddings, advanced vectors, and other
                info. It is passed to ML during training/predicting steps.
            created_at:
              type: optional<datetime>
              docs: Time a task was created
            updated_at:
              type: optional<datetime>
              docs: Last time a task was updated
            overlap:
              type: optional<integer>
              docs: Number of distinct annotators that processed the current task
            inner_id:
              type: optional<integer>
              docs: Internal task ID in the project, starts with 1
            total_annotations:
              type: optional<integer>
              docs: >-
                Number of total annotations for the current task except
                cancelled annotations
            cancelled_annotations:
              type: optional<integer>
              docs: Number of total cancelled annotations for the current task
            total_predictions:
              type: optional<integer>
              docs: Number of total predictions for the current task
            comment_count:
              type: optional<integer>
              docs: Number of comments in the task including all annotations
            unresolved_comment_count:
              type: optional<integer>
              docs: >-
                Number of unresolved comments in the task including all
                annotations
            last_comment_updated_at:
              type: optional<datetime>
              docs: When the last comment was updated
            updated_by:
              type: optional<integer>
              docs: Last annotator or reviewer who updated this task
            file_upload:
              type: optional<integer>
              docs: Uploaded file used as data source for this task
            comment_authors:
              type: optional<list<integer>>
              docs: Users who wrote comments
      response:
        docs: Tasks successfully imported
        type: ProjectsImportTasksResponse
      errors:
        - root.BadRequestError
      examples:
        - path-parameters:
            id: 1
          request:
            data: {}
          response:
            body:
              task_count: 1
              annotation_count: 1
              predictions_count: 1
              duration: 1.1
              file_upload_ids:
                - 1
              could_be_tasks_list: true
              found_formats:
                - found_formats
              data_columns:
                - data_columns
    api_projects_imports_read:
      path: /api/projects/{id}/imports/{import_pk}/
      method: GET
      auth: true
      docs: Return data related to async project import operation
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project import.
        import_pk: string
      display-name: Get project import info
      response:
        docs: ''
        type: root.ProjectImport
      examples:
        - path-parameters:
            id: 1
            import_pk: import_pk
          response:
            body:
              id: 1
              preannotated_from_fields:
                preannotated_from_fields:
                  key: value
              commit_to_project: true
              return_task_ids: true
              status: created
              url: url
              traceback: traceback
              error: error
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              finished_at: '2024-01-15T09:30:00Z'
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                file_upload_ids:
                  key: value
              could_be_tasks_list: true
              found_formats:
                found_formats:
                  key: value
              data_columns:
                data_columns:
                  key: value
              tasks:
                tasks:
                  key: value
              task_ids:
                task_ids:
                  key: value
              project: 1
    api_projects_reimports_read:
      path: /api/projects/{id}/reimports/{reimport_pk}/
      method: GET
      auth: true
      docs: Return data related to async project reimport operation
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project reimport.
        reimport_pk: string
      display-name: Get project reimport info
      response:
        docs: ''
        type: root.ProjectReimport
      examples:
        - path-parameters:
            id: 1
            reimport_pk: reimport_pk
          response:
            body:
              id: 1
              status: created
              error: error
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                file_upload_ids:
                  key: value
              files_as_tasks_list: true
              found_formats:
                found_formats:
                  key: value
              data_columns:
                data_columns:
                  key: value
              traceback: traceback
              project: 1
    api_projects_tasks_list:
      path: /api/projects/{id}/tasks/
      method: GET
      auth: true
      docs: >

        Retrieve a paginated list of tasks for a specific project. For example,
        use the following cURL command:

        ```bash

        curl -X GET
        https://localhost:8080/api/projects/{id}/tasks/?page=1&page_size=10 -H
        'Authorization: Token abc123'

        ```
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: List project tasks
      request:
        name: ApiProjectsTasksListRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: '[or "start"] current page'
          page_size:
            type: optional<integer>
            docs: >-
              [or "length"] tasks per page, use -1 to obtain all tasks (in this
              case "page" has no effect and this operation might be slow)
      examples:
        - path-parameters:
            id: 1
    api_projects_tasks_delete:
      path: /api/projects/{id}/tasks/
      method: DELETE
      auth: true
      docs: Delete all tasks from a specific project.
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Delete all tasks
      examples:
        - path-parameters:
            id: 1
    api_projects_validate_label_config:
      path: /api/projects/{id}/validate/
      method: POST
      auth: true
      docs: >

        Determine whether the label configuration for a specific project is
        valid.
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Validate project label config
      request:
        body: root.ProjectLabelConfig
      response:
        docs: ''
        type: root.ProjectLabelConfig
      examples:
        - path-parameters:
            id: 1
          request:
            label_config: label_config
          response:
            body:
              label_config: label_config
