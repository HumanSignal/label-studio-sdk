# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.saml_settings import SamlSettings
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.project_group_request import ProjectGroupRequest
from ...types.saml_settings_update import SamlSettingsUpdate
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SamlClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> SamlSettings:
        """
        Retrieve SAML2 settings for the currently active organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SamlSettings


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.sso.saml.get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/saml/settings",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SamlSettings,
                    construct_type(
                        type_=SamlSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        *,
        projects_groups: typing.Optional[typing.Sequence[ProjectGroupRequest]] = OMIT,
        roles_groups: typing.Optional[typing.Sequence[typing.Sequence[str]]] = OMIT,
        workspaces_groups: typing.Optional[typing.Sequence[typing.Sequence[str]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SamlSettingsUpdate:
        """
        Update SAML2 settings for the currently active organization.

        Parameters
        ----------
        projects_groups : typing.Optional[typing.Sequence[ProjectGroupRequest]]

        roles_groups : typing.Optional[typing.Sequence[typing.Sequence[str]]]

        workspaces_groups : typing.Optional[typing.Sequence[typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SamlSettingsUpdate


        Examples
        --------
        from label_studio_sdk import LabelStudio, ProjectGroupRequest

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.sso.saml.update(
            projects_groups=[
                ProjectGroupRequest(
                    group="groups_test",
                    project_id=42,
                    role="Inherit",
                )
            ],
            roles_groups=[["Administrator", "groups_test"]],
            workspaces_groups=[["Default workspace", "groups_test"]],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/saml/settings",
            method="POST",
            json={
                "projects_groups": convert_and_respect_annotation_metadata(
                    object_=projects_groups, annotation=typing.Sequence[ProjectGroupRequest], direction="write"
                ),
                "roles_groups": roles_groups,
                "workspaces_groups": workspaces_groups,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SamlSettingsUpdate,
                    construct_type(
                        type_=SamlSettingsUpdate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSamlClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> SamlSettings:
        """
        Retrieve SAML2 settings for the currently active organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SamlSettings


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sso.saml.get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/saml/settings",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SamlSettings,
                    construct_type(
                        type_=SamlSettings,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        *,
        projects_groups: typing.Optional[typing.Sequence[ProjectGroupRequest]] = OMIT,
        roles_groups: typing.Optional[typing.Sequence[typing.Sequence[str]]] = OMIT,
        workspaces_groups: typing.Optional[typing.Sequence[typing.Sequence[str]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SamlSettingsUpdate:
        """
        Update SAML2 settings for the currently active organization.

        Parameters
        ----------
        projects_groups : typing.Optional[typing.Sequence[ProjectGroupRequest]]

        roles_groups : typing.Optional[typing.Sequence[typing.Sequence[str]]]

        workspaces_groups : typing.Optional[typing.Sequence[typing.Sequence[str]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SamlSettingsUpdate


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio, ProjectGroupRequest

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.sso.saml.update(
                projects_groups=[
                    ProjectGroupRequest(
                        group="groups_test",
                        project_id=42,
                        role="Inherit",
                    )
                ],
                roles_groups=[["Administrator", "groups_test"]],
                workspaces_groups=[["Default workspace", "groups_test"]],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/saml/settings",
            method="POST",
            json={
                "projects_groups": convert_and_respect_annotation_metadata(
                    object_=projects_groups, annotation=typing.Sequence[ProjectGroupRequest], direction="write"
                ),
                "roles_groups": roles_groups,
                "workspaces_groups": workspaces_groups,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SamlSettingsUpdate,
                    construct_type(
                        type_=SamlSettingsUpdate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
