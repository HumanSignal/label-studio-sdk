# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...types.type_enum import TypeEnum
from ...core.request_options import RequestOptions
from .types.assignments_bulk_assign_response import AssignmentsBulkAssignResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from ...errors.bad_request_error import BadRequestError
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.task_assignment import TaskAssignment
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AssignmentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def bulk_assign(
        self,
        id: int,
        *,
        assignee: int,
        task: int,
        selected_items: typing.Optional[bool] = None,
        type: typing.Optional[str] = None,
        users: typing.Optional[str] = None,
        task_assignment_request_type: typing.Optional[TypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssignmentsBulkAssignResponse:
        """
        Assign multiple tasks to a specific user for a specific project.

        Parameters
        ----------
        id : int

        assignee : int
            Assigned user

        task : int
            Assigned task

        selected_items : typing.Optional[bool]
            Selected items

        type : typing.Optional[str]
            Assignment type

        users : typing.Optional[str]
            Assignees

        task_assignment_request_type : typing.Optional[TypeEnum]
            Type of assignment: Annotate|Review

            * `AN` - Annotate
            * `RE` - Review

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssignmentsBulkAssignResponse
            Success

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.assignments.bulk_assign(
            id=1,
            assignee=1,
            task=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/assignees",
            method="POST",
            params={
                "selected_items": selected_items,
                "type": type,
                "users": users,
            },
            json={
                "assignee": assignee,
                "task": task,
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AssignmentsBulkAssignResponse,
                    construct_type(
                        type_=AssignmentsBulkAssignResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_assignments(
        self, id: int, task_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskAssignment:
        """
        Retrieve a list of tasks and assignees for those tasks for a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskAssignment


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.assignments.list_assignments(
            id=1,
            task_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TaskAssignment,
                    construct_type(
                        type_=TaskAssignment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def assign(
        self,
        id: int,
        task_pk: int,
        *,
        assignee: int,
        task: int,
        type: typing.Optional[TypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskAssignment:
        """
        Assign a user to a task in a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        assignee : int
            Assigned user

        task : int
            Assigned task

        type : typing.Optional[TypeEnum]
            Type of assignment: Annotate|Review

            * `AN` - Annotate
            * `RE` - Review

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskAssignment


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.assignments.assign(
            id=1,
            task_pk=1,
            assignee=1,
            task=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="POST",
            json={
                "assignee": assignee,
                "task": task,
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TaskAssignment,
                    construct_type(
                        type_=TaskAssignment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete_assignments(
        self, id: int, task_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove the assignee for a task for a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.assignments.delete_assignments(
            id=1,
            task_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_assignment(
        self,
        id: int,
        task_pk: int,
        *,
        assignee: typing.Optional[int] = OMIT,
        task: typing.Optional[int] = OMIT,
        type: typing.Optional[TypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskAssignment:
        """
        Update the assignee for a task in a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        assignee : typing.Optional[int]
            Assigned user

        task : typing.Optional[int]
            Assigned task

        type : typing.Optional[TypeEnum]
            Type of assignment: Annotate|Review

            * `AN` - Annotate
            * `RE` - Review

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskAssignment


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.assignments.update_assignment(
            id=1,
            task_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="PATCH",
            json={
                "assignee": assignee,
                "task": task,
                "type": type,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TaskAssignment,
                    construct_type(
                        type_=TaskAssignment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAssignmentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def bulk_assign(
        self,
        id: int,
        *,
        assignee: int,
        task: int,
        selected_items: typing.Optional[bool] = None,
        type: typing.Optional[str] = None,
        users: typing.Optional[str] = None,
        task_assignment_request_type: typing.Optional[TypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AssignmentsBulkAssignResponse:
        """
        Assign multiple tasks to a specific user for a specific project.

        Parameters
        ----------
        id : int

        assignee : int
            Assigned user

        task : int
            Assigned task

        selected_items : typing.Optional[bool]
            Selected items

        type : typing.Optional[str]
            Assignment type

        users : typing.Optional[str]
            Assignees

        task_assignment_request_type : typing.Optional[TypeEnum]
            Type of assignment: Annotate|Review

            * `AN` - Annotate
            * `RE` - Review

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AssignmentsBulkAssignResponse
            Success

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.assignments.bulk_assign(
                id=1,
                assignee=1,
                task=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/assignees",
            method="POST",
            params={
                "selected_items": selected_items,
                "type": type,
                "users": users,
            },
            json={
                "assignee": assignee,
                "task": task,
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AssignmentsBulkAssignResponse,
                    construct_type(
                        type_=AssignmentsBulkAssignResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_assignments(
        self, id: int, task_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TaskAssignment:
        """
        Retrieve a list of tasks and assignees for those tasks for a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskAssignment


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.assignments.list_assignments(
                id=1,
                task_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TaskAssignment,
                    construct_type(
                        type_=TaskAssignment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def assign(
        self,
        id: int,
        task_pk: int,
        *,
        assignee: int,
        task: int,
        type: typing.Optional[TypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskAssignment:
        """
        Assign a user to a task in a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        assignee : int
            Assigned user

        task : int
            Assigned task

        type : typing.Optional[TypeEnum]
            Type of assignment: Annotate|Review

            * `AN` - Annotate
            * `RE` - Review

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskAssignment


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.assignments.assign(
                id=1,
                task_pk=1,
                assignee=1,
                task=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="POST",
            json={
                "assignee": assignee,
                "task": task,
                "type": type,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TaskAssignment,
                    construct_type(
                        type_=TaskAssignment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete_assignments(
        self, id: int, task_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove the assignee for a task for a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.assignments.delete_assignments(
                id=1,
                task_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_assignment(
        self,
        id: int,
        task_pk: int,
        *,
        assignee: typing.Optional[int] = OMIT,
        task: typing.Optional[int] = OMIT,
        type: typing.Optional[TypeEnum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TaskAssignment:
        """
        Update the assignee for a task in a specific project.

        Parameters
        ----------
        id : int
            A unique integer value identifying this project.

        task_pk : int
            A unique integer value identifying this task.

        assignee : typing.Optional[int]
            Assigned user

        task : typing.Optional[int]
            Assigned task

        type : typing.Optional[TypeEnum]
            Type of assignment: Annotate|Review

            * `AN` - Annotate
            * `RE` - Review

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TaskAssignment


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.assignments.update_assignment(
                id=1,
                task_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/tasks/{jsonable_encoder(task_pk)}/assignees",
            method="PATCH",
            json={
                "assignee": assignee,
                "task": task,
                "type": type,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TaskAssignment,
                    construct_type(
                        type_=TaskAssignment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
