# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from .custom.client import CustomClient
from ...core.request_options import RequestOptions
from ...types.metric_param import MetricParam
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper
from .custom.client import AsyncCustomClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MetricsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.custom = CustomClient(client_wrapper=self._client_wrapper)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> MetricParam:
        """
        Get the current metrics configuration for a project.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetricParam
            Current metrics configuration

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.metrics.get(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/metricparam/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MetricParam,
                    construct_type(
                        type_=MetricParam,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: int,
        *,
        additional_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        agreement_threshold: typing.Optional[int] = OMIT,
        max_additional_annotators_assignable: typing.Optional[int] = OMIT,
        metric_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MetricParam:
        """
        Update metrics strategy and parameters for a project.

        Parameters
        ----------
        id : int

        additional_params : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        agreement_threshold : typing.Optional[int]

        max_additional_annotators_assignable : typing.Optional[int]

        metric_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetricParam
            Updated metrics configuration

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.metrics.update(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/metricparam/",
            method="POST",
            json={
                "additional_params": additional_params,
                "agreement_threshold": agreement_threshold,
                "max_additional_annotators_assignable": max_additional_annotators_assignable,
                "metric_name": metric_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MetricParam,
                    construct_type(
                        type_=MetricParam,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMetricsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.custom = AsyncCustomClient(client_wrapper=self._client_wrapper)

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> MetricParam:
        """
        Get the current metrics configuration for a project.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetricParam
            Current metrics configuration

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.metrics.get(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/metricparam/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MetricParam,
                    construct_type(
                        type_=MetricParam,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: int,
        *,
        additional_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        agreement_threshold: typing.Optional[int] = OMIT,
        max_additional_annotators_assignable: typing.Optional[int] = OMIT,
        metric_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> MetricParam:
        """
        Update metrics strategy and parameters for a project.

        Parameters
        ----------
        id : int

        additional_params : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]

        agreement_threshold : typing.Optional[int]

        max_additional_annotators_assignable : typing.Optional[int]

        metric_name : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MetricParam
            Updated metrics configuration

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.metrics.update(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/metricparam/",
            method="POST",
            json={
                "additional_params": additional_params,
                "agreement_threshold": agreement_threshold,
                "max_additional_annotators_assignable": max_additional_annotators_assignable,
                "metric_name": metric_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    MetricParam,
                    construct_type(
                        type_=MetricParam,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
