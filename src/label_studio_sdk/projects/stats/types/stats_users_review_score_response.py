# This file was auto-generated by Fern from our API Definition.

from ....core.unchecked_base_model import UncheckedBaseModel
import typing
from .stats_users_review_score_response_performance_score_value import (
    StatsUsersReviewScoreResponsePerformanceScoreValue,
)
import pydantic
from .stats_users_review_score_response_review_score_value import StatsUsersReviewScoreResponseReviewScoreValue
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class StatsUsersReviewScoreResponse(UncheckedBaseModel):
    performance_score: typing.Optional[typing.Dict[str, StatsUsersReviewScoreResponsePerformanceScoreValue]] = (
        pydantic.Field(default=None)
    )
    """
    Performance scores mapped by annotator ID
    """

    review_score: typing.Optional[typing.Dict[str, StatsUsersReviewScoreResponseReviewScoreValue]] = pydantic.Field(
        default=None
    )
    """
    Review scores mapped by annotator ID
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
