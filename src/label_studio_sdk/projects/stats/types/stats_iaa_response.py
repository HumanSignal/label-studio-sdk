# This file was auto-generated by Fern from our API Definition.

from ....core.unchecked_base_model import UncheckedBaseModel
import typing_extensions
import typing
from ....core.serialization import FieldMetadata
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class StatsIaaResponse(UncheckedBaseModel):
    iaa: typing_extensions.Annotated[typing.Optional[typing.List[typing.List[float]]], FieldMetadata(alias="IAA")] = (
        pydantic.Field(default=None)
    )
    """
    Inter-Annotator Agreement matrix (2D array)
    """

    users: typing.Optional[typing.List[typing.Dict[str, typing.Optional[typing.Any]]]] = pydantic.Field(default=None)
    """
    List of users in the matrix
    """

    std: typing.Optional[float] = pydantic.Field(default=None)
    """
    Standard deviation (if requested)
    """

    common_tasks: typing.Optional[typing.List[typing.List[float]]] = pydantic.Field(default=None)
    """
    Number of common tasks between annotators (2D array)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
