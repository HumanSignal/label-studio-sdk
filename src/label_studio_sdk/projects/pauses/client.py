# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.pause import Pause
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.reason_enum import ReasonEnum
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PausesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        project_pk: int,
        user_pk: int,
        *,
        include_deleted: typing.Optional[bool] = None,
        ordering: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Pause]:
        """
        Retrieve a list of all pauses.

        Parameters
        ----------
        project_pk : int

        user_pk : int

        include_deleted : typing.Optional[bool]
            Include deleted pauses.

        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Pause]


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.pauses.list(
            project_pk=1,
            user_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/",
            method="GET",
            params={
                "include_deleted": include_deleted,
                "ordering": ordering,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Pause],
                    construct_type(
                        type_=typing.List[Pause],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        project_pk: int,
        user_pk: int,
        *,
        reason: ReasonEnum,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Create a new pause entry.

        Parameters
        ----------
        project_pk : int

        user_pk : int

        reason : ReasonEnum
            Reason for pausing

            * `MANUAL` - Manual
            * `BEHAVIOR_BASED` - Behavior-based
            * `ANNOTATOR_EVALUATION` - Annotator evaluation
            * `ANNOTATION_LIMIT` - Annotation limit
            * `CUSTOM_SCRIPT` - Custom script

        verbose_reason : typing.Optional[str]
            Detailed description of why the project is paused, will be readable by paused annotators

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.pauses.create(
            project_pk=1,
            user_pk=1,
            reason="MANUAL",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/",
            method="POST",
            json={
                "reason": reason,
                "verbose_reason": verbose_reason,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Pause,
                    construct_type(
                        type_=Pause,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: str, project_pk: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Pause:
        """
        Retrieve a specific pause by ID.

        Parameters
        ----------
        id : str

        project_pk : int

        user_pk : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.pauses.get(
            id="id",
            project_pk=1,
            user_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/{jsonable_encoder(id)}/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Pause,
                    construct_type(
                        type_=Pause,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, id: str, project_pk: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a specific pause by ID.

        Parameters
        ----------
        id : str

        project_pk : int

        user_pk : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.pauses.delete(
            id="id",
            project_pk=1,
            user_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/{jsonable_encoder(id)}/",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: str,
        project_pk: int,
        user_pk: int,
        *,
        reason: typing.Optional[ReasonEnum] = OMIT,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Partially update a pause entry by ID.

        Parameters
        ----------
        id : str

        project_pk : int

        user_pk : int

        reason : typing.Optional[ReasonEnum]
            Reason for pausing

            * `MANUAL` - Manual
            * `BEHAVIOR_BASED` - Behavior-based
            * `ANNOTATOR_EVALUATION` - Annotator evaluation
            * `ANNOTATION_LIMIT` - Annotation limit
            * `CUSTOM_SCRIPT` - Custom script

        verbose_reason : typing.Optional[str]
            Detailed description of why the project is paused, will be readable by paused annotators

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.pauses.update(
            id="id",
            project_pk=1,
            user_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/{jsonable_encoder(id)}/",
            method="PATCH",
            json={
                "reason": reason,
                "verbose_reason": verbose_reason,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Pause,
                    construct_type(
                        type_=Pause,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPausesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        project_pk: int,
        user_pk: int,
        *,
        include_deleted: typing.Optional[bool] = None,
        ordering: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Pause]:
        """
        Retrieve a list of all pauses.

        Parameters
        ----------
        project_pk : int

        user_pk : int

        include_deleted : typing.Optional[bool]
            Include deleted pauses.

        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Pause]


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.pauses.list(
                project_pk=1,
                user_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/",
            method="GET",
            params={
                "include_deleted": include_deleted,
                "ordering": ordering,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[Pause],
                    construct_type(
                        type_=typing.List[Pause],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        project_pk: int,
        user_pk: int,
        *,
        reason: ReasonEnum,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Create a new pause entry.

        Parameters
        ----------
        project_pk : int

        user_pk : int

        reason : ReasonEnum
            Reason for pausing

            * `MANUAL` - Manual
            * `BEHAVIOR_BASED` - Behavior-based
            * `ANNOTATOR_EVALUATION` - Annotator evaluation
            * `ANNOTATION_LIMIT` - Annotation limit
            * `CUSTOM_SCRIPT` - Custom script

        verbose_reason : typing.Optional[str]
            Detailed description of why the project is paused, will be readable by paused annotators

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.pauses.create(
                project_pk=1,
                user_pk=1,
                reason="MANUAL",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/",
            method="POST",
            json={
                "reason": reason,
                "verbose_reason": verbose_reason,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Pause,
                    construct_type(
                        type_=Pause,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: str, project_pk: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Pause:
        """
        Retrieve a specific pause by ID.

        Parameters
        ----------
        id : str

        project_pk : int

        user_pk : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.pauses.get(
                id="id",
                project_pk=1,
                user_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/{jsonable_encoder(id)}/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Pause,
                    construct_type(
                        type_=Pause,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, id: str, project_pk: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a specific pause by ID.

        Parameters
        ----------
        id : str

        project_pk : int

        user_pk : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.pauses.delete(
                id="id",
                project_pk=1,
                user_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/{jsonable_encoder(id)}/",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: str,
        project_pk: int,
        user_pk: int,
        *,
        reason: typing.Optional[ReasonEnum] = OMIT,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Partially update a pause entry by ID.

        Parameters
        ----------
        id : str

        project_pk : int

        user_pk : int

        reason : typing.Optional[ReasonEnum]
            Reason for pausing

            * `MANUAL` - Manual
            * `BEHAVIOR_BASED` - Behavior-based
            * `ANNOTATOR_EVALUATION` - Annotator evaluation
            * `ANNOTATION_LIMIT` - Annotation limit
            * `CUSTOM_SCRIPT` - Custom script

        verbose_reason : typing.Optional[str]
            Detailed description of why the project is paused, will be readable by paused annotators

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.pauses.update(
                id="id",
                project_pk=1,
                user_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(project_pk)}/members/{jsonable_encoder(user_pk)}/pauses/{jsonable_encoder(id)}/",
            method="PATCH",
            json={
                "reason": reason,
                "verbose_reason": verbose_reason,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Pause,
                    construct_type(
                        type_=Pause,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
