# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.pause import Pause
from .raw_client import AsyncRawPausesClient, RawPausesClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PausesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPausesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPausesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPausesClient
        """
        return self._raw_client

    def list(
        self,
        project_pk: int,
        user_pk: int,
        *,
        include_deleted: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Pause]:
        """
        Return a list of pause objects for the specified project and user.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        include_deleted : typing.Optional[bool]
            Include deleted pauses

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Pause]
            Successfully retrieved a list of pauses

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.projects.pauses.list(project_pk=1, user_pk=1, )
        """
        _response = self._raw_client.list(
            project_pk, user_pk, include_deleted=include_deleted, request_options=request_options
        )
        return _response.data

    def create(
        self,
        project_pk: int,
        user_pk: int,
        *,
        reason: str,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Create a new pause object for the specified project and user.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        reason : str

        verbose_reason : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause
            Successfully created a pause

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.projects.pauses.create(project_pk=1, user_pk=1, reason='reason', )
        """
        _response = self._raw_client.create(
            project_pk, user_pk, reason=reason, verbose_reason=verbose_reason, request_options=request_options
        )
        return _response.data

    def get(
        self, project_pk: int, user_pk: int, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Pause:
        """
        Return detailed information about a specific pause.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        id : int
            Pause ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause
            Successfully retrieved the pause

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.projects.pauses.get(project_pk=1, user_pk=1, id=1, )
        """
        _response = self._raw_client.get(project_pk, user_pk, id, request_options=request_options)
        return _response.data

    def delete(
        self, project_pk: int, user_pk: int, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove a pause from the database.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        id : int
            Pause ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.projects.pauses.delete(project_pk=1, user_pk=1, id=1, )
        """
        _response = self._raw_client.delete(project_pk, user_pk, id, request_options=request_options)
        return _response.data

    def update(
        self,
        project_pk: int,
        user_pk: int,
        id: int,
        *,
        reason: str,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Partially update one or more fields of an existing pause.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        id : int
            Pause ID

        reason : str

        verbose_reason : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause
            Successfully updated the pause (partial)

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.projects.pauses.update(project_pk=1, user_pk=1, id=1, reason='reason', )
        """
        _response = self._raw_client.update(
            project_pk, user_pk, id, reason=reason, verbose_reason=verbose_reason, request_options=request_options
        )
        return _response.data


class AsyncPausesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPausesClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPausesClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPausesClient
        """
        return self._raw_client

    async def list(
        self,
        project_pk: int,
        user_pk: int,
        *,
        include_deleted: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Pause]:
        """
        Return a list of pause objects for the specified project and user.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        include_deleted : typing.Optional[bool]
            Include deleted pauses

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Pause]
            Successfully retrieved a list of pauses

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.projects.pauses.list(project_pk=1, user_pk=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project_pk, user_pk, include_deleted=include_deleted, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        project_pk: int,
        user_pk: int,
        *,
        reason: str,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Create a new pause object for the specified project and user.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        reason : str

        verbose_reason : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause
            Successfully created a pause

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.projects.pauses.create(project_pk=1, user_pk=1, reason='reason', )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            project_pk, user_pk, reason=reason, verbose_reason=verbose_reason, request_options=request_options
        )
        return _response.data

    async def get(
        self, project_pk: int, user_pk: int, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> Pause:
        """
        Return detailed information about a specific pause.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        id : int
            Pause ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause
            Successfully retrieved the pause

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.projects.pauses.get(project_pk=1, user_pk=1, id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(project_pk, user_pk, id, request_options=request_options)
        return _response.data

    async def delete(
        self, project_pk: int, user_pk: int, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Remove a pause from the database.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        id : int
            Pause ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.projects.pauses.delete(project_pk=1, user_pk=1, id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(project_pk, user_pk, id, request_options=request_options)
        return _response.data

    async def update(
        self,
        project_pk: int,
        user_pk: int,
        id: int,
        *,
        reason: str,
        verbose_reason: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Pause:
        """
        Partially update one or more fields of an existing pause.

        Parameters
        ----------
        project_pk : int
            Project ID

        user_pk : int
            User ID

        id : int
            Pause ID

        reason : str

        verbose_reason : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Pause
            Successfully updated the pause (partial)

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.projects.pauses.update(project_pk=1, user_pk=1, id=1, reason='reason', )
        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            project_pk, user_pk, id, reason=reason, verbose_reason=verbose_reason, request_options=request_options
        )
        return _response.data
