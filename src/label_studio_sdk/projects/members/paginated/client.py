# This file was auto-generated by Fern from our API Definition.

from ....core.client_wrapper import SyncClientWrapper
import typing
from ....core.request_options import RequestOptions
from ....core.pagination import SyncPager
from ....types.paginated_project_member import PaginatedProjectMember
from ....core.jsonable_encoder import jsonable_encoder
from ....types.paginated_paginated_project_member_list import PaginatedPaginatedProjectMemberList
from ....core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ....core.api_error import ApiError
from ....core.client_wrapper import AsyncClientWrapper
from ....core.pagination import AsyncPager


class PaginatedClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        id: int,
        *,
        ids: typing.Optional[str] = None,
        implicit: typing.Optional[bool] = None,
        no_annotators: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        with_deleted: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SyncPager[PaginatedProjectMember]:
        """
        Retrieve the members for a specific project.

        Parameters
        ----------
        id : int

        ids : typing.Optional[str]
            Comma-separated list of user IDs to filter by

        implicit : typing.Optional[bool]
            Include/Exclude implicit project members in the results. If not provided, explicit + implicit members are returned.

        no_annotators : typing.Optional[bool]
            Exclude annotators from the results

        page : typing.Optional[int]
            A page number within the paginated result set.

        page_size : typing.Optional[int]
            Number of results to return per page.

        search : typing.Optional[str]
            Search term for filtering members by name, email, or username

        with_deleted : typing.Optional[bool]
            Include deleted members in the results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SyncPager[PaginatedProjectMember]


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        response = client.projects.members.paginated.list(
            id=1,
        )
        for item in response:
            yield item
        # alternatively, you can paginate page-by-page
        for page in response.iter_pages():
            yield page
        """
        page = page if page is not None else 1
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/members/paginated/",
            method="GET",
            params={
                "ids": ids,
                "implicit": implicit,
                "no_annotators": no_annotators,
                "page": page,
                "page_size": page_size,
                "search": search,
                "with_deleted": with_deleted,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedPaginatedProjectMemberList,
                    construct_type(
                        type_=PaginatedPaginatedProjectMemberList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    id,
                    ids=ids,
                    implicit=implicit,
                    no_annotators=no_annotators,
                    page=page + 1,
                    page_size=page_size,
                    search=search,
                    with_deleted=with_deleted,
                    request_options=request_options,
                )
                _items = _parsed_response.results
                return SyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPaginatedClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        id: int,
        *,
        ids: typing.Optional[str] = None,
        implicit: typing.Optional[bool] = None,
        no_annotators: typing.Optional[bool] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        with_deleted: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncPager[PaginatedProjectMember]:
        """
        Retrieve the members for a specific project.

        Parameters
        ----------
        id : int

        ids : typing.Optional[str]
            Comma-separated list of user IDs to filter by

        implicit : typing.Optional[bool]
            Include/Exclude implicit project members in the results. If not provided, explicit + implicit members are returned.

        no_annotators : typing.Optional[bool]
            Exclude annotators from the results

        page : typing.Optional[int]
            A page number within the paginated result set.

        page_size : typing.Optional[int]
            Number of results to return per page.

        search : typing.Optional[str]
            Search term for filtering members by name, email, or username

        with_deleted : typing.Optional[bool]
            Include deleted members in the results

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncPager[PaginatedProjectMember]


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            response = await client.projects.members.paginated.list(
                id=1,
            )
            async for item in response:
                yield item
            # alternatively, you can paginate page-by-page
            async for page in response.iter_pages():
                yield page


        asyncio.run(main())
        """
        page = page if page is not None else 1
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/members/paginated/",
            method="GET",
            params={
                "ids": ids,
                "implicit": implicit,
                "no_annotators": no_annotators,
                "page": page,
                "page_size": page_size,
                "search": search,
                "with_deleted": with_deleted,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _parsed_response = typing.cast(
                    PaginatedPaginatedProjectMemberList,
                    construct_type(
                        type_=PaginatedPaginatedProjectMemberList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                _has_next = True
                _get_next = lambda: self.list(
                    id,
                    ids=ids,
                    implicit=implicit,
                    no_annotators=no_annotators,
                    page=page + 1,
                    page_size=page_size,
                    search=search,
                    with_deleted=with_deleted,
                    request_options=request_options,
                )
                _items = _parsed_response.results
                return AsyncPager(has_next=_has_next, items=_items, get_next=_get_next)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
