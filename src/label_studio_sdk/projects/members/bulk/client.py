# This file was auto-generated by Fern from our API Definition.

import typing
from ....core.client_wrapper import SyncClientWrapper
from ....types.project_member_bulk_assign_roles_request import ProjectMemberBulkAssignRolesRequest
from ....core.request_options import RequestOptions
from .types.bulk_post_response import BulkPostResponse
from ....core.jsonable_encoder import jsonable_encoder
from ....core.serialization import convert_and_respect_annotation_metadata
from ....core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ....core.api_error import ApiError
from .types.bulk_delete_response import BulkDeleteResponse
from ....core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BulkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def post(
        self,
        id: int,
        *,
        all_: bool,
        search: typing.Optional[str] = None,
        excluded: typing.Optional[typing.Sequence[int]] = OMIT,
        included: typing.Optional[typing.Sequence[int]] = OMIT,
        roles: typing.Optional[typing.Sequence[ProjectMemberBulkAssignRolesRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkPostResponse:
        """
        Assign project members in bulk.

        Parameters
        ----------
        id : int

        all_ : bool

        search : typing.Optional[str]
            Search term for filtering members by name, email, or username. Only when all=True.

        excluded : typing.Optional[typing.Sequence[int]]

        included : typing.Optional[typing.Sequence[int]]

        roles : typing.Optional[typing.Sequence[ProjectMemberBulkAssignRolesRequest]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkPostResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.members.bulk.post(
            id=1,
            all_=True,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/members/bulk/",
            method="POST",
            params={
                "search": search,
            },
            json={
                "all": all_,
                "excluded": excluded,
                "included": included,
                "roles": convert_and_respect_annotation_metadata(
                    object_=roles, annotation=typing.Sequence[ProjectMemberBulkAssignRolesRequest], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkPostResponse,
                    construct_type(
                        type_=BulkPostResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, id: int, *, search: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkDeleteResponse:
        """
        Unassign project members in bulk. Allows the same request body as bulk assign.

        Parameters
        ----------
        id : int

        search : typing.Optional[str]
            Search term for filtering members by name, email, or username. Only when all=True.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDeleteResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.projects.members.bulk.delete(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/members/bulk/",
            method="DELETE",
            params={
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkDeleteResponse,
                    construct_type(
                        type_=BulkDeleteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncBulkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def post(
        self,
        id: int,
        *,
        all_: bool,
        search: typing.Optional[str] = None,
        excluded: typing.Optional[typing.Sequence[int]] = OMIT,
        included: typing.Optional[typing.Sequence[int]] = OMIT,
        roles: typing.Optional[typing.Sequence[ProjectMemberBulkAssignRolesRequest]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BulkPostResponse:
        """
        Assign project members in bulk.

        Parameters
        ----------
        id : int

        all_ : bool

        search : typing.Optional[str]
            Search term for filtering members by name, email, or username. Only when all=True.

        excluded : typing.Optional[typing.Sequence[int]]

        included : typing.Optional[typing.Sequence[int]]

        roles : typing.Optional[typing.Sequence[ProjectMemberBulkAssignRolesRequest]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkPostResponse


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.members.bulk.post(
                id=1,
                all_=True,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/members/bulk/",
            method="POST",
            params={
                "search": search,
            },
            json={
                "all": all_,
                "excluded": excluded,
                "included": included,
                "roles": convert_and_respect_annotation_metadata(
                    object_=roles, annotation=typing.Sequence[ProjectMemberBulkAssignRolesRequest], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkPostResponse,
                    construct_type(
                        type_=BulkPostResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, id: int, *, search: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> BulkDeleteResponse:
        """
        Unassign project members in bulk. Allows the same request body as bulk assign.

        Parameters
        ----------
        id : int

        search : typing.Optional[str]
            Search term for filtering members by name, email, or username. Only when all=True.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BulkDeleteResponse


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.projects.members.bulk.delete(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/projects/{jsonable_encoder(id)}/members/bulk/",
            method="DELETE",
            params={
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    BulkDeleteResponse,
                    construct_type(
                        type_=BulkDeleteResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
