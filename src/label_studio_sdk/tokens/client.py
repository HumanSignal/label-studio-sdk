# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.access_token_response import AccessTokenResponse
from ..types.api_token_response import ApiTokenResponse
from ..types.rotate_token_response import RotateTokenResponse
from .raw_client import AsyncRawTokensClient, RawTokensClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTokensClient
        """
        return self._raw_client

    def blacklist(self, *, refresh: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Blacklist a refresh token to prevent its future use.

        Parameters
        ----------
        refresh : str
            JWT refresh token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.tokens.blacklist(
            refresh="refresh",
        )
        """
        _response = self._raw_client.blacklist(refresh=refresh, request_options=request_options)
        return _response.data

    def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ApiTokenResponse]:
        """
        List all API tokens for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiTokenResponse]
            List of API tokens retrieved successfully

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.tokens.get()
        """
        _response = self._raw_client.get(request_options=request_options)
        return _response.data

    def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> ApiTokenResponse:
        """
        Create a new API token for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiTokenResponse
            Token created successfully

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.tokens.create()
        """
        _response = self._raw_client.create(request_options=request_options)
        return _response.data

    def refresh(self, *, refresh: str, request_options: typing.Optional[RequestOptions] = None) -> AccessTokenResponse:
        """
        Get a new access token, using a refresh token.

        Parameters
        ----------
        refresh : str
            JWT refresh token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessTokenResponse
            New access token created successfully

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.tokens.refresh(
            refresh="refresh",
        )
        """
        _response = self._raw_client.refresh(refresh=refresh, request_options=request_options)
        return _response.data

    def rotate(self, *, refresh: str, request_options: typing.Optional[RequestOptions] = None) -> RotateTokenResponse:
        """
        Blacklist existing refresh token, and get a new refresh token.

        Parameters
        ----------
        refresh : str
            JWT refresh token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RotateTokenResponse
            Refresh token successfully rotated

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.tokens.rotate(
            refresh="refresh",
        )
        """
        _response = self._raw_client.rotate(refresh=refresh, request_options=request_options)
        return _response.data


class AsyncTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTokensClient
        """
        return self._raw_client

    async def blacklist(self, *, refresh: str, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Blacklist a refresh token to prevent its future use.

        Parameters
        ----------
        refresh : str
            JWT refresh token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tokens.blacklist(
                refresh="refresh",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.blacklist(refresh=refresh, request_options=request_options)
        return _response.data

    async def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ApiTokenResponse]:
        """
        List all API tokens for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ApiTokenResponse]
            List of API tokens retrieved successfully

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tokens.get()


        asyncio.run(main())
        """
        _response = await self._raw_client.get(request_options=request_options)
        return _response.data

    async def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> ApiTokenResponse:
        """
        Create a new API token for the current user.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ApiTokenResponse
            Token created successfully

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tokens.create()


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request_options=request_options)
        return _response.data

    async def refresh(
        self, *, refresh: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AccessTokenResponse:
        """
        Get a new access token, using a refresh token.

        Parameters
        ----------
        refresh : str
            JWT refresh token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccessTokenResponse
            New access token created successfully

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tokens.refresh(
                refresh="refresh",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.refresh(refresh=refresh, request_options=request_options)
        return _response.data

    async def rotate(
        self, *, refresh: str, request_options: typing.Optional[RequestOptions] = None
    ) -> RotateTokenResponse:
        """
        Blacklist existing refresh token, and get a new refresh token.

        Parameters
        ----------
        refresh : str
            JWT refresh token

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RotateTokenResponse
            Refresh token successfully rotated

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.tokens.rotate(
                refresh="refresh",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.rotate(refresh=refresh, request_options=request_options)
        return _response.data
