# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.base_user import BaseUser
from .raw_client import AsyncRawUsersClient, RawUsersClient
from .types.users_get_token_response import UsersGetTokenResponse
from .types.users_reset_token_response import UsersResetTokenResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawUsersClient
        """
        return self._raw_client

    def reset_token(self, *, request_options: typing.Optional[RequestOptions] = None) -> UsersResetTokenResponse:
        """
        Reset your access token or API key. When reset, any scripts or automations you have in place will need to be updated with the new key.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsersResetTokenResponse
            User token response

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.reset_token()
        """
        _response = self._raw_client.reset_token(request_options=request_options)
        return _response.data

    def get_token(self, *, request_options: typing.Optional[RequestOptions] = None) -> UsersGetTokenResponse:
        """
        Get a access token to authenticate to the API as the current user. To find this in the Label Studio interface, click **Account & Settings** in the upper right. For more information, see [Access Token](https://labelstud.io/guide/user_account#Access-token).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsersGetTokenResponse
            User token response

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.get_token()
        """
        _response = self._raw_client.get_token(request_options=request_options)
        return _response.data

    def whoami(self, *, request_options: typing.Optional[RequestOptions] = None) -> BaseUser:
        """
        Get information about your user account, such as your username, email, and user ID.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.whoami()
        """
        _response = self._raw_client.whoami(request_options=request_options)
        return _response.data

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[BaseUser]:
        """

        List all users in your Label Studio organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BaseUser]


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        id: typing.Optional[int] = OMIT,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        initials: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        allow_newsletters: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseUser:
        """

        Create a user in Label Studio.

        Parameters
        ----------
        id : typing.Optional[int]
            User ID

        first_name : typing.Optional[str]
            First name of the user

        last_name : typing.Optional[str]
            Last name of the user

        username : typing.Optional[str]
            Username of the user

        email : typing.Optional[str]
            Email of the user

        avatar : typing.Optional[str]
            Avatar URL of the user

        initials : typing.Optional[str]
            Initials of the user

        phone : typing.Optional[str]
            Phone number of the user

        allow_newsletters : typing.Optional[bool]
            Whether the user allows newsletters

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.create()
        """
        _response = self._raw_client.create(
            id=id,
            first_name=first_name,
            last_name=last_name,
            username=username,
            email=email,
            avatar=avatar,
            initials=initials,
            phone=phone,
            allow_newsletters=allow_newsletters,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> BaseUser:
        """

        Get info about a specific Label Studio user.
        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).

        Parameters
        ----------
        id : int
            User ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.get(id=1, )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """

        Delete a specific Label Studio user.

        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).

        <Warning>Use caution when deleting a user, as this can cause issues such as breaking the "Annotated by" filter or leaving orphaned records.</Warning>

        Parameters
        ----------
        id : int
            User ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.delete(id=1, )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: int,
        *,
        users_update_request_id: typing.Optional[int] = OMIT,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        initials: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        allow_newsletters: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseUser:
        """

        Update details for a specific Label Studio user, such as their name or contact information.

        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).

        Parameters
        ----------
        id : int
            User ID

        users_update_request_id : typing.Optional[int]
            User ID

        first_name : typing.Optional[str]
            First name of the user

        last_name : typing.Optional[str]
            Last name of the user

        username : typing.Optional[str]
            Username of the user

        email : typing.Optional[str]
            Email of the user

        avatar : typing.Optional[str]
            Avatar URL of the user

        initials : typing.Optional[str]
            Initials of the user

        phone : typing.Optional[str]
            Phone number of the user

        allow_newsletters : typing.Optional[bool]
            Whether the user allows newsletters

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.users.update(id=1, )
        """
        _response = self._raw_client.update(
            id,
            users_update_request_id=users_update_request_id,
            first_name=first_name,
            last_name=last_name,
            username=username,
            email=email,
            avatar=avatar,
            initials=initials,
            phone=phone,
            allow_newsletters=allow_newsletters,
            request_options=request_options,
        )
        return _response.data


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawUsersClient
        """
        return self._raw_client

    async def reset_token(self, *, request_options: typing.Optional[RequestOptions] = None) -> UsersResetTokenResponse:
        """
        Reset your access token or API key. When reset, any scripts or automations you have in place will need to be updated with the new key.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsersResetTokenResponse
            User token response

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.reset_token()
        asyncio.run(main())
        """
        _response = await self._raw_client.reset_token(request_options=request_options)
        return _response.data

    async def get_token(self, *, request_options: typing.Optional[RequestOptions] = None) -> UsersGetTokenResponse:
        """
        Get a access token to authenticate to the API as the current user. To find this in the Label Studio interface, click **Account & Settings** in the upper right. For more information, see [Access Token](https://labelstud.io/guide/user_account#Access-token).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UsersGetTokenResponse
            User token response

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.get_token()
        asyncio.run(main())
        """
        _response = await self._raw_client.get_token(request_options=request_options)
        return _response.data

    async def whoami(self, *, request_options: typing.Optional[RequestOptions] = None) -> BaseUser:
        """
        Get information about your user account, such as your username, email, and user ID.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.whoami()
        asyncio.run(main())
        """
        _response = await self._raw_client.whoami(request_options=request_options)
        return _response.data

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[BaseUser]:
        """

        List all users in your Label Studio organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[BaseUser]


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        id: typing.Optional[int] = OMIT,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        initials: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        allow_newsletters: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseUser:
        """

        Create a user in Label Studio.

        Parameters
        ----------
        id : typing.Optional[int]
            User ID

        first_name : typing.Optional[str]
            First name of the user

        last_name : typing.Optional[str]
            Last name of the user

        username : typing.Optional[str]
            Username of the user

        email : typing.Optional[str]
            Email of the user

        avatar : typing.Optional[str]
            Avatar URL of the user

        initials : typing.Optional[str]
            Initials of the user

        phone : typing.Optional[str]
            Phone number of the user

        allow_newsletters : typing.Optional[bool]
            Whether the user allows newsletters

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.create()
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            id=id,
            first_name=first_name,
            last_name=last_name,
            username=username,
            email=email,
            avatar=avatar,
            initials=initials,
            phone=phone,
            allow_newsletters=allow_newsletters,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> BaseUser:
        """

        Get info about a specific Label Studio user.
        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).

        Parameters
        ----------
        id : int
            User ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.get(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """

        Delete a specific Label Studio user.

        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).

        <Warning>Use caution when deleting a user, as this can cause issues such as breaking the "Annotated by" filter or leaving orphaned records.</Warning>

        Parameters
        ----------
        id : int
            User ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.delete(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: int,
        *,
        users_update_request_id: typing.Optional[int] = OMIT,
        first_name: typing.Optional[str] = OMIT,
        last_name: typing.Optional[str] = OMIT,
        username: typing.Optional[str] = OMIT,
        email: typing.Optional[str] = OMIT,
        avatar: typing.Optional[str] = OMIT,
        initials: typing.Optional[str] = OMIT,
        phone: typing.Optional[str] = OMIT,
        allow_newsletters: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BaseUser:
        """

        Update details for a specific Label Studio user, such as their name or contact information.

        You will need to provide their user ID. You can find a list of all user IDs using [List users](list).

        Parameters
        ----------
        id : int
            User ID

        users_update_request_id : typing.Optional[int]
            User ID

        first_name : typing.Optional[str]
            First name of the user

        last_name : typing.Optional[str]
            Last name of the user

        username : typing.Optional[str]
            Username of the user

        email : typing.Optional[str]
            Email of the user

        avatar : typing.Optional[str]
            Avatar URL of the user

        initials : typing.Optional[str]
            Initials of the user

        phone : typing.Optional[str]
            Phone number of the user

        allow_newsletters : typing.Optional[bool]
            Whether the user allows newsletters

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BaseUser


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.users.update(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            users_update_request_id=users_update_request_id,
            first_name=first_name,
            last_name=last_name,
            username=username,
            email=email,
            avatar=avatar,
            initials=initials,
            phone=phone,
            allow_newsletters=allow_newsletters,
            request_options=request_options,
        )
        return _response.data
