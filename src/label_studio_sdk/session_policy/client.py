# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.session_timeout_policy import SessionTimeoutPolicy
from ..core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SessionPolicyClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> SessionTimeoutPolicy:
        """
        Retrieve session timeout policy for the currently active organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionTimeoutPolicy


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.session_policy.get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/session-policy/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SessionTimeoutPolicy,
                    construct_type(
                        type_=SessionTimeoutPolicy,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        *,
        max_session_age: typing.Optional[int] = OMIT,
        max_time_between_activity: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionTimeoutPolicy:
        """
        Update session timeout policy for the currently active organization.

        Parameters
        ----------
        max_session_age : typing.Optional[int]
            Number of minutes that a session can be active before needing to re-login

        max_time_between_activity : typing.Optional[int]
            Number of minutes that a session stays active without any activity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionTimeoutPolicy


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.session_policy.update()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/session-policy/",
            method="PATCH",
            json={
                "max_session_age": max_session_age,
                "max_time_between_activity": max_time_between_activity,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SessionTimeoutPolicy,
                    construct_type(
                        type_=SessionTimeoutPolicy,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSessionPolicyClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(self, *, request_options: typing.Optional[RequestOptions] = None) -> SessionTimeoutPolicy:
        """
        Retrieve session timeout policy for the currently active organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionTimeoutPolicy


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.session_policy.get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/session-policy/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SessionTimeoutPolicy,
                    construct_type(
                        type_=SessionTimeoutPolicy,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        *,
        max_session_age: typing.Optional[int] = OMIT,
        max_time_between_activity: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SessionTimeoutPolicy:
        """
        Update session timeout policy for the currently active organization.

        Parameters
        ----------
        max_session_age : typing.Optional[int]
            Number of minutes that a session can be active before needing to re-login

        max_time_between_activity : typing.Optional[int]
            Number of minutes that a session stays active without any activity

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SessionTimeoutPolicy


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.session_policy.update()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/session-policy/",
            method="PATCH",
            json={
                "max_session_age": max_session_age,
                "max_time_between_activity": max_time_between_activity,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SessionTimeoutPolicy,
                    construct_type(
                        type_=SessionTimeoutPolicy,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
