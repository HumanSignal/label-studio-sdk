# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from ...types.task import Task


class TasksListResponse(pydantic_v1.BaseModel):
    tasks: typing.Optional[typing.List[Task]] = pydantic_v1.Field(default=None)
    """
    List of tasks, each task contains predictions and annotations if `fields` query parameter is set to `all`
    """

    total: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Total number of tasks
    """

    total_annotations: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Total number of annotations
    """

    total_predictions: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Total number of predictions
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
