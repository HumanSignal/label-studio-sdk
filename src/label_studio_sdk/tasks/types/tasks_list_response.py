# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
from ...types.task import Task
import pydantic
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class TasksListResponse(UniversalBaseModel):
    tasks: typing.Optional[typing.List[Task]] = pydantic.Field(default=None)
    """
    List of tasks, each task contains predictions and annotations if `fields` query parameter is set to `all`
    """

    total: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total number of tasks
    """

    total_annotations: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total number of annotations
    """

    total_predictions: typing.Optional[int] = pydantic.Field(default=None)
    """
    Total number of predictions
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
