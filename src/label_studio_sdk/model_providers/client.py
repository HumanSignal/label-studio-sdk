# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.model_provider_connection import ModelProviderConnection
from ..types.model_provider_connection_budget_reset_period import ModelProviderConnectionBudgetResetPeriod
from ..types.model_provider_connection_created_by import ModelProviderConnectionCreatedBy
from ..types.model_provider_connection_organization import ModelProviderConnectionOrganization
from ..types.model_provider_connection_provider import ModelProviderConnectionProvider
from ..types.model_provider_connection_scope import ModelProviderConnectionScope
from .raw_client import AsyncRawModelProvidersClient, RawModelProvidersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ModelProvidersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawModelProvidersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawModelProvidersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawModelProvidersClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[ModelProviderConnection]:
        """
        Get all model provider connections created by the user in the current organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelProviderConnection]


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.model_providers.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        provider: ModelProviderConnectionProvider,
        api_key: typing.Optional[str] = OMIT,
        deployment_name: typing.Optional[str] = OMIT,
        endpoint: typing.Optional[str] = OMIT,
        scope: typing.Optional[ModelProviderConnectionScope] = OMIT,
        organization: typing.Optional[ModelProviderConnectionOrganization] = OMIT,
        created_by: typing.Optional[ModelProviderConnectionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        is_internal: typing.Optional[bool] = OMIT,
        budget_limit: typing.Optional[float] = OMIT,
        budget_last_reset_date: typing.Optional[dt.datetime] = OMIT,
        budget_reset_period: typing.Optional[ModelProviderConnectionBudgetResetPeriod] = OMIT,
        budget_total_spent: typing.Optional[float] = OMIT,
        budget_alert_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelProviderConnection:
        """
        Create a new model provider connection.

        Parameters
        ----------
        provider : ModelProviderConnectionProvider

        api_key : typing.Optional[str]

        deployment_name : typing.Optional[str]

        endpoint : typing.Optional[str]

        scope : typing.Optional[ModelProviderConnectionScope]

        organization : typing.Optional[ModelProviderConnectionOrganization]

        created_by : typing.Optional[ModelProviderConnectionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        is_internal : typing.Optional[bool]
            Whether the model provider connection is internal, not visible to the user.

        budget_limit : typing.Optional[float]
            Budget limit for the model provider connection (null if unlimited)

        budget_last_reset_date : typing.Optional[dt.datetime]
            Date and time the budget was last reset

        budget_reset_period : typing.Optional[ModelProviderConnectionBudgetResetPeriod]
            Budget reset period for the model provider connection (null if not reset)

        budget_total_spent : typing.Optional[float]
            Tracked total budget spent for the given provider connection within the current budget period

        budget_alert_threshold : typing.Optional[float]
            Budget alert threshold for the given provider connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelProviderConnection


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.model_providers.create(provider="OpenAI", )
        """
        _response = self._raw_client.create(
            provider=provider,
            api_key=api_key,
            deployment_name=deployment_name,
            endpoint=endpoint,
            scope=scope,
            organization=organization,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            is_internal=is_internal,
            budget_limit=budget_limit,
            budget_last_reset_date=budget_last_reset_date,
            budget_reset_period=budget_reset_period,
            budget_total_spent=budget_total_spent,
            budget_alert_threshold=budget_alert_threshold,
            request_options=request_options,
        )
        return _response.data

    def get(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> ModelProviderConnection:
        """
        Get a model provider connection by ID.

        Parameters
        ----------
        pk : int
            Model Provider Connection ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelProviderConnection


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.model_providers.get(pk=1, )
        """
        _response = self._raw_client.get(pk, request_options=request_options)
        return _response.data

    def delete(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a model provider connection by ID.

        Parameters
        ----------
        pk : int
            Model Provider Connection ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.model_providers.delete(pk=1, )
        """
        _response = self._raw_client.delete(pk, request_options=request_options)
        return _response.data

    def update(
        self,
        pk: int,
        *,
        provider: ModelProviderConnectionProvider,
        api_key: typing.Optional[str] = OMIT,
        deployment_name: typing.Optional[str] = OMIT,
        endpoint: typing.Optional[str] = OMIT,
        scope: typing.Optional[ModelProviderConnectionScope] = OMIT,
        organization: typing.Optional[ModelProviderConnectionOrganization] = OMIT,
        created_by: typing.Optional[ModelProviderConnectionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        is_internal: typing.Optional[bool] = OMIT,
        budget_limit: typing.Optional[float] = OMIT,
        budget_last_reset_date: typing.Optional[dt.datetime] = OMIT,
        budget_reset_period: typing.Optional[ModelProviderConnectionBudgetResetPeriod] = OMIT,
        budget_total_spent: typing.Optional[float] = OMIT,
        budget_alert_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelProviderConnection:
        """
        Update a model provider connection by ID.

        Parameters
        ----------
        pk : int
            Model Provider Connection ID

        provider : ModelProviderConnectionProvider

        api_key : typing.Optional[str]

        deployment_name : typing.Optional[str]

        endpoint : typing.Optional[str]

        scope : typing.Optional[ModelProviderConnectionScope]

        organization : typing.Optional[ModelProviderConnectionOrganization]

        created_by : typing.Optional[ModelProviderConnectionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        is_internal : typing.Optional[bool]
            Whether the model provider connection is internal, not visible to the user.

        budget_limit : typing.Optional[float]
            Budget limit for the model provider connection (null if unlimited)

        budget_last_reset_date : typing.Optional[dt.datetime]
            Date and time the budget was last reset

        budget_reset_period : typing.Optional[ModelProviderConnectionBudgetResetPeriod]
            Budget reset period for the model provider connection (null if not reset)

        budget_total_spent : typing.Optional[float]
            Tracked total budget spent for the given provider connection within the current budget period

        budget_alert_threshold : typing.Optional[float]
            Budget alert threshold for the given provider connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelProviderConnection


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.model_providers.update(pk=1, provider="OpenAI", )
        """
        _response = self._raw_client.update(
            pk,
            provider=provider,
            api_key=api_key,
            deployment_name=deployment_name,
            endpoint=endpoint,
            scope=scope,
            organization=organization,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            is_internal=is_internal,
            budget_limit=budget_limit,
            budget_last_reset_date=budget_last_reset_date,
            budget_reset_period=budget_reset_period,
            budget_total_spent=budget_total_spent,
            budget_alert_threshold=budget_alert_threshold,
            request_options=request_options,
        )
        return _response.data


class AsyncModelProvidersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawModelProvidersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawModelProvidersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawModelProvidersClient
        """
        return self._raw_client

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ModelProviderConnection]:
        """
        Get all model provider connections created by the user in the current organization.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ModelProviderConnection]


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.model_providers.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        provider: ModelProviderConnectionProvider,
        api_key: typing.Optional[str] = OMIT,
        deployment_name: typing.Optional[str] = OMIT,
        endpoint: typing.Optional[str] = OMIT,
        scope: typing.Optional[ModelProviderConnectionScope] = OMIT,
        organization: typing.Optional[ModelProviderConnectionOrganization] = OMIT,
        created_by: typing.Optional[ModelProviderConnectionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        is_internal: typing.Optional[bool] = OMIT,
        budget_limit: typing.Optional[float] = OMIT,
        budget_last_reset_date: typing.Optional[dt.datetime] = OMIT,
        budget_reset_period: typing.Optional[ModelProviderConnectionBudgetResetPeriod] = OMIT,
        budget_total_spent: typing.Optional[float] = OMIT,
        budget_alert_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelProviderConnection:
        """
        Create a new model provider connection.

        Parameters
        ----------
        provider : ModelProviderConnectionProvider

        api_key : typing.Optional[str]

        deployment_name : typing.Optional[str]

        endpoint : typing.Optional[str]

        scope : typing.Optional[ModelProviderConnectionScope]

        organization : typing.Optional[ModelProviderConnectionOrganization]

        created_by : typing.Optional[ModelProviderConnectionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        is_internal : typing.Optional[bool]
            Whether the model provider connection is internal, not visible to the user.

        budget_limit : typing.Optional[float]
            Budget limit for the model provider connection (null if unlimited)

        budget_last_reset_date : typing.Optional[dt.datetime]
            Date and time the budget was last reset

        budget_reset_period : typing.Optional[ModelProviderConnectionBudgetResetPeriod]
            Budget reset period for the model provider connection (null if not reset)

        budget_total_spent : typing.Optional[float]
            Tracked total budget spent for the given provider connection within the current budget period

        budget_alert_threshold : typing.Optional[float]
            Budget alert threshold for the given provider connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelProviderConnection


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.model_providers.create(provider="OpenAI", )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            provider=provider,
            api_key=api_key,
            deployment_name=deployment_name,
            endpoint=endpoint,
            scope=scope,
            organization=organization,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            is_internal=is_internal,
            budget_limit=budget_limit,
            budget_last_reset_date=budget_last_reset_date,
            budget_reset_period=budget_reset_period,
            budget_total_spent=budget_total_spent,
            budget_alert_threshold=budget_alert_threshold,
            request_options=request_options,
        )
        return _response.data

    async def get(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> ModelProviderConnection:
        """
        Get a model provider connection by ID.

        Parameters
        ----------
        pk : int
            Model Provider Connection ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelProviderConnection


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.model_providers.get(pk=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(pk, request_options=request_options)
        return _response.data

    async def delete(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a model provider connection by ID.

        Parameters
        ----------
        pk : int
            Model Provider Connection ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.model_providers.delete(pk=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(pk, request_options=request_options)
        return _response.data

    async def update(
        self,
        pk: int,
        *,
        provider: ModelProviderConnectionProvider,
        api_key: typing.Optional[str] = OMIT,
        deployment_name: typing.Optional[str] = OMIT,
        endpoint: typing.Optional[str] = OMIT,
        scope: typing.Optional[ModelProviderConnectionScope] = OMIT,
        organization: typing.Optional[ModelProviderConnectionOrganization] = OMIT,
        created_by: typing.Optional[ModelProviderConnectionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        is_internal: typing.Optional[bool] = OMIT,
        budget_limit: typing.Optional[float] = OMIT,
        budget_last_reset_date: typing.Optional[dt.datetime] = OMIT,
        budget_reset_period: typing.Optional[ModelProviderConnectionBudgetResetPeriod] = OMIT,
        budget_total_spent: typing.Optional[float] = OMIT,
        budget_alert_threshold: typing.Optional[float] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ModelProviderConnection:
        """
        Update a model provider connection by ID.

        Parameters
        ----------
        pk : int
            Model Provider Connection ID

        provider : ModelProviderConnectionProvider

        api_key : typing.Optional[str]

        deployment_name : typing.Optional[str]

        endpoint : typing.Optional[str]

        scope : typing.Optional[ModelProviderConnectionScope]

        organization : typing.Optional[ModelProviderConnectionOrganization]

        created_by : typing.Optional[ModelProviderConnectionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        is_internal : typing.Optional[bool]
            Whether the model provider connection is internal, not visible to the user.

        budget_limit : typing.Optional[float]
            Budget limit for the model provider connection (null if unlimited)

        budget_last_reset_date : typing.Optional[dt.datetime]
            Date and time the budget was last reset

        budget_reset_period : typing.Optional[ModelProviderConnectionBudgetResetPeriod]
            Budget reset period for the model provider connection (null if not reset)

        budget_total_spent : typing.Optional[float]
            Tracked total budget spent for the given provider connection within the current budget period

        budget_alert_threshold : typing.Optional[float]
            Budget alert threshold for the given provider connection

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ModelProviderConnection


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.model_providers.update(pk=1, provider="OpenAI", )
        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            pk,
            provider=provider,
            api_key=api_key,
            deployment_name=deployment_name,
            endpoint=endpoint,
            scope=scope,
            organization=organization,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            is_internal=is_internal,
            budget_limit=budget_limit,
            budget_last_reset_date=budget_last_reset_date,
            budget_reset_period=budget_reset_period,
            budget_total_spent=budget_total_spent,
            budget_alert_threshold=budget_alert_threshold,
            request_options=request_options,
        )
        return _response.data
