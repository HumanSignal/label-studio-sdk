# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from .ml_create_response_auth_method import MlCreateResponseAuthMethod
from ...core.pydantic_utilities import IS_PYDANTIC_V2


class MlCreateResponse(UniversalBaseModel):
    url: typing.Optional[str] = pydantic.Field(default=None)
    """
    ML backend URL
    """

    project: typing.Optional[int] = pydantic.Field(default=None)
    """
    Project ID
    """

    is_interactive: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Is interactive
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Title
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Description
    """

    auth_method: typing.Optional[MlCreateResponseAuthMethod] = pydantic.Field(default=None)
    """
    Auth method
    """

    basic_auth_user: typing.Optional[str] = pydantic.Field(default=None)
    """
    Basic auth user
    """

    basic_auth_pass: typing.Optional[str] = pydantic.Field(default=None)
    """
    Basic auth password
    """

    extra_params: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Extra parameters
    """

    timeout: typing.Optional[int] = pydantic.Field(default=None)
    """
    Response model timeout
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
