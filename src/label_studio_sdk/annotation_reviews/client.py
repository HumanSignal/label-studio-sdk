# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.annotation_review import AnnotationReview
from ..core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
import datetime as dt
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AnnotationReviewsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        annotation: typing.Optional[int] = None,
        annotation_task_project: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AnnotationReview]:
        """
        List all reviews for a specific annotation ID.

        Parameters
        ----------
        annotation : typing.Optional[int]

        annotation_task_project : typing.Optional[int]

        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AnnotationReview]


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.annotation_reviews.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/annotation-reviews/",
            method="GET",
            params={
                "annotation": annotation,
                "annotation__task__project": annotation_task_project,
                "ordering": ordering,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[AnnotationReview],
                    construct_type(
                        type_=typing.List[AnnotationReview],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        annotation: int,
        async_postprocess: typing.Optional[bool] = None,
        accepted: typing.Optional[bool] = OMIT,
        comment: typing.Optional[str] = OMIT,
        last_annotation_history: typing.Optional[int] = OMIT,
        remove_from_queue: typing.Optional[bool] = OMIT,
        result: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        started_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationReview:
        """
        Create a review for a specific annotation ID.

        Parameters
        ----------
        annotation : int
            Corresponding annotation

        async_postprocess : typing.Optional[bool]
            Whether to postprocess the review asynchronously.

        accepted : typing.Optional[bool]
            Accepted or rejected (if false) flag

        comment : typing.Optional[str]

        last_annotation_history : typing.Optional[int]

        remove_from_queue : typing.Optional[bool]

        result : typing.Optional[typing.Optional[typing.Any]]

        started_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationReview


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.annotation_reviews.create(
            annotation=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/annotation-reviews/",
            method="POST",
            params={
                "async_postprocess": async_postprocess,
            },
            json={
                "accepted": accepted,
                "annotation": annotation,
                "comment": comment,
                "last_annotation_history": last_annotation_history,
                "remove_from_queue": remove_from_queue,
                "result": result,
                "started_at": started_at,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AnnotationReview,
                    construct_type(
                        type_=AnnotationReview,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> AnnotationReview:
        """
        Retrieve a specific review by ID for an annotation.

        Parameters
        ----------
        id : int
            A unique integer value identifying this annotation review.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationReview


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.annotation_reviews.get(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/annotation-reviews/{jsonable_encoder(id)}/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AnnotationReview,
                    construct_type(
                        type_=AnnotationReview,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a review by ID

        Parameters
        ----------
        id : int
            A unique integer value identifying this annotation review.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.annotation_reviews.delete(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/annotation-reviews/{jsonable_encoder(id)}/",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: int,
        *,
        accepted: typing.Optional[bool] = OMIT,
        annotation: typing.Optional[int] = OMIT,
        comment: typing.Optional[str] = OMIT,
        last_annotation_history: typing.Optional[int] = OMIT,
        remove_from_queue: typing.Optional[bool] = OMIT,
        result: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        started_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationReview:
        """
        Update a specific review by ID.

        Parameters
        ----------
        id : int
            A unique integer value identifying this annotation review.

        accepted : typing.Optional[bool]
            Accepted or rejected (if false) flag

        annotation : typing.Optional[int]
            Corresponding annotation

        comment : typing.Optional[str]

        last_annotation_history : typing.Optional[int]

        remove_from_queue : typing.Optional[bool]

        result : typing.Optional[typing.Optional[typing.Any]]

        started_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationReview


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.annotation_reviews.update(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/annotation-reviews/{jsonable_encoder(id)}/",
            method="PATCH",
            json={
                "accepted": accepted,
                "annotation": annotation,
                "comment": comment,
                "last_annotation_history": last_annotation_history,
                "remove_from_queue": remove_from_queue,
                "result": result,
                "started_at": started_at,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AnnotationReview,
                    construct_type(
                        type_=AnnotationReview,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAnnotationReviewsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        annotation: typing.Optional[int] = None,
        annotation_task_project: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[AnnotationReview]:
        """
        List all reviews for a specific annotation ID.

        Parameters
        ----------
        annotation : typing.Optional[int]

        annotation_task_project : typing.Optional[int]

        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[AnnotationReview]


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.annotation_reviews.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/annotation-reviews/",
            method="GET",
            params={
                "annotation": annotation,
                "annotation__task__project": annotation_task_project,
                "ordering": ordering,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[AnnotationReview],
                    construct_type(
                        type_=typing.List[AnnotationReview],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        annotation: int,
        async_postprocess: typing.Optional[bool] = None,
        accepted: typing.Optional[bool] = OMIT,
        comment: typing.Optional[str] = OMIT,
        last_annotation_history: typing.Optional[int] = OMIT,
        remove_from_queue: typing.Optional[bool] = OMIT,
        result: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        started_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationReview:
        """
        Create a review for a specific annotation ID.

        Parameters
        ----------
        annotation : int
            Corresponding annotation

        async_postprocess : typing.Optional[bool]
            Whether to postprocess the review asynchronously.

        accepted : typing.Optional[bool]
            Accepted or rejected (if false) flag

        comment : typing.Optional[str]

        last_annotation_history : typing.Optional[int]

        remove_from_queue : typing.Optional[bool]

        result : typing.Optional[typing.Optional[typing.Any]]

        started_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationReview


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.annotation_reviews.create(
                annotation=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/annotation-reviews/",
            method="POST",
            params={
                "async_postprocess": async_postprocess,
            },
            json={
                "accepted": accepted,
                "annotation": annotation,
                "comment": comment,
                "last_annotation_history": last_annotation_history,
                "remove_from_queue": remove_from_queue,
                "result": result,
                "started_at": started_at,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AnnotationReview,
                    construct_type(
                        type_=AnnotationReview,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> AnnotationReview:
        """
        Retrieve a specific review by ID for an annotation.

        Parameters
        ----------
        id : int
            A unique integer value identifying this annotation review.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationReview


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.annotation_reviews.get(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/annotation-reviews/{jsonable_encoder(id)}/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AnnotationReview,
                    construct_type(
                        type_=AnnotationReview,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a review by ID

        Parameters
        ----------
        id : int
            A unique integer value identifying this annotation review.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.annotation_reviews.delete(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/annotation-reviews/{jsonable_encoder(id)}/",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: int,
        *,
        accepted: typing.Optional[bool] = OMIT,
        annotation: typing.Optional[int] = OMIT,
        comment: typing.Optional[str] = OMIT,
        last_annotation_history: typing.Optional[int] = OMIT,
        remove_from_queue: typing.Optional[bool] = OMIT,
        result: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        started_at: typing.Optional[dt.datetime] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AnnotationReview:
        """
        Update a specific review by ID.

        Parameters
        ----------
        id : int
            A unique integer value identifying this annotation review.

        accepted : typing.Optional[bool]
            Accepted or rejected (if false) flag

        annotation : typing.Optional[int]
            Corresponding annotation

        comment : typing.Optional[str]

        last_annotation_history : typing.Optional[int]

        remove_from_queue : typing.Optional[bool]

        result : typing.Optional[typing.Optional[typing.Any]]

        started_at : typing.Optional[dt.datetime]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AnnotationReview


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.annotation_reviews.update(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/annotation-reviews/{jsonable_encoder(id)}/",
            method="PATCH",
            json={
                "accepted": accepted,
                "annotation": annotation,
                "comment": comment,
                "last_annotation_history": last_annotation_history,
                "remove_from_queue": remove_from_queue,
                "result": result,
                "started_at": started_at,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AnnotationReview,
                    construct_type(
                        type_=AnnotationReview,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
