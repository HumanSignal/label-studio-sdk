# This file was auto-generated by Fern from our API Definition.

from ....core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
from ....core.pydantic_utilities import IS_PYDANTIC_V2


class GcsUpdateResponse(UniversalBaseModel):
    regex_filter: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage regex for filtering objects. You must specify it otherwise no objects will be imported.
    """

    use_blob_urls: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Interpret objects as BLOBs and generate URLs. For example, if your bucket contains images, you can use this option to generate URLs for these images. If set to False, it will read the content of the file and load it into Label Studio.
    """

    presign: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Presign URLs for direct download
    """

    presign_ttl: typing.Optional[int] = pydantic.Field(default=None)
    """
    Presign TTL in minutes
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Storage title
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Storage description
    """

    project: typing.Optional[int] = pydantic.Field(default=None)
    """
    Project ID
    """

    bucket: typing.Optional[str] = pydantic.Field(default=None)
    """
    GCS bucket name
    """

    prefix: typing.Optional[str] = pydantic.Field(default=None)
    """
    GCS bucket prefix
    """

    google_application_credentials: typing.Optional[str] = pydantic.Field(default=None)
    """
    The content of GOOGLE_APPLICATION_CREDENTIALS json file. Check official Google Cloud Authentication documentation for more details.
    """

    google_project_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Google project ID
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
