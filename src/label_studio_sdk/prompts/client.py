# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.prompt import Prompt
from ..types.prompt_created_by import PromptCreatedBy
from ..types.prompt_organization import PromptOrganization
from .types.prompts_batch_predictions_response import PromptsBatchPredictionsResponse
from .versions.client import AsyncVersionsClient, VersionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PromptsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.versions = VersionsClient(client_wrapper=self._client_wrapper)

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Prompt]:
        """
        Get a list of prompts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Prompt]


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/prompts/", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.List[Prompt], _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[int]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> Prompt:
        """
        Create a new prompt.

        Parameters
        ----------
        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[int]]
            List of associated projects IDs

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.create(
            title="title",
            input_fields=["input_fields"],
            output_classes=["output_classes"],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/prompts/",
            method="POST",
            json={
                "title": title,
                "description": description,
                "created_by": created_by,
                "created_at": created_at,
                "updated_at": updated_at,
                "organization": organization,
                "input_fields": input_fields,
                "output_classes": output_classes,
                "associated_projects": associated_projects,
                "skill_name": skill_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Prompt, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def batch_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        results: typing.Optional[typing.Sequence[typing.Dict[str, typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PromptsBatchPredictionsResponse:
        """
        Create a new batch prediction.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]

        results : typing.Optional[typing.Sequence[typing.Dict[str, typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsBatchPredictionsResponse


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.batch_predictions()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/model-run/batch-predictions",
            method="POST",
            json={"modelrun_id": modelrun_id, "results": results},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PromptsBatchPredictionsResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPromptsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.versions = AsyncVersionsClient(client_wrapper=self._client_wrapper)

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Prompt]:
        """
        Get a list of prompts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Prompt]


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.prompts.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/prompts/", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.List[Prompt], _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[int]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> Prompt:
        """
        Create a new prompt.

        Parameters
        ----------
        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[int]]
            List of associated projects IDs

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.prompts.create(
            title="title",
            input_fields=["input_fields"],
            output_classes=["output_classes"],
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/prompts/",
            method="POST",
            json={
                "title": title,
                "description": description,
                "created_by": created_by,
                "created_at": created_at,
                "updated_at": updated_at,
                "organization": organization,
                "input_fields": input_fields,
                "output_classes": output_classes,
                "associated_projects": associated_projects,
                "skill_name": skill_name,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Prompt, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def batch_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        results: typing.Optional[typing.Sequence[typing.Dict[str, typing.Any]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None
    ) -> PromptsBatchPredictionsResponse:
        """
        Create a new batch prediction.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]

        results : typing.Optional[typing.Sequence[typing.Dict[str, typing.Any]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsBatchPredictionsResponse


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.prompts.batch_predictions()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/model-run/batch-predictions",
            method="POST",
            json={"modelrun_id": modelrun_id, "results": results},
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PromptsBatchPredictionsResponse, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
