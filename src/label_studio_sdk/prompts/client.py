# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.prompt import Prompt
from ..types.prompt_associated_projects_item import PromptAssociatedProjectsItem
from ..types.prompt_created_by import PromptCreatedBy
from ..types.prompt_organization import PromptOrganization
from .indicators.client import AsyncIndicatorsClient, IndicatorsClient
from .raw_client import AsyncRawPromptsClient, RawPromptsClient
from .runs.client import AsyncRunsClient, RunsClient
from .types.prompts_batch_failed_predictions_request_failed_predictions_item import (
    PromptsBatchFailedPredictionsRequestFailedPredictionsItem,
)
from .types.prompts_batch_failed_predictions_response import PromptsBatchFailedPredictionsResponse
from .types.prompts_batch_predictions_request_results_item import PromptsBatchPredictionsRequestResultsItem
from .types.prompts_batch_predictions_response import PromptsBatchPredictionsResponse
from .versions.client import AsyncVersionsClient, VersionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PromptsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPromptsClient(client_wrapper=client_wrapper)
        self.versions = VersionsClient(client_wrapper=client_wrapper)

        self.runs = RunsClient(client_wrapper=client_wrapper)

        self.indicators = IndicatorsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPromptsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPromptsClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Prompt]:
        """
        Get a list of prompts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Prompt]


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(
        self,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Create a new prompt.

        Parameters
        ----------
        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.create(title='title', input_fields=['input_fields'], output_classes=['output_classes'], )
        """
        _response = self._raw_client.create(
            title=title,
            input_fields=input_fields,
            output_classes=output_classes,
            description=description,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            associated_projects=associated_projects,
            skill_name=skill_name,
            request_options=request_options,
        )
        return _response.data

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Prompt:
        """
        Get a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.get(id=1, )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.delete(id=1, )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: int,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Update a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.update(id=1, title='title', input_fields=['input_fields'], output_classes=['output_classes'], )
        """
        _response = self._raw_client.update(
            id,
            title=title,
            input_fields=input_fields,
            output_classes=output_classes,
            description=description,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            associated_projects=associated_projects,
            skill_name=skill_name,
            request_options=request_options,
        )
        return _response.data

    def batch_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        results: typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptsBatchPredictionsResponse:
        """
        Create a new batch prediction.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID to associate the prediction with

        results : typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsBatchPredictionsResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.batch_predictions()
        """
        _response = self._raw_client.batch_predictions(
            modelrun_id=modelrun_id, results=results, request_options=request_options
        )
        return _response.data

    def batch_failed_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        failed_predictions: typing.Optional[
            typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]
        ] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptsBatchFailedPredictionsResponse:
        """
        Create a new batch of failed predictions.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID where the failed predictions came from

        failed_predictions : typing.Optional[typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsBatchFailedPredictionsResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.batch_failed_predictions()
        """
        _response = self._raw_client.batch_failed_predictions(
            modelrun_id=modelrun_id, failed_predictions=failed_predictions, request_options=request_options
        )
        return _response.data


class AsyncPromptsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPromptsClient(client_wrapper=client_wrapper)
        self.versions = AsyncVersionsClient(client_wrapper=client_wrapper)

        self.runs = AsyncRunsClient(client_wrapper=client_wrapper)

        self.indicators = AsyncIndicatorsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPromptsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPromptsClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Prompt]:
        """
        Get a list of prompts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Prompt]


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(
        self,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Create a new prompt.

        Parameters
        ----------
        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.create(title='title', input_fields=['input_fields'], output_classes=['output_classes'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            title=title,
            input_fields=input_fields,
            output_classes=output_classes,
            description=description,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            associated_projects=associated_projects,
            skill_name=skill_name,
            request_options=request_options,
        )
        return _response.data

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Prompt:
        """
        Get a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.get(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.delete(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: int,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Update a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.update(id=1, title='title', input_fields=['input_fields'], output_classes=['output_classes'], )
        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            title=title,
            input_fields=input_fields,
            output_classes=output_classes,
            description=description,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            associated_projects=associated_projects,
            skill_name=skill_name,
            request_options=request_options,
        )
        return _response.data

    async def batch_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        results: typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptsBatchPredictionsResponse:
        """
        Create a new batch prediction.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID to associate the prediction with

        results : typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsBatchPredictionsResponse


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.batch_predictions()
        asyncio.run(main())
        """
        _response = await self._raw_client.batch_predictions(
            modelrun_id=modelrun_id, results=results, request_options=request_options
        )
        return _response.data

    async def batch_failed_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        failed_predictions: typing.Optional[
            typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]
        ] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptsBatchFailedPredictionsResponse:
        """
        Create a new batch of failed predictions.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID where the failed predictions came from

        failed_predictions : typing.Optional[typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptsBatchFailedPredictionsResponse


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.batch_failed_predictions()
        asyncio.run(main())
        """
        _response = await self._raw_client.batch_failed_predictions(
            modelrun_id=modelrun_id, failed_predictions=failed_predictions, request_options=request_options
        )
        return _response.data
