# This file was auto-generated by Fern from our API Definition.

from ...core.client_wrapper import SyncClientWrapper
import typing
from ...core.request_options import RequestOptions
from .types.indicators_list_response_item import IndicatorsListResponseItem
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.lse_key_indicator_value import LseKeyIndicatorValue
from ...core.client_wrapper import AsyncClientWrapper


class IndicatorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[IndicatorsListResponseItem]:
        """
        Get key indicators for the Prompt dashboard.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[IndicatorsListResponseItem]
            Key indicators

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.indicators.list(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(id)}/indicators/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[IndicatorsListResponseItem],
                    construct_type(
                        type_=typing.List[IndicatorsListResponseItem],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: int, indicator_key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LseKeyIndicatorValue:
        """
        Get a specific key indicator for the Prompt dashboard.

        Parameters
        ----------
        id : int

        indicator_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LseKeyIndicatorValue
            Key indicator

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.indicators.get(
            id=1,
            indicator_key="indicator_key",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(id)}/indicators/{jsonable_encoder(indicator_key)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseKeyIndicatorValue,
                    construct_type(
                        type_=LseKeyIndicatorValue,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncIndicatorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[IndicatorsListResponseItem]:
        """
        Get key indicators for the Prompt dashboard.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[IndicatorsListResponseItem]
            Key indicators

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.indicators.list(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(id)}/indicators/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[IndicatorsListResponseItem],
                    construct_type(
                        type_=typing.List[IndicatorsListResponseItem],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: int, indicator_key: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> LseKeyIndicatorValue:
        """
        Get a specific key indicator for the Prompt dashboard.

        Parameters
        ----------
        id : int

        indicator_key : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LseKeyIndicatorValue
            Key indicator

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.indicators.get(
                id=1,
                indicator_key="indicator_key",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(id)}/indicators/{jsonable_encoder(indicator_key)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseKeyIndicatorValue,
                    construct_type(
                        type_=LseKeyIndicatorValue,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
