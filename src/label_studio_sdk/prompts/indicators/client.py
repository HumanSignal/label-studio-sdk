# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.key_indicator_value import KeyIndicatorValue
from ...types.key_indicators import KeyIndicators
from .raw_client import AsyncRawIndicatorsClient, RawIndicatorsClient


class IndicatorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawIndicatorsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawIndicatorsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawIndicatorsClient
        """
        return self._raw_client

    def list(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> KeyIndicators:
        """
        Get key indicators for the Prompt dashboard.

        Parameters
        ----------
        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KeyIndicators


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.indicators.list(pk=1, )
        """
        _response = self._raw_client.list(pk, request_options=request_options)
        return _response.data

    def get(
        self, indicator_key: str, pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KeyIndicatorValue:
        """
        Get a specific key indicator for the Prompt dashboard.

        Parameters
        ----------
        indicator_key : str
            Key of the indicator

        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KeyIndicatorValue


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.prompts.indicators.get(indicator_key='indicator_key', pk=1, )
        """
        _response = self._raw_client.get(indicator_key, pk, request_options=request_options)
        return _response.data


class AsyncIndicatorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawIndicatorsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawIndicatorsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawIndicatorsClient
        """
        return self._raw_client

    async def list(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> KeyIndicators:
        """
        Get key indicators for the Prompt dashboard.

        Parameters
        ----------
        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KeyIndicators


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.indicators.list(pk=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.list(pk, request_options=request_options)
        return _response.data

    async def get(
        self, indicator_key: str, pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> KeyIndicatorValue:
        """
        Get a specific key indicator for the Prompt dashboard.

        Parameters
        ----------
        indicator_key : str
            Key of the indicator

        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        KeyIndicatorValue


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.prompts.indicators.get(indicator_key='indicator_key', pk=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(indicator_key, pk, request_options=request_options)
        return _response.data
