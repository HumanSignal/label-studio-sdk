# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.http_response import AsyncHttpResponse, HttpResponse
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import parse_obj_as
from ...core.request_options import RequestOptions
from ...types.key_indicator_value import KeyIndicatorValue
from ...types.key_indicators import KeyIndicators


class RawIndicatorsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[KeyIndicators]:
        """
        Get key indicators for the Prompt dashboard.

        Parameters
        ----------
        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KeyIndicators]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(pk)}/indicators",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KeyIndicators,
                    parse_obj_as(
                        type_=KeyIndicators,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get(
        self, indicator_key: str, pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[KeyIndicatorValue]:
        """
        Get a specific key indicator for the Prompt dashboard.

        Parameters
        ----------
        indicator_key : str
            Key of the indicator

        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[KeyIndicatorValue]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(pk)}/indicators/{jsonable_encoder(indicator_key)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KeyIndicatorValue,
                    parse_obj_as(
                        type_=KeyIndicatorValue,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawIndicatorsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[KeyIndicators]:
        """
        Get key indicators for the Prompt dashboard.

        Parameters
        ----------
        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KeyIndicators]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(pk)}/indicators",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KeyIndicators,
                    parse_obj_as(
                        type_=KeyIndicators,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get(
        self, indicator_key: str, pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[KeyIndicatorValue]:
        """
        Get a specific key indicator for the Prompt dashboard.

        Parameters
        ----------
        indicator_key : str
            Key of the indicator

        pk : int
            Inference run ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[KeyIndicatorValue]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/inference-runs/{jsonable_encoder(pk)}/indicators/{jsonable_encoder(indicator_key)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    KeyIndicatorValue,
                    parse_obj_as(
                        type_=KeyIndicatorValue,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
