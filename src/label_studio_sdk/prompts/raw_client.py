# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..types.prompt import Prompt
from ..types.prompt_associated_projects_item import PromptAssociatedProjectsItem
from ..types.prompt_created_by import PromptCreatedBy
from ..types.prompt_organization import PromptOrganization
from .types.prompts_batch_failed_predictions_request_failed_predictions_item import (
    PromptsBatchFailedPredictionsRequestFailedPredictionsItem,
)
from .types.prompts_batch_failed_predictions_response import PromptsBatchFailedPredictionsResponse
from .types.prompts_batch_predictions_request_results_item import PromptsBatchPredictionsRequestResultsItem
from .types.prompts_batch_predictions_response import PromptsBatchPredictionsResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawPromptsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[typing.List[Prompt]]:
        """
        Get a list of prompts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Prompt]]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/prompts/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Prompt],
                    parse_obj_as(
                        type_=typing.List[Prompt],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Prompt]:
        """
        Create a new prompt.

        Parameters
        ----------
        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Prompt]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/prompts/",
            method="POST",
            json={
                "title": title,
                "description": description,
                "created_by": convert_and_respect_annotation_metadata(
                    object_=created_by, annotation=PromptCreatedBy, direction="write"
                ),
                "created_at": created_at,
                "updated_at": updated_at,
                "organization": convert_and_respect_annotation_metadata(
                    object_=organization, annotation=PromptOrganization, direction="write"
                ),
                "input_fields": input_fields,
                "output_classes": output_classes,
                "associated_projects": convert_and_respect_annotation_metadata(
                    object_=associated_projects,
                    annotation=typing.Sequence[PromptAssociatedProjectsItem],
                    direction="write",
                ),
                "skill_name": skill_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Prompt]:
        """
        Get a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Prompt]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[None]:
        """
        Delete a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        id: int,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Prompt]:
        """
        Update a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Prompt]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "title": title,
                "description": description,
                "created_by": convert_and_respect_annotation_metadata(
                    object_=created_by, annotation=PromptCreatedBy, direction="write"
                ),
                "created_at": created_at,
                "updated_at": updated_at,
                "organization": convert_and_respect_annotation_metadata(
                    object_=organization, annotation=PromptOrganization, direction="write"
                ),
                "input_fields": input_fields,
                "output_classes": output_classes,
                "associated_projects": convert_and_respect_annotation_metadata(
                    object_=associated_projects,
                    annotation=typing.Sequence[PromptAssociatedProjectsItem],
                    direction="write",
                ),
                "skill_name": skill_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def batch_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        results: typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PromptsBatchPredictionsResponse]:
        """
        Create a new batch prediction.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID to associate the prediction with

        results : typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PromptsBatchPredictionsResponse]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/model-run/batch-predictions",
            method="POST",
            json={
                "modelrun_id": modelrun_id,
                "results": convert_and_respect_annotation_metadata(
                    object_=results,
                    annotation=typing.Sequence[PromptsBatchPredictionsRequestResultsItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PromptsBatchPredictionsResponse,
                    parse_obj_as(
                        type_=PromptsBatchPredictionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def batch_failed_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        failed_predictions: typing.Optional[
            typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]
        ] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[PromptsBatchFailedPredictionsResponse]:
        """
        Create a new batch of failed predictions.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID where the failed predictions came from

        failed_predictions : typing.Optional[typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[PromptsBatchFailedPredictionsResponse]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/model-run/batch-failed-predictions",
            method="POST",
            json={
                "modelrun_id": modelrun_id,
                "failed_predictions": convert_and_respect_annotation_metadata(
                    object_=failed_predictions,
                    annotation=typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PromptsBatchFailedPredictionsResponse,
                    parse_obj_as(
                        type_=PromptsBatchFailedPredictionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawPromptsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[Prompt]]:
        """
        Get a list of prompts.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Prompt]]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/prompts/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Prompt],
                    parse_obj_as(
                        type_=typing.List[Prompt],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Prompt]:
        """
        Create a new prompt.

        Parameters
        ----------
        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Prompt]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/prompts/",
            method="POST",
            json={
                "title": title,
                "description": description,
                "created_by": convert_and_respect_annotation_metadata(
                    object_=created_by, annotation=PromptCreatedBy, direction="write"
                ),
                "created_at": created_at,
                "updated_at": updated_at,
                "organization": convert_and_respect_annotation_metadata(
                    object_=organization, annotation=PromptOrganization, direction="write"
                ),
                "input_fields": input_fields,
                "output_classes": output_classes,
                "associated_projects": convert_and_respect_annotation_metadata(
                    object_=associated_projects,
                    annotation=typing.Sequence[PromptAssociatedProjectsItem],
                    direction="write",
                ),
                "skill_name": skill_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Prompt]:
        """
        Get a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Prompt]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        id: int,
        *,
        title: str,
        input_fields: typing.Sequence[str],
        output_classes: typing.Sequence[str],
        description: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptOrganization] = OMIT,
        associated_projects: typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]] = OMIT,
        skill_name: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Prompt]:
        """
        Update a prompt by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        title : str
            Title of the prompt

        input_fields : typing.Sequence[str]
            List of input fields

        output_classes : typing.Sequence[str]
            List of output classes

        description : typing.Optional[str]
            Description of the prompt

        created_by : typing.Optional[PromptCreatedBy]
            User ID of the creator of the prompt

        created_at : typing.Optional[dt.datetime]
            Date and time the prompt was created

        updated_at : typing.Optional[dt.datetime]
            Date and time the prompt was last updated

        organization : typing.Optional[PromptOrganization]
            Organization ID of the prompt

        associated_projects : typing.Optional[typing.Sequence[PromptAssociatedProjectsItem]]
            List of associated projects IDs or objects

        skill_name : typing.Optional[str]
            Name of the skill

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Prompt]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "title": title,
                "description": description,
                "created_by": convert_and_respect_annotation_metadata(
                    object_=created_by, annotation=PromptCreatedBy, direction="write"
                ),
                "created_at": created_at,
                "updated_at": updated_at,
                "organization": convert_and_respect_annotation_metadata(
                    object_=organization, annotation=PromptOrganization, direction="write"
                ),
                "input_fields": input_fields,
                "output_classes": output_classes,
                "associated_projects": convert_and_respect_annotation_metadata(
                    object_=associated_projects,
                    annotation=typing.Sequence[PromptAssociatedProjectsItem],
                    direction="write",
                ),
                "skill_name": skill_name,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def batch_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        results: typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PromptsBatchPredictionsResponse]:
        """
        Create a new batch prediction.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID to associate the prediction with

        results : typing.Optional[typing.Sequence[PromptsBatchPredictionsRequestResultsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PromptsBatchPredictionsResponse]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/model-run/batch-predictions",
            method="POST",
            json={
                "modelrun_id": modelrun_id,
                "results": convert_and_respect_annotation_metadata(
                    object_=results,
                    annotation=typing.Sequence[PromptsBatchPredictionsRequestResultsItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PromptsBatchPredictionsResponse,
                    parse_obj_as(
                        type_=PromptsBatchPredictionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def batch_failed_predictions(
        self,
        *,
        modelrun_id: typing.Optional[int] = OMIT,
        failed_predictions: typing.Optional[
            typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]
        ] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[PromptsBatchFailedPredictionsResponse]:
        """
        Create a new batch of failed predictions.

        Parameters
        ----------
        modelrun_id : typing.Optional[int]
            Model Run ID where the failed predictions came from

        failed_predictions : typing.Optional[typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[PromptsBatchFailedPredictionsResponse]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/model-run/batch-failed-predictions",
            method="POST",
            json={
                "modelrun_id": modelrun_id,
                "failed_predictions": convert_and_respect_annotation_metadata(
                    object_=failed_predictions,
                    annotation=typing.Sequence[PromptsBatchFailedPredictionsRequestFailedPredictionsItem],
                    direction="write",
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    PromptsBatchFailedPredictionsResponse,
                    parse_obj_as(
                        type_=PromptsBatchFailedPredictionsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
