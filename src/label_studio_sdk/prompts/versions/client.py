# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...core.pydantic_utilities import pydantic_v1
from ...core.request_options import RequestOptions
from ...types.prompt_run import PromptRun
from ...types.prompt_version import PromptVersion

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self, id: int, *, request: PromptVersion, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptVersion:
        """
        Create a new version of a prompt.

        Parameters
        ----------
        id : int
            Prompt ID

        request : PromptVersion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        from label_studio_sdk import PromptVersion
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.create(
            id=1,
            request=PromptVersion(
                title="title",
                prompt="prompt",
                provider="OpenAI",
                provider_model_id="provider_model_id",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}/versions",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PromptVersion, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_run(
        self, id: int, version_id: int, *, request: PromptRun, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptRun:
        """
        Run a prompt.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        request : PromptRun

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptRun


        Examples
        --------
        from label_studio_sdk import PromptRun
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.create_run(
            id=1,
            version_id=1,
            request=PromptRun(
                project=1,
                project_subset="All",
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/inference-runs",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PromptRun, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self, id: int, *, request: PromptVersion, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptVersion:
        """
        Create a new version of a prompt.

        Parameters
        ----------
        id : int
            Prompt ID

        request : PromptVersion

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        from label_studio_sdk import PromptVersion
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.prompts.versions.create(
            id=1,
            request=PromptVersion(
                title="title",
                prompt="prompt",
                provider="OpenAI",
                provider_model_id="provider_model_id",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}/versions",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PromptVersion, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_run(
        self, id: int, version_id: int, *, request: PromptRun, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptRun:
        """
        Run a prompt.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        request : PromptRun

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptRun


        Examples
        --------
        from label_studio_sdk import PromptRun
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.prompts.versions.create_run(
            id=1,
            version_id=1,
            request=PromptRun(
                project=1,
                project_subset="All",
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/prompts/{jsonable_encoder(id)}/versions/{jsonable_encoder(version_id)}/inference-runs",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(PromptRun, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
