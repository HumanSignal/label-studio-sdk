# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.inference_run_cost_estimate import InferenceRunCostEstimate
from ...types.prompt_version import PromptVersion
from ...types.prompt_version_created_by import PromptVersionCreatedBy
from ...types.prompt_version_organization import PromptVersionOrganization
from ...types.prompt_version_provider import PromptVersionProvider
from ...types.refined_prompt_response import RefinedPromptResponse
from .raw_client import AsyncRawVersionsClient, RawVersionsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class VersionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawVersionsClient
        """
        return self._raw_client

    def list(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[PromptVersion]:
        """
        Get a list of prompt versions.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PromptVersion]


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.list(
            id=1,
        )
        """
        _response = self._raw_client.list(id, request_options=request_options)
        return _response.data

    def create(
        self,
        id: int,
        *,
        title: typing.Optional[str] = OMIT,
        parent_model: typing.Optional[int] = OMIT,
        model_provider_connection: typing.Optional[int] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        provider: typing.Optional[PromptVersionProvider] = OMIT,
        provider_model_id: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptVersionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptVersionOrganization] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptVersion:
        """
        Create a new version of a prompt.

        Parameters
        ----------
        id : int
            Prompt ID

        title : typing.Optional[str]

        parent_model : typing.Optional[int]

        model_provider_connection : typing.Optional[int]

        prompt : typing.Optional[str]

        provider : typing.Optional[PromptVersionProvider]

        provider_model_id : typing.Optional[str]

        created_by : typing.Optional[PromptVersionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        organization : typing.Optional[PromptVersionOrganization]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.create(
            id=1,
        )
        """
        _response = self._raw_client.create(
            id,
            title=title,
            parent_model=parent_model,
            model_provider_connection=model_provider_connection,
            prompt=prompt,
            provider=provider,
            provider_model_id=provider_model_id,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            request_options=request_options,
        )
        return _response.data

    def get(
        self, id: int, version_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptVersion:
        """
        Get a prompt version by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.get(
            id=1,
            version_id=1,
        )
        """
        _response = self._raw_client.get(id, version_id, request_options=request_options)
        return _response.data

    def delete(self, id: int, version_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a prompt version by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.delete(
            id=1,
            version_id=1,
        )
        """
        _response = self._raw_client.delete(id, version_id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: int,
        version_id: int,
        *,
        title: typing.Optional[str] = OMIT,
        parent_model: typing.Optional[int] = OMIT,
        model_provider_connection: typing.Optional[int] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        provider: typing.Optional[PromptVersionProvider] = OMIT,
        provider_model_id: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptVersionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptVersionOrganization] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptVersion:
        """
        Update a prompt version by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        title : typing.Optional[str]

        parent_model : typing.Optional[int]

        model_provider_connection : typing.Optional[int]

        prompt : typing.Optional[str]

        provider : typing.Optional[PromptVersionProvider]

        provider_model_id : typing.Optional[str]

        created_by : typing.Optional[PromptVersionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        organization : typing.Optional[PromptVersionOrganization]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.update(
            id=1,
            version_id=1,
        )
        """
        _response = self._raw_client.update(
            id,
            version_id,
            title=title,
            parent_model=parent_model,
            model_provider_connection=model_provider_connection,
            prompt=prompt,
            provider=provider,
            provider_model_id=provider_model_id,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            request_options=request_options,
        )
        return _response.data

    def cost_estimate(
        self,
        prompt_id: int,
        version_id: int,
        *,
        project_id: int,
        project_subset: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InferenceRunCostEstimate:
        """
        Get cost estimate for running a prompt version on a particular project/subset

        Parameters
        ----------
        prompt_id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        project_id : int
            ID of the project to get an estimate for running on

        project_subset : int
            Subset of the project to get an estimate for running on (e.g. 'All', 'Sample', or 'HasGT')

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InferenceRunCostEstimate


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.cost_estimate(
            prompt_id=1,
            version_id=1,
            project_id=1,
            project_subset=1,
        )
        """
        _response = self._raw_client.cost_estimate(
            prompt_id, version_id, project_id=project_id, project_subset=project_subset, request_options=request_options
        )
        return _response.data

    def get_refined_prompt(
        self,
        prompt_id: int,
        version_id: int,
        *,
        refinement_job_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RefinedPromptResponse:
        """
        Get the refined prompt based on the `refinement_job_id`.

        Parameters
        ----------
        prompt_id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        refinement_job_id : str
            Refinement Job ID acquired from the `POST /api/prompts/{prompt_id}/versions/{version_id}/refine` endpoint

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RefinedPromptResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.get_refined_prompt(
            prompt_id=1,
            version_id=1,
            refinement_job_id="refinement_job_id",
        )
        """
        _response = self._raw_client.get_refined_prompt(
            prompt_id, version_id, refinement_job_id=refinement_job_id, request_options=request_options
        )
        return _response.data

    def refine_prompt(
        self,
        prompt_id: int,
        version_id: int,
        *,
        async_: typing.Optional[bool] = None,
        teacher_model_provider_connection_id: typing.Optional[int] = OMIT,
        teacher_model_name: typing.Optional[str] = OMIT,
        project_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RefinedPromptResponse:
        """
        Refine a prompt version using a teacher model and save the refined prompt as a new version.

        Parameters
        ----------
        prompt_id : int
            Prompt ID

        version_id : int
            Base Prompt Version ID

        async_ : typing.Optional[bool]
            Run the refinement job asynchronously

        teacher_model_provider_connection_id : typing.Optional[int]
            Model Provider Connection ID to use to refine the prompt

        teacher_model_name : typing.Optional[str]
            Name of the model to use to refine the prompt

        project_id : typing.Optional[int]
            Project ID to target the refined prompt for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RefinedPromptResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.prompts.versions.refine_prompt(
            prompt_id=1,
            version_id=1,
        )
        """
        _response = self._raw_client.refine_prompt(
            prompt_id,
            version_id,
            async_=async_,
            teacher_model_provider_connection_id=teacher_model_provider_connection_id,
            teacher_model_name=teacher_model_name,
            project_id=project_id,
            request_options=request_options,
        )
        return _response.data


class AsyncVersionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawVersionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawVersionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawVersionsClient
        """
        return self._raw_client

    async def list(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[PromptVersion]:
        """
        Get a list of prompt versions.

        Parameters
        ----------
        id : int
            Prompt ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[PromptVersion]


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.list(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list(id, request_options=request_options)
        return _response.data

    async def create(
        self,
        id: int,
        *,
        title: typing.Optional[str] = OMIT,
        parent_model: typing.Optional[int] = OMIT,
        model_provider_connection: typing.Optional[int] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        provider: typing.Optional[PromptVersionProvider] = OMIT,
        provider_model_id: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptVersionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptVersionOrganization] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptVersion:
        """
        Create a new version of a prompt.

        Parameters
        ----------
        id : int
            Prompt ID

        title : typing.Optional[str]

        parent_model : typing.Optional[int]

        model_provider_connection : typing.Optional[int]

        prompt : typing.Optional[str]

        provider : typing.Optional[PromptVersionProvider]

        provider_model_id : typing.Optional[str]

        created_by : typing.Optional[PromptVersionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        organization : typing.Optional[PromptVersionOrganization]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.create(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            id,
            title=title,
            parent_model=parent_model,
            model_provider_connection=model_provider_connection,
            prompt=prompt,
            provider=provider,
            provider_model_id=provider_model_id,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            request_options=request_options,
        )
        return _response.data

    async def get(
        self, id: int, version_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PromptVersion:
        """
        Get a prompt version by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.get(
                id=1,
                version_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, version_id, request_options=request_options)
        return _response.data

    async def delete(
        self, id: int, version_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Delete a prompt version by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.delete(
                id=1,
                version_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, version_id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: int,
        version_id: int,
        *,
        title: typing.Optional[str] = OMIT,
        parent_model: typing.Optional[int] = OMIT,
        model_provider_connection: typing.Optional[int] = OMIT,
        prompt: typing.Optional[str] = OMIT,
        provider: typing.Optional[PromptVersionProvider] = OMIT,
        provider_model_id: typing.Optional[str] = OMIT,
        created_by: typing.Optional[PromptVersionCreatedBy] = OMIT,
        created_at: typing.Optional[dt.datetime] = OMIT,
        updated_at: typing.Optional[dt.datetime] = OMIT,
        organization: typing.Optional[PromptVersionOrganization] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptVersion:
        """
        Update a prompt version by ID.

        Parameters
        ----------
        id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        title : typing.Optional[str]

        parent_model : typing.Optional[int]

        model_provider_connection : typing.Optional[int]

        prompt : typing.Optional[str]

        provider : typing.Optional[PromptVersionProvider]

        provider_model_id : typing.Optional[str]

        created_by : typing.Optional[PromptVersionCreatedBy]

        created_at : typing.Optional[dt.datetime]

        updated_at : typing.Optional[dt.datetime]

        organization : typing.Optional[PromptVersionOrganization]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptVersion


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.update(
                id=1,
                version_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            version_id,
            title=title,
            parent_model=parent_model,
            model_provider_connection=model_provider_connection,
            prompt=prompt,
            provider=provider,
            provider_model_id=provider_model_id,
            created_by=created_by,
            created_at=created_at,
            updated_at=updated_at,
            organization=organization,
            request_options=request_options,
        )
        return _response.data

    async def cost_estimate(
        self,
        prompt_id: int,
        version_id: int,
        *,
        project_id: int,
        project_subset: int,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> InferenceRunCostEstimate:
        """
        Get cost estimate for running a prompt version on a particular project/subset

        Parameters
        ----------
        prompt_id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        project_id : int
            ID of the project to get an estimate for running on

        project_subset : int
            Subset of the project to get an estimate for running on (e.g. 'All', 'Sample', or 'HasGT')

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        InferenceRunCostEstimate


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.cost_estimate(
                prompt_id=1,
                version_id=1,
                project_id=1,
                project_subset=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.cost_estimate(
            prompt_id, version_id, project_id=project_id, project_subset=project_subset, request_options=request_options
        )
        return _response.data

    async def get_refined_prompt(
        self,
        prompt_id: int,
        version_id: int,
        *,
        refinement_job_id: str,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RefinedPromptResponse:
        """
        Get the refined prompt based on the `refinement_job_id`.

        Parameters
        ----------
        prompt_id : int
            Prompt ID

        version_id : int
            Prompt Version ID

        refinement_job_id : str
            Refinement Job ID acquired from the `POST /api/prompts/{prompt_id}/versions/{version_id}/refine` endpoint

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RefinedPromptResponse


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.get_refined_prompt(
                prompt_id=1,
                version_id=1,
                refinement_job_id="refinement_job_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_refined_prompt(
            prompt_id, version_id, refinement_job_id=refinement_job_id, request_options=request_options
        )
        return _response.data

    async def refine_prompt(
        self,
        prompt_id: int,
        version_id: int,
        *,
        async_: typing.Optional[bool] = None,
        teacher_model_provider_connection_id: typing.Optional[int] = OMIT,
        teacher_model_name: typing.Optional[str] = OMIT,
        project_id: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> RefinedPromptResponse:
        """
        Refine a prompt version using a teacher model and save the refined prompt as a new version.

        Parameters
        ----------
        prompt_id : int
            Prompt ID

        version_id : int
            Base Prompt Version ID

        async_ : typing.Optional[bool]
            Run the refinement job asynchronously

        teacher_model_provider_connection_id : typing.Optional[int]
            Model Provider Connection ID to use to refine the prompt

        teacher_model_name : typing.Optional[str]
            Name of the model to use to refine the prompt

        project_id : typing.Optional[int]
            Project ID to target the refined prompt for

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        RefinedPromptResponse


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.prompts.versions.refine_prompt(
                prompt_id=1,
                version_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.refine_prompt(
            prompt_id,
            version_id,
            async_=async_,
            teacher_model_provider_connection_id=teacher_model_provider_connection_id,
            teacher_model_name=teacher_model_name,
            project_id=project_id,
            request_options=request_options,
        )
        return _response.data
