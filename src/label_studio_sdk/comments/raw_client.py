# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..types.comment import Comment

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawCommentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        project: typing.Optional[int] = None,
        expand_created_by: typing.Optional[bool] = None,
        annotation: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[typing.List[Comment]]:
        """

        Get a list of comments for a specific project.

        Parameters
        ----------
        project : typing.Optional[int]
            Project ID

        expand_created_by : typing.Optional[bool]
            Expand the created_by field with object instead of ID

        annotation : typing.Optional[int]
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Comment]]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/comments/",
            method="GET",
            params={
                "project": project,
                "expand_created_by": expand_created_by,
                "annotation": annotation,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Comment],
                    parse_obj_as(
                        type_=typing.List[Comment],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Comment]:
        """

        Create a new comment.

        Parameters
        ----------
        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Comment]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/comments/",
            method="POST",
            json={
                "annotation": annotation,
                "project": project,
                "text": text,
                "is_resolved": is_resolved,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Comment,
                    parse_obj_as(
                        type_=Comment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Comment]:
        """

        Get a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Comment]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/comments/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Comment,
                    parse_obj_as(
                        type_=Comment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[None]:
        """

        Delete a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/comments/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: int,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Comment]:
        """

        Update a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Comment]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/comments/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "annotation": annotation,
                "project": project,
                "text": text,
                "is_resolved": is_resolved,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Comment,
                    parse_obj_as(
                        type_=Comment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)


class AsyncRawCommentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        project: typing.Optional[int] = None,
        expand_created_by: typing.Optional[bool] = None,
        annotation: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[typing.List[Comment]]:
        """

        Get a list of comments for a specific project.

        Parameters
        ----------
        project : typing.Optional[int]
            Project ID

        expand_created_by : typing.Optional[bool]
            Expand the created_by field with object instead of ID

        annotation : typing.Optional[int]
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Comment]]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/comments/",
            method="GET",
            params={
                "project": project,
                "expand_created_by": expand_created_by,
                "annotation": annotation,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Comment],
                    parse_obj_as(
                        type_=typing.List[Comment],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Comment]:
        """

        Create a new comment.

        Parameters
        ----------
        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Comment]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/comments/",
            method="POST",
            json={
                "annotation": annotation,
                "project": project,
                "text": text,
                "is_resolved": is_resolved,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Comment,
                    parse_obj_as(
                        type_=Comment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Comment]:
        """

        Get a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Comment]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/comments/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Comment,
                    parse_obj_as(
                        type_=Comment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def delete(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """

        Delete a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/comments/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: int,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Comment]:
        """

        Update a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Comment]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/comments/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "annotation": annotation,
                "project": project,
                "text": text,
                "is_resolved": is_resolved,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Comment,
                    parse_obj_as(
                        type_=Comment,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response.text)
        raise ApiError(headers=dict(_response.headers), status_code=_response.status_code, body=_response_json)
