# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.comment import Comment
from .raw_client import AsyncRawCommentsClient, RawCommentsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CommentsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCommentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCommentsClient
        """
        return self._raw_client

    def list(
        self,
        *,
        project: typing.Optional[int] = None,
        expand_created_by: typing.Optional[bool] = None,
        annotation: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Comment]:
        """

        Get a list of comments for a specific project.

        Parameters
        ----------
        project : typing.Optional[int]
            Project ID

        expand_created_by : typing.Optional[bool]
            Expand the created_by field with object instead of ID

        annotation : typing.Optional[int]
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Comment]


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.comments.list()
        """
        _response = self._raw_client.list(
            project=project, expand_created_by=expand_created_by, annotation=annotation, request_options=request_options
        )
        return _response.data

    def create(
        self,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """

        Create a new comment.

        Parameters
        ----------
        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.comments.create()
        """
        _response = self._raw_client.create(
            annotation=annotation, project=project, text=text, is_resolved=is_resolved, request_options=request_options
        )
        return _response.data

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Comment:
        """

        Get a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.comments.get(id=1, )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """

        Delete a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.comments.delete(id=1, )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: int,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """

        Update a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.comments.update(id=1, )
        """
        _response = self._raw_client.update(
            id,
            annotation=annotation,
            project=project,
            text=text,
            is_resolved=is_resolved,
            request_options=request_options,
        )
        return _response.data


class AsyncCommentsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCommentsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCommentsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCommentsClient
        """
        return self._raw_client

    async def list(
        self,
        *,
        project: typing.Optional[int] = None,
        expand_created_by: typing.Optional[bool] = None,
        annotation: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[Comment]:
        """

        Get a list of comments for a specific project.

        Parameters
        ----------
        project : typing.Optional[int]
            Project ID

        expand_created_by : typing.Optional[bool]
            Expand the created_by field with object instead of ID

        annotation : typing.Optional[int]
            Annotation ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Comment]


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.comments.list()
        asyncio.run(main())
        """
        _response = await self._raw_client.list(
            project=project, expand_created_by=expand_created_by, annotation=annotation, request_options=request_options
        )
        return _response.data

    async def create(
        self,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """

        Create a new comment.

        Parameters
        ----------
        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.comments.create()
        asyncio.run(main())
        """
        _response = await self._raw_client.create(
            annotation=annotation, project=project, text=text, is_resolved=is_resolved, request_options=request_options
        )
        return _response.data

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Comment:
        """

        Get a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.comments.get(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """

        Delete a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.comments.delete(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: int,
        *,
        annotation: typing.Optional[int] = OMIT,
        project: typing.Optional[int] = OMIT,
        text: typing.Optional[str] = OMIT,
        is_resolved: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Comment:
        """

        Update a specific comment.

        Parameters
        ----------
        id : int
            Comment ID

        annotation : typing.Optional[int]

        project : typing.Optional[int]

        text : typing.Optional[str]

        is_resolved : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Comment


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.comments.update(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id,
            annotation=annotation,
            project=project,
            text=text,
            is_resolved=is_resolved,
            request_options=request_options,
        )
        return _response.data
