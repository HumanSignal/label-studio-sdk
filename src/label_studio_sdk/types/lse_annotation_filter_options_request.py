# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .lse_annotation_filter_options_request_reviewed import LseAnnotationFilterOptionsRequestReviewed
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LseAnnotationFilterOptionsRequest(UncheckedBaseModel):
    ground_truth: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Include ground truth annotations
    """

    reviewed: typing.Optional[LseAnnotationFilterOptionsRequestReviewed] = pydantic.Field(default=None)
    """
    `only` - include all tasks with at least one not reviewed annotation<br>`exclude` - exclude with at least one not reviewed annotation
    
    * `only` - only
    * `exclude` - exclude
    * `None` - None
    """

    skipped: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Include skipped annotations
    """

    usual: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Include not skipped and not ground truth annotations
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
