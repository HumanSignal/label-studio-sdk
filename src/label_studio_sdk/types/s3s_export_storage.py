# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import pydantic
import datetime as dt
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class S3SExportStorage(UniversalBaseModel):
    id: typing.Optional[int] = None
    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage title
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage description
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Creation time
    """

    bucket: typing.Optional[str] = pydantic.Field(default=None)
    """
    S3 bucket name
    """

    prefix: typing.Optional[str] = pydantic.Field(default=None)
    """
    S3 bucket prefix
    """

    external_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS External ID
    """

    role_arn: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS Role ARN
    """

    region_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS Region
    """

    s3endpoint: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="s3_endpoint")] = pydantic.Field(
        default=None
    )
    """
    S3 Endpoint
    """

    project: int = pydantic.Field()
    """
    A unique integer value identifying this project.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
