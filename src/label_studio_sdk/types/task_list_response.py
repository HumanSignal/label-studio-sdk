# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .lse_task_predictions_item import LseTaskPredictionsItem
from .lse_task_drafts_item import LseTaskDraftsItem
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .lse_task_serializer_for_reviewers_predictions_item import LseTaskSerializerForReviewersPredictionsItem
from .lse_task_serializer_for_reviewers_drafts_item import LseTaskSerializerForReviewersDraftsItem
from .lse_task_serializer_for_annotators_drafts_item import LseTaskSerializerForAnnotatorsDraftsItem
from .lse_task_serializer_for_annotators_predictions_item import LseTaskSerializerForAnnotatorsPredictionsItem


class TaskListResponse_LseTask(UniversalBaseModel):
    user_role: typing.Literal["LseTask"] = "LseTask"
    id: int
    agreement: str
    predictions: typing.List[LseTaskPredictionsItem]
    annotations: str
    drafts: typing.List[LseTaskDraftsItem]
    annotators: typing.List[int]
    inner_id: typing.Optional[int] = None
    cancelled_annotations: typing.Optional[int] = None
    total_annotations: typing.Optional[int] = None
    total_predictions: typing.Optional[int] = None
    completed_at: typing.Optional[dt.datetime] = None
    annotations_results: str
    predictions_results: str
    predictions_score: typing.Optional[float] = None
    file_upload: str
    storage_filename: str
    annotations_ids: str
    predictions_model_versions: str
    avg_lead_time: typing.Optional[float] = None
    draft_exists: typing.Optional[bool] = None
    updated_by: typing.List[typing.Dict[str, typing.Optional[typing.Any]]]
    reviewers: str
    comments: str
    comment_authors: str
    reviewed: typing.Optional[bool] = None
    reviews_accepted: typing.Optional[int] = None
    reviews_rejected: typing.Optional[int] = None
    ground_truth: typing.Optional[bool] = None
    data: typing.Optional[typing.Any] = None
    meta: typing.Optional[typing.Optional[typing.Any]] = None
    created_at: dt.datetime
    updated_at: dt.datetime
    is_labeled: typing.Optional[bool] = None
    overlap: typing.Optional[int] = None
    comment_count: typing.Optional[int] = None
    unresolved_comment_count: typing.Optional[int] = None
    last_comment_updated_at: typing.Optional[dt.datetime] = None
    project: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TaskListResponse_LseTaskSerializerForReviewers(UniversalBaseModel):
    user_role: typing.Literal["LseTaskSerializerForReviewers"] = "LseTaskSerializerForReviewers"
    id: int
    agreement: str
    predictions: typing.List[LseTaskSerializerForReviewersPredictionsItem]
    annotations: str
    drafts: typing.List[LseTaskSerializerForReviewersDraftsItem]
    annotators: typing.List[int]
    inner_id: typing.Optional[int] = None
    cancelled_annotations: typing.Optional[int] = None
    total_annotations: typing.Optional[int] = None
    total_predictions: typing.Optional[int] = None
    completed_at: typing.Optional[dt.datetime] = None
    annotations_results: str
    predictions_results: str
    predictions_score: typing.Optional[float] = None
    file_upload: str
    storage_filename: str
    annotations_ids: str
    predictions_model_versions: str
    avg_lead_time: typing.Optional[float] = None
    draft_exists: typing.Optional[bool] = None
    updated_by: typing.List[typing.Dict[str, typing.Optional[typing.Any]]]
    reviewers: str
    comments: str
    comment_authors: str
    reviewed: typing.Optional[bool] = None
    reviews_accepted: typing.Optional[int] = None
    reviews_rejected: typing.Optional[int] = None
    ground_truth: typing.Optional[bool] = None
    data: typing.Optional[typing.Any] = None
    meta: typing.Optional[typing.Optional[typing.Any]] = None
    created_at: dt.datetime
    updated_at: dt.datetime
    is_labeled: typing.Optional[bool] = None
    overlap: typing.Optional[int] = None
    comment_count: typing.Optional[int] = None
    unresolved_comment_count: typing.Optional[int] = None
    last_comment_updated_at: typing.Optional[dt.datetime] = None
    project: typing.Optional[int] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TaskListResponse_LseTaskSerializerForAnnotators(UniversalBaseModel):
    user_role: typing.Literal["LseTaskSerializerForAnnotators"] = "LseTaskSerializerForAnnotators"
    id: int
    data: typing.Optional[typing.Any] = None
    created_at: dt.datetime
    annotations: str
    drafts: typing.List[LseTaskSerializerForAnnotatorsDraftsItem]
    total_annotations: typing.Optional[int] = None
    cancelled_annotations: typing.Optional[int] = None
    annotations_results: str
    predictions: typing.List[LseTaskSerializerForAnnotatorsPredictionsItem]
    total_predictions: typing.Optional[int] = None
    predictions_score: typing.Optional[float] = None
    predictions_results: str
    comments: str
    comment_count: str
    unresolved_comment_count: str
    reviews_rejected: typing.Optional[int] = None
    draft_exists: typing.Optional[bool] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


TaskListResponse = typing.Union[
    TaskListResponse_LseTask,
    TaskListResponse_LseTaskSerializerForReviewers,
    TaskListResponse_LseTaskSerializerForAnnotators,
]
