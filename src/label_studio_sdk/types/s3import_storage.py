# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
import datetime as dt
import pydantic
from .s3import_storage_status import S3ImportStorageStatus
import typing_extensions
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class S3ImportStorage(UniversalBaseModel):
    id: typing.Optional[int] = None
    type: typing.Optional[str] = None
    synchronizable: typing.Optional[bool] = None
    presign: typing.Optional[bool] = None
    last_sync: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Last sync finished time
    """

    last_sync_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Count of tasks synced last time
    """

    last_sync_job: typing.Optional[str] = pydantic.Field(default=None)
    """
    Last sync job ID
    """

    status: typing.Optional[S3ImportStorageStatus] = None
    traceback: typing.Optional[str] = pydantic.Field(default=None)
    """
    Traceback report for the last failed sync
    """

    meta: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Meta and debug information about storage processes
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage title
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage description
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Creation time
    """

    bucket: typing.Optional[str] = pydantic.Field(default=None)
    """
    S3 bucket name
    """

    prefix: typing.Optional[str] = pydantic.Field(default=None)
    """
    S3 bucket prefix
    """

    regex_filter: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage regex for filtering objects
    """

    use_blob_urls: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Interpret objects as BLOBs and generate URLs
    """

    aws_access_key_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS_ACCESS_KEY_ID
    """

    aws_secret_access_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS_SECRET_ACCESS_KEY
    """

    aws_session_token: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS_SESSION_TOKEN
    """

    aws_sse_kms_key_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS SSE KMS Key ID
    """

    region_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    AWS Region
    """

    s3endpoint: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="s3_endpoint")] = pydantic.Field(
        default=None
    )
    """
    S3 Endpoint
    """

    presign_ttl: typing.Optional[int] = pydantic.Field(default=None)
    """
    Presigned URLs TTL (in minutes)
    """

    recursive_scan: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Perform recursive scan over the bucket content
    """

    project: int = pydantic.Field()
    """
    A unique integer value identifying this project.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
