# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
import datetime as dt
from .status_c5a_enum import StatusC5AEnum
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class AzureBlobImportStorage(UncheckedBaseModel):
    id: int
    type: str
    synchronizable: typing.Optional[bool] = None
    presign: typing.Optional[bool] = None
    container: typing.Optional[str] = pydantic.Field(default=None)
    """
    Azure blob container
    """

    prefix: typing.Optional[str] = pydantic.Field(default=None)
    """
    Azure blob prefix name
    """

    regex_filter: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage regex for filtering objects
    """

    use_blob_urls: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Interpret objects as BLOBs and generate URLs
    """

    account_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Azure Blob account name
    """

    account_key: typing.Optional[str] = pydantic.Field(default=None)
    """
    Azure Blob account key
    """

    last_sync: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    Last sync finished time
    """

    last_sync_count: typing.Optional[int] = pydantic.Field(default=None)
    """
    Count of tasks synced last time
    """

    last_sync_job: typing.Optional[str] = pydantic.Field(default=None)
    """
    Last sync job ID
    """

    status: typing.Optional[StatusC5AEnum] = None
    traceback: typing.Optional[str] = pydantic.Field(default=None)
    """
    Traceback report for the last failed sync
    """

    meta: typing.Optional[typing.Optional[typing.Any]] = None
    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage title
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    Cloud storage description
    """

    created_at: dt.datetime = pydantic.Field()
    """
    Creation time
    """

    presign_ttl: typing.Optional[int] = pydantic.Field(default=None)
    """
    Presigned URLs TTL (in minutes)
    """

    project: int = pydantic.Field()
    """
    A unique integer value identifying this project.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
