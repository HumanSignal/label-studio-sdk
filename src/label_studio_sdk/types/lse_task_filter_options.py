# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .lse_task_filter_options_annotated import LseTaskFilterOptionsAnnotated
import pydantic
from .lse_task_filter_options_finished import LseTaskFilterOptionsFinished
from .lse_task_filter_options_reviewed import LseTaskFilterOptionsReviewed
from .lse_task_filter_options_skipped import LseTaskFilterOptionsSkipped
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class LseTaskFilterOptions(UncheckedBaseModel):
    annotated: typing.Optional[LseTaskFilterOptionsAnnotated] = pydantic.Field(default=None)
    """
    `only` - include all tasks with at least one not skipped annotation<br>`exclude` - exclude all tasks with at least one not skipped annotation
    
    * `only` - only
    * `exclude` - exclude
    * `None` - None
    """

    finished: typing.Optional[LseTaskFilterOptionsFinished] = pydantic.Field(default=None)
    """
    `only` - include all finished tasks (is_labeled = true)<br>`exclude` - exclude all finished tasks
    
    * `only` - only
    * `exclude` - exclude
    * `None` - None
    """

    only_with_annotations: typing.Optional[bool] = None
    reviewed: typing.Optional[LseTaskFilterOptionsReviewed] = pydantic.Field(default=None)
    """
    `only` - include all reviewed tasks<br>`exclude` - exclude all reviewed tasks
    
    * `only` - only
    * `exclude` - exclude
    * `None` - None
    """

    skipped: typing.Optional[LseTaskFilterOptionsSkipped] = pydantic.Field(default=None)
    """
    `only` - include all tasks with skipped annotations<br>`exclude` - exclude all tasks with skipped annotations
    
    * `only` - only
    * `exclude` - exclude
    * `None` - None
    """

    view: typing.Optional[int] = pydantic.Field(default=None)
    """
    Apply filters from the view ID (a tab from the Data Manager)
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
