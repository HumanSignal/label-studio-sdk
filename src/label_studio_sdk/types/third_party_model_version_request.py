# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .provider_enum import ProviderEnum
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class ThirdPartyModelVersionRequest(UncheckedBaseModel):
    model_provider_connection: typing.Optional[int] = None
    organization: typing.Optional[int] = None
    parent_model: typing.Optional[int] = pydantic.Field(default=None)
    """
    Parent model interface ID
    """

    prompt: str = pydantic.Field()
    """
    Prompt to execute
    """

    provider: typing.Optional[ProviderEnum] = pydantic.Field(default=None)
    """
    The model provider to use e.g. OpenAI
    
    * `OpenAI` - OpenAI
    * `AzureOpenAI` - AzureOpenAI
    * `AzureAIFoundry` - AzureAIFoundry
    * `VertexAI` - VertexAI
    * `Gemini` - Gemini
    * `Anthropic` - Anthropic
    * `Custom` - Custom
    """

    provider_model_id: str = pydantic.Field()
    """
    The model ID to use within the given provider, e.g. gpt-3.5
    """

    title: str = pydantic.Field()
    """
    Model name
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
