# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
from .child_filter import ChildFilter
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Filter(UncheckedBaseModel):
    child_filter: typing.Optional[ChildFilter] = None
    column: str = pydantic.Field()
    """
    Field name
    """

    id: int
    index: typing.Optional[int] = pydantic.Field(default=None)
    """
    Display order among root filters only
    """

    operator: str = pydantic.Field()
    """
    Filter operator
    """

    parent: typing.Optional[int] = pydantic.Field(default=None)
    """
    Optional parent filter to create one-level hierarchy (child filters are AND-merged with parent)
    """

    type: str = pydantic.Field()
    """
    Field type
    """

    value: typing.Optional[typing.Optional[typing.Any]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
