# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class AnnotationDraftDmField(pydantic_v1.BaseModel):
    id: typing.Optional[int] = None
    user: typing.Optional[str] = None
    created_username: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    User name string
    """

    created_ago: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    Delta time from creation time
    """

    result: typing.Optional[typing.List[typing.Dict[str, typing.Any]]] = pydantic_v1.Field(default=None)
    """
    List of annotation results for the task
    """

    lead_time: typing.Optional[float] = pydantic_v1.Field(default=None)
    """
    How much time it took to annotate the task
    """

    was_postponed: typing.Optional[bool] = pydantic_v1.Field(default=None)
    """
    User postponed this draft (clicked a forward button) in the label stream
    """

    import_id: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Original draft ID that was at the import step or NULL if this draft wasn't imported
    """

    created_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Creation time
    """

    updated_at: typing.Optional[dt.datetime] = pydantic_v1.Field(default=None)
    """
    Last update time
    """

    task: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Corresponding task for this draft
    """

    annotation: typing.Optional[int] = pydantic_v1.Field(default=None)
    """
    Corresponding annotation for this draft
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
