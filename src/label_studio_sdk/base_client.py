# This file was auto-generated by Fern from our API Definition.

import typing
import httpx
from .core.client_wrapper import SyncClientWrapper
from .annotations.client import AnnotationsClient
from .comments.client import CommentsClient
from .users.client import UsersClient
from .actions.client import ActionsClient
from .views.client import ViewsClient
from .organizations.client import OrganizationsClient
from .jwt_settings.client import JwtSettingsClient
from .ml.client import MlClient
from .model_providers.client import ModelProvidersClient
from .predictions.client import PredictionsClient
from .projects.client import ProjectsClient
from .tasks.client import TasksClient
from .prompts.client import PromptsClient
from .import_storage.client import ImportStorageClient
from .export_storage.client import ExportStorageClient
from .tokens.client import TokensClient
from .versions.client import VersionsClient
from .webhooks.client import WebhooksClient
from .core.client_wrapper import AsyncClientWrapper
from .annotations.client import AsyncAnnotationsClient
from .comments.client import AsyncCommentsClient
from .users.client import AsyncUsersClient
from .actions.client import AsyncActionsClient
from .views.client import AsyncViewsClient
from .organizations.client import AsyncOrganizationsClient
from .jwt_settings.client import AsyncJwtSettingsClient
from .ml.client import AsyncMlClient
from .model_providers.client import AsyncModelProvidersClient
from .predictions.client import AsyncPredictionsClient
from .projects.client import AsyncProjectsClient
from .tasks.client import AsyncTasksClient
from .prompts.client import AsyncPromptsClient
from .import_storage.client import AsyncImportStorageClient
from .export_storage.client import AsyncExportStorageClient
from .tokens.client import AsyncTokensClient
from .versions.client import AsyncVersionsClient
from .webhooks.client import AsyncWebhooksClient


class LabelStudioBase:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from label_studio_sdk import LabelStudio

    client = LabelStudio(
        api_key="YOUR_API_KEY",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.annotations = AnnotationsClient(client_wrapper=self._client_wrapper)
        self.comments = CommentsClient(client_wrapper=self._client_wrapper)
        self.users = UsersClient(client_wrapper=self._client_wrapper)
        self.actions = ActionsClient(client_wrapper=self._client_wrapper)
        self.views = ViewsClient(client_wrapper=self._client_wrapper)
        self.organizations = OrganizationsClient(client_wrapper=self._client_wrapper)
        self.jwt_settings = JwtSettingsClient(client_wrapper=self._client_wrapper)
        self.ml = MlClient(client_wrapper=self._client_wrapper)
        self.model_providers = ModelProvidersClient(client_wrapper=self._client_wrapper)
        self.predictions = PredictionsClient(client_wrapper=self._client_wrapper)
        self.projects = ProjectsClient(client_wrapper=self._client_wrapper)
        self.tasks = TasksClient(client_wrapper=self._client_wrapper)
        self.prompts = PromptsClient(client_wrapper=self._client_wrapper)
        self.import_storage = ImportStorageClient(client_wrapper=self._client_wrapper)
        self.export_storage = ExportStorageClient(client_wrapper=self._client_wrapper)
        self.tokens = TokensClient(client_wrapper=self._client_wrapper)
        self.versions = VersionsClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)


class AsyncLabelStudioBase:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : str
        The base url to use for requests from the client.

    api_key : str
    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from label_studio_sdk import AsyncLabelStudio

    client = AsyncLabelStudio(
        api_key="YOUR_API_KEY",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        api_key: str,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            api_key=api_key,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self.annotations = AsyncAnnotationsClient(client_wrapper=self._client_wrapper)
        self.comments = AsyncCommentsClient(client_wrapper=self._client_wrapper)
        self.users = AsyncUsersClient(client_wrapper=self._client_wrapper)
        self.actions = AsyncActionsClient(client_wrapper=self._client_wrapper)
        self.views = AsyncViewsClient(client_wrapper=self._client_wrapper)
        self.organizations = AsyncOrganizationsClient(client_wrapper=self._client_wrapper)
        self.jwt_settings = AsyncJwtSettingsClient(client_wrapper=self._client_wrapper)
        self.ml = AsyncMlClient(client_wrapper=self._client_wrapper)
        self.model_providers = AsyncModelProvidersClient(client_wrapper=self._client_wrapper)
        self.predictions = AsyncPredictionsClient(client_wrapper=self._client_wrapper)
        self.projects = AsyncProjectsClient(client_wrapper=self._client_wrapper)
        self.tasks = AsyncTasksClient(client_wrapper=self._client_wrapper)
        self.prompts = AsyncPromptsClient(client_wrapper=self._client_wrapper)
        self.import_storage = AsyncImportStorageClient(client_wrapper=self._client_wrapper)
        self.export_storage = AsyncExportStorageClient(client_wrapper=self._client_wrapper)
        self.tokens = AsyncTokensClient(client_wrapper=self._client_wrapper)
        self.versions = AsyncVersionsClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
