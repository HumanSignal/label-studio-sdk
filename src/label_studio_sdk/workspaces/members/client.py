# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from .raw_client import AsyncRawMembersClient, RawMembersClient
from .types.members_create_response import MembersCreateResponse
from .types.members_list_response_item import MembersListResponseItem

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MembersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawMembersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawMembersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawMembersClient
        """
        return self._raw_client

    def list(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[MembersListResponseItem]:
        """

        List all workspace memberships for a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[MembersListResponseItem]


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.workspaces.members.list(id=1, )
        """
        _response = self._raw_client.list(id, request_options=request_options)
        return _response.data

    def create(
        self, id: int, *, user: typing.Optional[int] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> MembersCreateResponse:
        """

        Create a new workspace membership. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        user : typing.Optional[int]
            User ID of the workspace member

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MembersCreateResponse


        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.workspaces.members.create(id=1, )
        """
        _response = self._raw_client.create(id, user=user, request_options=request_options)
        return _response.data

    def delete(
        self, id: int, *, user: typing.Optional[int] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """

        Delete a specific workspace membership. You will need to provide the workspace ID and the user ID. You can find this using [List workspace memberships](list).

        Parameters
        ----------
        id : int
            Workspace ID

        user : typing.Optional[int]
            User ID of the workspace member

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio
        client = LabelStudio(api_key="YOUR_API_KEY", )
        client.workspaces.members.delete(id=1, )
        """
        _response = self._raw_client.delete(id, user=user, request_options=request_options)
        return _response.data


class AsyncMembersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawMembersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawMembersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawMembersClient
        """
        return self._raw_client

    async def list(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[MembersListResponseItem]:
        """

        List all workspace memberships for a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[MembersListResponseItem]


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspaces.members.list(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.list(id, request_options=request_options)
        return _response.data

    async def create(
        self, id: int, *, user: typing.Optional[int] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> MembersCreateResponse:
        """

        Create a new workspace membership. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        user : typing.Optional[int]
            User ID of the workspace member

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        MembersCreateResponse


        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspaces.members.create(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.create(id, user=user, request_options=request_options)
        return _response.data

    async def delete(
        self, id: int, *, user: typing.Optional[int] = OMIT, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """

        Delete a specific workspace membership. You will need to provide the workspace ID and the user ID. You can find this using [List workspace memberships](list).

        Parameters
        ----------
        id : int
            Workspace ID

        user : typing.Optional[int]
            User ID of the workspace member

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import AsyncLabelStudio
        import asyncio
        client = AsyncLabelStudio(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.workspaces.members.delete(id=1, )
        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, user=user, request_options=request_options)
        return _response.data
