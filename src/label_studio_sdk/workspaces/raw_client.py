# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..types.workspace import Workspace

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawWorkspacesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[typing.List[Workspace]]:
        """

        List all workspaces for your organization.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[typing.List[Workspace]]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/workspaces",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Workspace],
                    parse_obj_as(
                        type_=typing.List[Workspace],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(
        self,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Workspace]:
        """

        Create a new workspace.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        color : typing.Optional[str]
            Workspace color in HEX format

        is_archived : typing.Optional[bool]
            Is workspace archived

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workspace]

        """
        _response = self._client_wrapper.httpx_client.request(
            "api/workspaces",
            method="POST",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "color": color,
                "is_archived": is_archived,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workspace,
                    parse_obj_as(
                        type_=Workspace,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[Workspace]:
        """

        Get information about a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workspace]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workspace,
                    parse_obj_as(
                        type_=Workspace,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[None]:
        """

        Delete a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        id: int,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[Workspace]:
        """

        Update a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        color : typing.Optional[str]
            Workspace color in HEX format

        is_archived : typing.Optional[bool]
            Is workspace archived

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[Workspace]

        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "color": color,
                "is_archived": is_archived,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workspace,
                    parse_obj_as(
                        type_=Workspace,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawWorkspacesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[typing.List[Workspace]]:
        """

        List all workspaces for your organization.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[typing.List[Workspace]]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/workspaces",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    typing.List[Workspace],
                    parse_obj_as(
                        type_=typing.List[Workspace],  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Workspace]:
        """

        Create a new workspace.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        color : typing.Optional[str]
            Workspace color in HEX format

        is_archived : typing.Optional[bool]
            Is workspace archived

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workspace]

        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/workspaces",
            method="POST",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "color": color,
                "is_archived": is_archived,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workspace,
                    parse_obj_as(
                        type_=Workspace,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[Workspace]:
        """

        Get information about a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workspace]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workspace,
                    parse_obj_as(
                        type_=Workspace,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """

        Delete a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        id: int,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[Workspace]:
        """

        Update a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        color : typing.Optional[str]
            Workspace color in HEX format

        is_archived : typing.Optional[bool]
            Is workspace archived

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[Workspace]

        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "color": color,
                "is_archived": is_archived,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    Workspace,
                    parse_obj_as(
                        type_=Workspace,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
