# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import pydantic_v1
from ..core.request_options import RequestOptions
from ..types.workspace import Workspace
from .members.client import AsyncMembersClient, MembersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class WorkspacesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.members = MembersClient(client_wrapper=self._client_wrapper)

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Workspace]:
        """
        List all workspaces for your organization.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Workspace]


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.workspaces.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/workspaces", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.List[Workspace], _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workspace:
        """
        Create a new workspace.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        is_archived : typing.Optional[bool]
            Is workspace archived

        color : typing.Optional[str]
            Workspace color in HEX format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workspace


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.workspaces.create()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/workspaces",
            method="POST",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "is_archived": is_archived,
                "color": color,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Workspace, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Workspace:
        """
        Get information about a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workspace


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.workspaces.get(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Workspace, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.workspaces.delete(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: int,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workspace:
        """
        Update a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        is_archived : typing.Optional[bool]
            Is workspace archived

        color : typing.Optional[str]
            Workspace color in HEX format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workspace


        Examples
        --------
        from label_studio_sdk.client import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.workspaces.update(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "is_archived": is_archived,
                "color": color,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Workspace, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncWorkspacesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.members = AsyncMembersClient(client_wrapper=self._client_wrapper)

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.List[Workspace]:
        """
        List all workspaces for your organization.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[Workspace]


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.workspaces.list()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/workspaces", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(typing.List[Workspace], _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workspace:
        """
        Create a new workspace.

        Workspaces in Label Studio let you organize your projects and users into separate spaces. This is useful for managing different teams, departments, or projects within your organization.

        For more information, see [Workspaces in Label Studio](https://docs.humansignal.com/guide/workspaces).

        Parameters
        ----------
        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        is_archived : typing.Optional[bool]
            Is workspace archived

        color : typing.Optional[str]
            Workspace color in HEX format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workspace


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.workspaces.create()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/workspaces",
            method="POST",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "is_archived": is_archived,
                "color": color,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Workspace, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Workspace:
        """
        Get information about a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workspace


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.workspaces.get(
            id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Workspace, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.workspaces.delete(
            id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}", method="DELETE", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: int,
        *,
        title: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        is_public: typing.Optional[bool] = OMIT,
        is_personal: typing.Optional[bool] = OMIT,
        is_archived: typing.Optional[bool] = OMIT,
        color: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Workspace:
        """
        Update a specific workspace. You will need to provide the workspace ID. You can find this using [List workspaces](list).

        Parameters
        ----------
        id : int
            Workspace ID

        title : typing.Optional[str]
            Workspace title

        description : typing.Optional[str]
            Workspace description

        is_public : typing.Optional[bool]
            Is workspace public

        is_personal : typing.Optional[bool]
            Is workspace personal

        is_archived : typing.Optional[bool]
            Is workspace archived

        color : typing.Optional[str]
            Workspace color in HEX format

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Workspace


        Examples
        --------
        from label_studio_sdk.client import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        await client.workspaces.update(
            id=1,
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/workspaces/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "title": title,
                "description": description,
                "is_public": is_public,
                "is_personal": is_personal,
                "is_archived": is_archived,
                "color": color,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return pydantic_v1.parse_obj_as(Workspace, _response.json())  # type: ignore
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
