# This file was auto-generated by Fern from our API Definition.

import typing
from ...core.client_wrapper import SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.paginated_lse_organization_member_list_list import PaginatedLseOrganizationMemberListList
from ...core.jsonable_encoder import jsonable_encoder
from ...core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ...core.api_error import ApiError
from ...types.role9e7enum import Role9E7Enum
from ...types.lse_organization_member_list import LseOrganizationMemberList
from ...types.organization_member import OrganizationMember
from ...errors.forbidden_error import ForbiddenError
from ...errors.not_found_error import NotFoundError
from ...errors.method_not_allowed_error import MethodNotAllowedError
from ...types.default_role_enum import DefaultRoleEnum
import datetime as dt
from .types.patched_default_role_request_custom_scripts_editable_by import (
    PatchedDefaultRoleRequestCustomScriptsEditableBy,
)
from ...types.default_role import DefaultRole
from ...core.serialization import convert_and_respect_annotation_metadata
from ...core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class MembersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self,
        id: int,
        *,
        exclude_project_id: typing.Optional[int] = None,
        exclude_workspace_id: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedLseOrganizationMemberListList:
        """
        Retrieve a list of all users and roles in a specific organization.

        Parameters
        ----------
        id : int
            A unique integer value identifying this organization.

        exclude_project_id : typing.Optional[int]
            Project ID to exclude users who are already associated with this project (direct members, workspace members, or implicit admin/owner access).

        exclude_workspace_id : typing.Optional[int]
            Workspace ID to exclude users who are already associated with this workspace (direct workspace members or implicit admin/owner access).

        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        page : typing.Optional[int]
            A page number within the paginated result set.

        page_size : typing.Optional[int]
            Number of results to return per page.

        search : typing.Optional[str]
            A search term.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedLseOrganizationMemberListList


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.organizations.members.list(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships",
            method="GET",
            params={
                "exclude_project_id": exclude_project_id,
                "exclude_workspace_id": exclude_workspace_id,
                "ordering": ordering,
                "page": page,
                "page_size": page_size,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedLseOrganizationMemberListList,
                    construct_type(
                        type_=PaginatedLseOrganizationMemberListList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self, id: int, *, user_id: int, role: Role9E7Enum, request_options: typing.Optional[RequestOptions] = None
    ) -> LseOrganizationMemberList:
        """
        Assign a role to a user in an organization. To do so, make the following cURL request:
        
        ```bash
        curl -H 'Content-Type: application/json' -H 'Authorization: Token abc123' \
        -X POST 'https://label-studio-host/api/organizations/{{id}}/memberships' --data '[{{"user_id": Int, "role": "NO|DI|OW|AD|MA|AN|RE" }}]'
        ```
        
        Enumerate a role with one of the following abbreviations:
        
        | Role | Full Role Name |
        | --- | --- |
        | NO | Not Activated |
        | DI | Deactivated |
        | OW | Owner |
        | AD | Administrator |
        | MA | Manager |
        | AN | Annotator |
        | RE | Reviewer |
        
        For example, to set a user with an ID of 9 as an annotator, make the following cURL request:
        ```bash
        curl -H 'Content-Type: application/json' -H 'Authorization: Token abc123' \
        -X POST 'https://label-studio-host/api/organizations/{{id}}/memberships' --data '[{{"user_id": 9, "role": "AN" }}]'
        ```
        
        Parameters
        ----------
        id : int
            A unique integer value identifying this organization.
        
        user_id : int
        
        role : Role9E7Enum
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        LseOrganizationMemberList
            
        
        Examples
        --------
        from label_studio_sdk import LabelStudio
        
        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.organizations.members.create(
            id=1,
            user_id=1,
            role="OW",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships",
            method="POST",
            json={
                "user_id": user_id,
                "role": role,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseOrganizationMemberList,
                    construct_type(
                        type_=LseOrganizationMemberList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: int,
        *,
        user_id: typing.Optional[int] = OMIT,
        role: typing.Optional[Role9E7Enum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LseOrganizationMemberList:
        """
        Update organization membership or role for a specific user ID.

        **User Rotation Best Practices for API Usage**

        To maintain compliance with our licensing terms and ensure optimal performance of HumanSignal's APIs, please consider the following guidelines when managing user assignments:

        * **Maintain a 7-Day Minimum Assignment**: Once a licensed seat is assigned to a user, maintain that assignment for at least seven consecutive days before rotating it to another user.

        * **Automate, Monitor, and Log Rotations**: Implement automated scheduling and logging mechanisms to track the timing of user rotations. This helps ensure that rotations adhere to the seven-day minimum period.

        * **Adhere to API Update Frequency and Wait Periods**: When updating user assignments via our APIs, follow the recommended frequency and wait period guidelines provided in the HumanSignal API documentation. Avoid sending rapid, successive requests that might overload the endpoint. Instead, incorporate appropriate delays between calls as specified in the documentation.

        * **Avoid Overloading the API Endpoint**: Design your integration to batch or schedule updates where possible, and implement backoff strategies if the API indicates rate limiting. This helps prevent service disruptions and ensures a smooth operation.

        Parameters
        ----------
        id : int
            A unique integer value identifying this organization.

        user_id : typing.Optional[int]

        role : typing.Optional[Role9E7Enum]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LseOrganizationMemberList


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.organizations.members.update(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships",
            method="PATCH",
            json={
                "user_id": user_id,
                "role": role,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseOrganizationMemberList,
                    construct_type(
                        type_=LseOrganizationMemberList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, id: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> OrganizationMember:
        """
        Get organization member details by user ID.

        Parameters
        ----------
        id : int

        user_pk : int
            A unique integer value identifying the user to get organization details for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationMember


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.organizations.members.get(
            id=1,
            user_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships/{jsonable_encoder(user_pk)}/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    OrganizationMember,
                    construct_type(
                        type_=OrganizationMember,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Soft delete a member from the organization.

        Parameters
        ----------
        id : int

        user_pk : int
            A unique integer value identifying the user to be deleted from the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.organizations.members.delete(
            id=1,
            user_pk=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships/{jsonable_encoder(user_pk)}/",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def updated_default_role(
        self,
        id: int,
        *,
        organization: typing.Optional[int] = OMIT,
        default_role: typing.Optional[DefaultRoleEnum] = OMIT,
        external_id: typing.Optional[str] = OMIT,
        embed_domains: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        embed_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        extra_data_on_activity_logs: typing.Optional[bool] = OMIT,
        custom_scripts_enabled_at: typing.Optional[dt.datetime] = OMIT,
        custom_scripts_editable_by: typing.Optional[PatchedDefaultRoleRequestCustomScriptsEditableBy] = OMIT,
        annotator_reviewer_firewall_enabled_at: typing.Optional[dt.datetime] = OMIT,
        read_only_quick_view_enabled_at: typing.Optional[dt.datetime] = OMIT,
        label_stream_navigation_disabled_at: typing.Optional[dt.datetime] = OMIT,
        email_notification_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DefaultRole:
        """
        Update the default role for members of a specific organization.

        Parameters
        ----------
        id : int

        organization : typing.Optional[int]
            A unique integer value identifying this organization.

        default_role : typing.Optional[DefaultRoleEnum]
            Default membership role for invited users

            * `OW` - Owner
            * `AD` - Administrator
            * `MA` - Manager
            * `RE` - Reviewer
            * `AN` - Annotator
            * `DI` - Deactivated
            * `NO` - Not Activated

        external_id : typing.Optional[str]
            External ID to uniquely identify this organization

        embed_domains : typing.Optional[typing.Optional[typing.Any]]

        embed_settings : typing.Optional[typing.Optional[typing.Any]]

        extra_data_on_activity_logs : typing.Optional[bool]

        custom_scripts_enabled_at : typing.Optional[dt.datetime]
            Set to current time to enabled custom scripts for this organization. Can only be enabled if no organization members are active members of any other organizations; otherwise an error will be raised. If this occurs, contact the LEAP team for assistance with enabling custom scripts.

        custom_scripts_editable_by : typing.Optional[PatchedDefaultRoleRequestCustomScriptsEditableBy]
            Set the minimum user role that can edit custom scripts in the UI.

            * `AD` - Administrator
            * `MA` - Manager

        annotator_reviewer_firewall_enabled_at : typing.Optional[dt.datetime]
            Set to current time to restrict data sharing between annotators and reviewers in the label stream, review stream, and notifications (which will be disabled). In these settings, information about annotator and reviewer identity is suppressed in the UI.

        read_only_quick_view_enabled_at : typing.Optional[dt.datetime]
            Set to current time to prevent creating or editing annotations in quick view.

        label_stream_navigation_disabled_at : typing.Optional[dt.datetime]
            Set to current time to disable the label stream navigation for this organization. This will prevent users from going back in the label stream to view previous labels.

        email_notification_settings : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DefaultRole


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.organizations.members.updated_default_role(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/set-default-role",
            method="PATCH",
            json={
                "organization": organization,
                "default_role": default_role,
                "external_id": external_id,
                "embed_domains": embed_domains,
                "embed_settings": embed_settings,
                "extra_data_on_activity_logs": extra_data_on_activity_logs,
                "custom_scripts_enabled_at": custom_scripts_enabled_at,
                "custom_scripts_editable_by": convert_and_respect_annotation_metadata(
                    object_=custom_scripts_editable_by,
                    annotation=PatchedDefaultRoleRequestCustomScriptsEditableBy,
                    direction="write",
                ),
                "annotator_reviewer_firewall_enabled_at": annotator_reviewer_firewall_enabled_at,
                "read_only_quick_view_enabled_at": read_only_quick_view_enabled_at,
                "label_stream_navigation_disabled_at": label_stream_navigation_disabled_at,
                "email_notification_settings": email_notification_settings,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DefaultRole,
                    construct_type(
                        type_=DefaultRole,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncMembersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self,
        id: int,
        *,
        exclude_project_id: typing.Optional[int] = None,
        exclude_workspace_id: typing.Optional[int] = None,
        ordering: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        search: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedLseOrganizationMemberListList:
        """
        Retrieve a list of all users and roles in a specific organization.

        Parameters
        ----------
        id : int
            A unique integer value identifying this organization.

        exclude_project_id : typing.Optional[int]
            Project ID to exclude users who are already associated with this project (direct members, workspace members, or implicit admin/owner access).

        exclude_workspace_id : typing.Optional[int]
            Workspace ID to exclude users who are already associated with this workspace (direct workspace members or implicit admin/owner access).

        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        page : typing.Optional[int]
            A page number within the paginated result set.

        page_size : typing.Optional[int]
            Number of results to return per page.

        search : typing.Optional[str]
            A search term.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedLseOrganizationMemberListList


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organizations.members.list(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships",
            method="GET",
            params={
                "exclude_project_id": exclude_project_id,
                "exclude_workspace_id": exclude_workspace_id,
                "ordering": ordering,
                "page": page,
                "page_size": page_size,
                "search": search,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedLseOrganizationMemberListList,
                    construct_type(
                        type_=PaginatedLseOrganizationMemberListList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self, id: int, *, user_id: int, role: Role9E7Enum, request_options: typing.Optional[RequestOptions] = None
    ) -> LseOrganizationMemberList:
        """
        Assign a role to a user in an organization. To do so, make the following cURL request:
        
        ```bash
        curl -H 'Content-Type: application/json' -H 'Authorization: Token abc123' \
        -X POST 'https://label-studio-host/api/organizations/{{id}}/memberships' --data '[{{"user_id": Int, "role": "NO|DI|OW|AD|MA|AN|RE" }}]'
        ```
        
        Enumerate a role with one of the following abbreviations:
        
        | Role | Full Role Name |
        | --- | --- |
        | NO | Not Activated |
        | DI | Deactivated |
        | OW | Owner |
        | AD | Administrator |
        | MA | Manager |
        | AN | Annotator |
        | RE | Reviewer |
        
        For example, to set a user with an ID of 9 as an annotator, make the following cURL request:
        ```bash
        curl -H 'Content-Type: application/json' -H 'Authorization: Token abc123' \
        -X POST 'https://label-studio-host/api/organizations/{{id}}/memberships' --data '[{{"user_id": 9, "role": "AN" }}]'
        ```
        
        Parameters
        ----------
        id : int
            A unique integer value identifying this organization.
        
        user_id : int
        
        role : Role9E7Enum
        
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.
        
        Returns
        -------
        LseOrganizationMemberList
            
        
        Examples
        --------
        import asyncio
        
        from label_studio_sdk import AsyncLabelStudio
        
        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )
        
        
        async def main() -> None:
            await client.organizations.members.create(
                id=1,
                user_id=1,
                role="OW",
            )
        
        
        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships",
            method="POST",
            json={
                "user_id": user_id,
                "role": role,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseOrganizationMemberList,
                    construct_type(
                        type_=LseOrganizationMemberList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: int,
        *,
        user_id: typing.Optional[int] = OMIT,
        role: typing.Optional[Role9E7Enum] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LseOrganizationMemberList:
        """
        Update organization membership or role for a specific user ID.

        **User Rotation Best Practices for API Usage**

        To maintain compliance with our licensing terms and ensure optimal performance of HumanSignal's APIs, please consider the following guidelines when managing user assignments:

        * **Maintain a 7-Day Minimum Assignment**: Once a licensed seat is assigned to a user, maintain that assignment for at least seven consecutive days before rotating it to another user.

        * **Automate, Monitor, and Log Rotations**: Implement automated scheduling and logging mechanisms to track the timing of user rotations. This helps ensure that rotations adhere to the seven-day minimum period.

        * **Adhere to API Update Frequency and Wait Periods**: When updating user assignments via our APIs, follow the recommended frequency and wait period guidelines provided in the HumanSignal API documentation. Avoid sending rapid, successive requests that might overload the endpoint. Instead, incorporate appropriate delays between calls as specified in the documentation.

        * **Avoid Overloading the API Endpoint**: Design your integration to batch or schedule updates where possible, and implement backoff strategies if the API indicates rate limiting. This helps prevent service disruptions and ensures a smooth operation.

        Parameters
        ----------
        id : int
            A unique integer value identifying this organization.

        user_id : typing.Optional[int]

        role : typing.Optional[Role9E7Enum]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LseOrganizationMemberList


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organizations.members.update(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships",
            method="PATCH",
            json={
                "user_id": user_id,
                "role": role,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseOrganizationMemberList,
                    construct_type(
                        type_=LseOrganizationMemberList,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, id: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> OrganizationMember:
        """
        Get organization member details by user ID.

        Parameters
        ----------
        id : int

        user_pk : int
            A unique integer value identifying the user to get organization details for.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        OrganizationMember


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organizations.members.get(
                id=1,
                user_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships/{jsonable_encoder(user_pk)}/",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    OrganizationMember,
                    construct_type(
                        type_=OrganizationMember,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: int, user_pk: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Soft delete a member from the organization.

        Parameters
        ----------
        id : int

        user_pk : int
            A unique integer value identifying the user to be deleted from the organization.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organizations.members.delete(
                id=1,
                user_pk=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/memberships/{jsonable_encoder(user_pk)}/",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 405:
                raise MethodNotAllowedError(
                    typing.cast(
                        typing.Optional[typing.Any],
                        construct_type(
                            type_=typing.Optional[typing.Any],  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def updated_default_role(
        self,
        id: int,
        *,
        organization: typing.Optional[int] = OMIT,
        default_role: typing.Optional[DefaultRoleEnum] = OMIT,
        external_id: typing.Optional[str] = OMIT,
        embed_domains: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        embed_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        extra_data_on_activity_logs: typing.Optional[bool] = OMIT,
        custom_scripts_enabled_at: typing.Optional[dt.datetime] = OMIT,
        custom_scripts_editable_by: typing.Optional[PatchedDefaultRoleRequestCustomScriptsEditableBy] = OMIT,
        annotator_reviewer_firewall_enabled_at: typing.Optional[dt.datetime] = OMIT,
        read_only_quick_view_enabled_at: typing.Optional[dt.datetime] = OMIT,
        label_stream_navigation_disabled_at: typing.Optional[dt.datetime] = OMIT,
        email_notification_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> DefaultRole:
        """
        Update the default role for members of a specific organization.

        Parameters
        ----------
        id : int

        organization : typing.Optional[int]
            A unique integer value identifying this organization.

        default_role : typing.Optional[DefaultRoleEnum]
            Default membership role for invited users

            * `OW` - Owner
            * `AD` - Administrator
            * `MA` - Manager
            * `RE` - Reviewer
            * `AN` - Annotator
            * `DI` - Deactivated
            * `NO` - Not Activated

        external_id : typing.Optional[str]
            External ID to uniquely identify this organization

        embed_domains : typing.Optional[typing.Optional[typing.Any]]

        embed_settings : typing.Optional[typing.Optional[typing.Any]]

        extra_data_on_activity_logs : typing.Optional[bool]

        custom_scripts_enabled_at : typing.Optional[dt.datetime]
            Set to current time to enabled custom scripts for this organization. Can only be enabled if no organization members are active members of any other organizations; otherwise an error will be raised. If this occurs, contact the LEAP team for assistance with enabling custom scripts.

        custom_scripts_editable_by : typing.Optional[PatchedDefaultRoleRequestCustomScriptsEditableBy]
            Set the minimum user role that can edit custom scripts in the UI.

            * `AD` - Administrator
            * `MA` - Manager

        annotator_reviewer_firewall_enabled_at : typing.Optional[dt.datetime]
            Set to current time to restrict data sharing between annotators and reviewers in the label stream, review stream, and notifications (which will be disabled). In these settings, information about annotator and reviewer identity is suppressed in the UI.

        read_only_quick_view_enabled_at : typing.Optional[dt.datetime]
            Set to current time to prevent creating or editing annotations in quick view.

        label_stream_navigation_disabled_at : typing.Optional[dt.datetime]
            Set to current time to disable the label stream navigation for this organization. This will prevent users from going back in the label stream to view previous labels.

        email_notification_settings : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DefaultRole


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.organizations.members.updated_default_role(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/organizations/{jsonable_encoder(id)}/set-default-role",
            method="PATCH",
            json={
                "organization": organization,
                "default_role": default_role,
                "external_id": external_id,
                "embed_domains": embed_domains,
                "embed_settings": embed_settings,
                "extra_data_on_activity_logs": extra_data_on_activity_logs,
                "custom_scripts_enabled_at": custom_scripts_enabled_at,
                "custom_scripts_editable_by": convert_and_respect_annotation_metadata(
                    object_=custom_scripts_editable_by,
                    annotation=PatchedDefaultRoleRequestCustomScriptsEditableBy,
                    direction="write",
                ),
                "annotator_reviewer_firewall_enabled_at": annotator_reviewer_firewall_enabled_at,
                "read_only_quick_view_enabled_at": read_only_quick_view_enabled_at,
                "label_stream_navigation_disabled_at": label_stream_navigation_disabled_at,
                "email_notification_settings": email_notification_settings,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    DefaultRole,
                    construct_type(
                        type_=DefaultRole,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
