# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.project_template import ProjectTemplate
from ..core.unchecked_base_model import construct_type
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.jsonable_encoder import jsonable_encoder
from ..types.lse_project import LseProject
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ProjectTemplatesClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(
        self, *, ordering: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ProjectTemplate]:
        """
        Get a list of all project templates for an organization.

        Parameters
        ----------
        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProjectTemplate]


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.project_templates.list()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/project-templates/",
            method="GET",
            params={
                "ordering": ordering,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ProjectTemplate],
                    construct_type(
                        type_=typing.List[ProjectTemplate],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        project_id: int,
        assignment_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        created_by: typing.Optional[int] = OMIT,
        custom_script: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        organization: typing.Optional[int] = OMIT,
        project_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        require_comment_on_skip: typing.Optional[bool] = OMIT,
        review_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        show_unused_data_columns_to_annotators: typing.Optional[bool] = OMIT,
        tags: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectTemplate:
        """
        Create a project template for an organization.

        Parameters
        ----------
        name : str

        project_id : int

        assignment_settings : typing.Optional[typing.Optional[typing.Any]]

        created_by : typing.Optional[int]

        custom_script : typing.Optional[str]
            custom script for projects created from this template

        description : typing.Optional[str]

        organization : typing.Optional[int]

        project_settings : typing.Optional[typing.Optional[typing.Any]]

        require_comment_on_skip : typing.Optional[bool]
            flag to require comment on skip

        review_settings : typing.Optional[typing.Optional[typing.Any]]

        show_unused_data_columns_to_annotators : typing.Optional[bool]

        tags : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectTemplate


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.project_templates.create(
            name="name",
            project_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/project-templates/",
            method="POST",
            json={
                "assignment_settings": assignment_settings,
                "created_by": created_by,
                "custom_script": custom_script,
                "description": description,
                "name": name,
                "organization": organization,
                "project_id": project_id,
                "project_settings": project_settings,
                "require_comment_on_skip": require_comment_on_skip,
                "review_settings": review_settings,
                "show_unused_data_columns_to_annotators": show_unused_data_columns_to_annotators,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectTemplate,
                    construct_type(
                        type_=ProjectTemplate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> ProjectTemplate:
        """
        Get a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectTemplate


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.project_templates.get(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectTemplate,
                    construct_type(
                        type_=ProjectTemplate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.project_templates.delete(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        id: int,
        *,
        assignment_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        created_by: typing.Optional[int] = OMIT,
        custom_script: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        organization: typing.Optional[int] = OMIT,
        project_id: typing.Optional[int] = OMIT,
        project_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        require_comment_on_skip: typing.Optional[bool] = OMIT,
        review_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        show_unused_data_columns_to_annotators: typing.Optional[bool] = OMIT,
        tags: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectTemplate:
        """
        Update the details of a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        assignment_settings : typing.Optional[typing.Optional[typing.Any]]

        created_by : typing.Optional[int]

        custom_script : typing.Optional[str]
            custom script for projects created from this template

        description : typing.Optional[str]

        name : typing.Optional[str]

        organization : typing.Optional[int]

        project_id : typing.Optional[int]

        project_settings : typing.Optional[typing.Optional[typing.Any]]

        require_comment_on_skip : typing.Optional[bool]
            flag to require comment on skip

        review_settings : typing.Optional[typing.Optional[typing.Any]]

        show_unused_data_columns_to_annotators : typing.Optional[bool]

        tags : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectTemplate


        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.project_templates.update(
            id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "assignment_settings": assignment_settings,
                "created_by": created_by,
                "custom_script": custom_script,
                "description": description,
                "name": name,
                "organization": organization,
                "project_id": project_id,
                "project_settings": project_settings,
                "require_comment_on_skip": require_comment_on_skip,
                "review_settings": review_settings,
                "show_unused_data_columns_to_annotators": show_unused_data_columns_to_annotators,
                "tags": tags,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectTemplate,
                    construct_type(
                        type_=ProjectTemplate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_project_from_template(
        self,
        id: int,
        *,
        title: str,
        workspace_id: int,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LseProject:
        """
        Create a project from a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        title : str
            The title of the project to be created from the template.

        workspace_id : int
            A unique integer value identifying the workspace in which to create the project.

        description : typing.Optional[str]
            A description for the project.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LseProject
            Project created successfully

        Examples
        --------
        from label_studio_sdk import LabelStudio

        client = LabelStudio(
            api_key="YOUR_API_KEY",
        )
        client.project_templates.create_project_from_template(
            id=1,
            title="title",
            workspace_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}/create-project",
            method="POST",
            json={
                "description": description,
                "title": title,
                "workspace_id": workspace_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseProject,
                    construct_type(
                        type_=LseProject,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncProjectTemplatesClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, ordering: typing.Optional[str] = None, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[ProjectTemplate]:
        """
        Get a list of all project templates for an organization.

        Parameters
        ----------
        ordering : typing.Optional[str]
            Which field to use when ordering the results.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[ProjectTemplate]


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.project_templates.list()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/project-templates/",
            method="GET",
            params={
                "ordering": ordering,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[ProjectTemplate],
                    construct_type(
                        type_=typing.List[ProjectTemplate],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        project_id: int,
        assignment_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        created_by: typing.Optional[int] = OMIT,
        custom_script: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        organization: typing.Optional[int] = OMIT,
        project_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        require_comment_on_skip: typing.Optional[bool] = OMIT,
        review_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        show_unused_data_columns_to_annotators: typing.Optional[bool] = OMIT,
        tags: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectTemplate:
        """
        Create a project template for an organization.

        Parameters
        ----------
        name : str

        project_id : int

        assignment_settings : typing.Optional[typing.Optional[typing.Any]]

        created_by : typing.Optional[int]

        custom_script : typing.Optional[str]
            custom script for projects created from this template

        description : typing.Optional[str]

        organization : typing.Optional[int]

        project_settings : typing.Optional[typing.Optional[typing.Any]]

        require_comment_on_skip : typing.Optional[bool]
            flag to require comment on skip

        review_settings : typing.Optional[typing.Optional[typing.Any]]

        show_unused_data_columns_to_annotators : typing.Optional[bool]

        tags : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectTemplate


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.project_templates.create(
                name="name",
                project_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/project-templates/",
            method="POST",
            json={
                "assignment_settings": assignment_settings,
                "created_by": created_by,
                "custom_script": custom_script,
                "description": description,
                "name": name,
                "organization": organization,
                "project_id": project_id,
                "project_settings": project_settings,
                "require_comment_on_skip": require_comment_on_skip,
                "review_settings": review_settings,
                "show_unused_data_columns_to_annotators": show_unused_data_columns_to_annotators,
                "tags": tags,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectTemplate,
                    construct_type(
                        type_=ProjectTemplate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> ProjectTemplate:
        """
        Get a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectTemplate


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.project_templates.get(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectTemplate,
                    construct_type(
                        type_=ProjectTemplate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, id: int, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.project_templates.delete(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        id: int,
        *,
        assignment_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        created_by: typing.Optional[int] = OMIT,
        custom_script: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        name: typing.Optional[str] = OMIT,
        organization: typing.Optional[int] = OMIT,
        project_id: typing.Optional[int] = OMIT,
        project_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        require_comment_on_skip: typing.Optional[bool] = OMIT,
        review_settings: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        show_unused_data_columns_to_annotators: typing.Optional[bool] = OMIT,
        tags: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ProjectTemplate:
        """
        Update the details of a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        assignment_settings : typing.Optional[typing.Optional[typing.Any]]

        created_by : typing.Optional[int]

        custom_script : typing.Optional[str]
            custom script for projects created from this template

        description : typing.Optional[str]

        name : typing.Optional[str]

        organization : typing.Optional[int]

        project_id : typing.Optional[int]

        project_settings : typing.Optional[typing.Optional[typing.Any]]

        require_comment_on_skip : typing.Optional[bool]
            flag to require comment on skip

        review_settings : typing.Optional[typing.Optional[typing.Any]]

        show_unused_data_columns_to_annotators : typing.Optional[bool]

        tags : typing.Optional[typing.Optional[typing.Any]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ProjectTemplate


        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.project_templates.update(
                id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}",
            method="PATCH",
            json={
                "assignment_settings": assignment_settings,
                "created_by": created_by,
                "custom_script": custom_script,
                "description": description,
                "name": name,
                "organization": organization,
                "project_id": project_id,
                "project_settings": project_settings,
                "require_comment_on_skip": require_comment_on_skip,
                "review_settings": review_settings,
                "show_unused_data_columns_to_annotators": show_unused_data_columns_to_annotators,
                "tags": tags,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    ProjectTemplate,
                    construct_type(
                        type_=ProjectTemplate,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_project_from_template(
        self,
        id: int,
        *,
        title: str,
        workspace_id: int,
        description: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LseProject:
        """
        Create a project from a specific project template by ID for an organization.

        Parameters
        ----------
        id : int

        title : str
            The title of the project to be created from the template.

        workspace_id : int
            A unique integer value identifying the workspace in which to create the project.

        description : typing.Optional[str]
            A description for the project.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LseProject
            Project created successfully

        Examples
        --------
        import asyncio

        from label_studio_sdk import AsyncLabelStudio

        client = AsyncLabelStudio(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.project_templates.create_project_from_template(
                id=1,
                title="title",
                workspace_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"api/project-templates/{jsonable_encoder(id)}/create-project",
            method="POST",
            json={
                "description": description,
                "title": title,
                "workspace_id": workspace_id,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    LseProject,
                    construct_type(
                        type_=LseProject,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
